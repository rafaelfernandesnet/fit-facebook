(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var ngModule = angular.module('FitFacebook', ['ngAnimate', 'ngRoute', 'ngMessages', 'ngCookies', 'ngSanitize', 'ngResource', 'underscore', 'angularMoment', 'ff.dashboardModule', 'ff.newsModule', 'ff.friendModule', 'ff.coreModule']);
require('./components/ng-underscore/ng-underscore.js');
require('./modules/ff-core/ff.core.app.js');
require('./modules/ff-friend/ff.friend.app.js');
require('./modules/ff-news/ff.news.app.js');
require('./modules/ff-dashboard/ff.dashboard.app.js');


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/app.js
},{"./components/ng-underscore/ng-underscore.js":2,"./modules/ff-core/ff.core.app.js":3,"./modules/ff-dashboard/ff.dashboard.app.js":7,"./modules/ff-friend/ff.friend.app.js":10,"./modules/ff-news/ff.news.app.js":14}],2:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
angular.module('underscore', []).factory('_', function() {
  return window._;
});


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/components/ng-underscore/ng-underscore.js
},{}],3:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var service = require('./ff.core.service.js');
var facebookInterceptorProvider = require('./ff.core.config.js');
angular.module('ff.coreModule', []).controller('ffCoreController', require('./ff.core.controller.js')).service(service.name, service.service).constant('ffToken', '').provider('facebookInterceptor', facebookInterceptorProvider).config(function(facebookInterceptorProvider) {});


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.app.js
},{"./ff.core.config.js":4,"./ff.core.controller.js":5,"./ff.core.service.js":6}],4:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function facebookInterceptorProvider($locationProvider, $httpProvider, ffToken) {
  $locationProvider.html5Mode(true);
  $httpProvider.interceptors.push(['$rootScope', function($rootScope) {
    return {'request': function(config) {
        return addToken(config);
      }};
    function addToken(config) {
      if (shouldNotAddToken(config))
        return config;
      if (config.url.indexOf('facebook') > 0) {
        return formatFacebookUrl(config);
      }
      return config;
    }
    function formatFacebookUrl(config) {
      var signal = config.url.indexOf('?') > 0 ? '&' : '?';
      config.url = 'https:/graph.facebook.com/v2.4/' + config.url.replace('/facebook/', '') + signal + 'access_token=' + $rootScope.token + '&debug=all&format=json&method=' + config.method.toLowerCase() + '&pretty=0&suppress_http_code=1';
      return config;
    }
    function shouldNotAddToken(config) {
      return (!$rootScope.token || config.url.indexOf('.html') > 0);
    }
  }]);
  return {$get: function() {}};
}
module.exports = ['$locationProvider', '$httpProvider', 'ffToken', facebookInterceptorProvider];
module.exports.name = 'facebookInterceptorProvider';


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.config.js
},{}],5:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffCoreController($scope, $location, ffToken, $window, $rootScope, $http, ffCoreService) {
  var vm = this;
  var code;
  vm.formatDate = formatDate;
  vm.facebookUrl = 'https://www.facebook.com/dialog/oauth?client_id=155870204744672&redirect_uri=http://localhost:8888/&expiry=86400&scope=email,user_posts,publish_actions,user_friends,user_status,user_games_activity,user_actions.fitness';
  vm.headerUrl = './modules/ff-core/ff.core.header.tmpl.html';
  vm.footerUrl = './modules/ff-core/ff.core.footer.tmpl.html';
  ffCoreService.clearAll();
  loadToken();
  clearUrl();
  function formatDate(date) {
    var dateOut = new Date(date);
    return dateOut;
  }
  ;
  function loadToken() {
    if (!$window.location.search)
      return;
    code = getParameterByName('code');
    $http.get('/authorize/?code=' + code).success(getToken).error(failToGetToken);
  }
  function getToken(data) {
    vm.token = $rootScope.token = data.access_token;
    loadUserInfo();
  }
  function failToGetToken(error) {
    vm.errorMessage = error;
  }
  function loadUserInfo() {
    ffCoreService.getUserInfo(updateUserInfo);
  }
  function updateUserInfo(userInfo) {
    vm.userInfo = userInfo;
  }
  function clearUrl() {
    history.pushState("", document.title, $window.location.pathname);
  }
  function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec($window.location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
  }
}
module.exports = ['$scope', '$location', 'ffToken', '$window', '$rootScope', '$http', 'ffCoreService', ffCoreController];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.controller.js
},{}],6:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffCoreService($http, $rootScope) {
  var _userInfo;
  return {
    getUserInfo: getUserInfo,
    clearAll: clearAll
  };
  function clearAll() {
    _userInfo = undefined;
  }
  function loadUserInfo(fn) {
    $http.get('/facebook/me').success(function(result) {
      _userInfo = $rootScope.userInfo = result;
      if (fn) {
        fn(_userInfo);
      }
    }).error(function(error) {
      console.error('failed to load users information from facebook');
    });
  }
  function getUserInfo(fn) {
    if (!_userInfo) {
      loadUserInfo(fn);
    } else {
      fn(_userInfo);
    }
  }
}
module.exports = {
  service: ['$http', '$rootScope', ffCoreService],
  name: 'ffCoreService'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-core/ff.core.service.js
},{}],7:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
angular.module('ff.dashboardModule', []).config(require('./ff.dashboard.routes.js')).controller('ffDashboardController', require('./ff.dashboard.controller.js'));


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.app.js
},{"./ff.dashboard.controller.js":8,"./ff.dashboard.routes.js":9}],8:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffDashboardController($scope) {
  var vm = this;
}
module.exports = ['$scope', ffDashboardController];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.controller.js
},{}],9:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$routeProvider', function($routeProvider) {
  $routeProvider.when('/', {
    controller: 'ffDashboardController as vm',
    templateUrl: './modules/ff-dashboard/ff.dashboard.tmpl.html'
  });
}];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-dashboard/ff.dashboard.routes.js
},{}],10:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var friendController = require('./ff.friend.controller.js');
var friendService = require('./ff.friend.service.js');
angular.module('ff.friendModule', []).config(require('./ff.friend.routes.js')).factory(friendService.name, friendService.service).controller(friendController.name, friendController.controller);


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.app.js
},{"./ff.friend.controller.js":11,"./ff.friend.routes.js":12,"./ff.friend.service.js":13}],11:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffFriendController($scope, ffFriendService) {
  var vm = this;
  ffFriendService.list(loadFriends);
  function loadFriends(friends) {
    debugger;
    vm.friends = friends;
  }
}
module.exports = {
  controller: ['$scope', 'ffFriendService', ffFriendController],
  name: 'ffFriendController'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.controller.js
},{}],12:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
module.exports = ['$routeProvider', function($routeProvider) {
  $routeProvider.when('/friends', {
    controller: 'ffFriendController as vm',
    templateUrl: './modules/ff-friend/ff.friend.tmpl.html'
  });
}];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.routes.js
},{}],13:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffFriendService($http, $rootScope) {
  return {list: list};
  function list(fnSuccess, fnError) {
    return $http.get('/facebook/' + $rootScope.userInfo.id + '/friends').success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to get activities');
    });
  }
}
module.exports = {
  service: ['$http', '$rootScope', ffFriendService],
  name: 'ffFriendService'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-friend/ff.friend.service.js
},{}],14:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
var newsFeed = require('./ff.news.feed.directive.js');
var newsPost = require('./ff.news.post.directive.js');
angular.module('ff.newsModule', ['ff.coreModule']).factory('ffNewsService', require('./ff.news.service.js')).directive(newsFeed.name, newsFeed.directive).controller(newsFeed.controllerName, newsFeed.controller).directive(newsPost.name, newsPost.directive).controller(newsPost.controllerName, newsPost.controller);


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.app.js
},{"./ff.news.feed.directive.js":15,"./ff.news.post.directive.js":16,"./ff.news.service.js":17}],15:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsFeed() {
  return {
    restrict: 'E',
    transclude: true,
    scope: true,
    templateUrl: './modules/ff-news/ff.news.feed.directive.tmpl.html',
    controller: 'ffNewsFeedController as vm',
    replace: true,
    link: function(scope, element, attrs) {}
  };
}
function ffNewsFeedController($scope, $rootScope, ffNewsService, $timeout, _) {
  var vm = this;
  var reloadNewsEvery = 10000;
  var plainNewsInfo;
  $scope.$on('authenticated', loadActivities);
  $scope.$on('contentUpdated', loadActivities);
  if ($rootScope.token) {
    loadActivities();
  }
  function loadActivities() {
    ffNewsService.activities(populateNews);
    autoUpdate();
  }
  function autoUpdate() {
    $timeout(function() {
      ffNewsService.activities(populateNews);
      autoUpdate();
    }, reloadNewsEvery);
  }
  function populateNews(result) {
    if (angular.toJson(vm.news) === angular.toJson(result.data))
      return;
    vm.news = result.data;
  }
}
module.exports = {
  directive: [ffNewsFeed],
  name: 'ffNewsFeed',
  controller: ['$scope', '$rootScope', 'ffNewsService', '$timeout', '_', ffNewsFeedController],
  controllerName: 'ffNewsFeedController'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.feed.directive.js
},{}],16:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsPost() {
  return {
    restrict: 'E',
    transclude: true,
    templateUrl: './modules/ff-news/ff.news.post.directive.tmpl.html',
    controller: 'ffNewsPostController as vm',
    scope: true,
    replace: true,
    link: function(scope, element, attrs) {}
  };
}
function ffNewsPostController($scope, $rootScope, ffNewsService) {
  var vm = this;
  vm.test = 'This directive is bound.';
  vm.post = post;
  function post() {
    vm.waiting = true;
    ffNewsService.post(vm.message, updateContent, failedToPost);
  }
  function failedToPost() {
    vm.waiting = false;
  }
  function updateContent() {
    $rootScope.$broadcast('contentUpdated');
    vm.message = '';
    vm.waiting = false;
  }
}
module.exports = {
  directive: [ffNewsPost],
  name: 'ffNewsPost',
  controller: ['$scope', '$rootScope', 'ffNewsService', ffNewsPostController],
  controllerName: 'ffNewsPostController'
};


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.post.directive.js
},{}],17:[function(require,module,exports){
"use strict";
"use strict";
"use strict";
function ffNewsService($http, $window, $rootScope) {
  return {
    post: post,
    activities: activities
  };
  function post(message, fnSuccess, fnError) {
    debugger;
    return $http.post('/facebook/me/feed?message=' + encodeURIComponent(message)).success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to post');
    });
  }
  function activities(fnSuccess, fnError) {
    return $http.get('/facebook/me/feed').success(function(data, status, headers) {
      if (fnSuccess) {
        fnSuccess(data);
      }
    }).error(function(data, status, headers) {
      if (fnError) {
        fnError(data);
      }
      console.log('ffNewsService failed to get news');
    });
  }
}
module.exports = ['$http', '$window', '$rootScope', ffNewsService];


//# sourceURL=/Users/rafaelfernandes/Projects/fit-facebook/www/public/modules/ff-news/ff.news.service.js
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9hcHAuanMiLCIuLi9jb21wb25lbnRzL25nLXVuZGVyc2NvcmUvbmctdW5kZXJzY29yZS5qcyIsIi4uL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmFwcC5qcyIsIi4uL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmNvbmZpZy5qcyIsIi4uL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmNvbnRyb2xsZXIuanMiLCIuLi9tb2R1bGVzL2ZmLWNvcmUvZmYuY29yZS5zZXJ2aWNlLmpzIiwiLi4vbW9kdWxlcy9mZi1kYXNoYm9hcmQvZmYuZGFzaGJvYXJkLmFwcC5qcyIsIi4uL21vZHVsZXMvZmYtZGFzaGJvYXJkL2ZmLmRhc2hib2FyZC5jb250cm9sbGVyLmpzIiwiLi4vbW9kdWxlcy9mZi1kYXNoYm9hcmQvZmYuZGFzaGJvYXJkLnJvdXRlcy5qcyIsIi4uL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC5hcHAuanMiLCIuLi9tb2R1bGVzL2ZmLWZyaWVuZC9mZi5mcmllbmQuY29udHJvbGxlci5qcyIsIi4uL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC5yb3V0ZXMuanMiLCIuLi9tb2R1bGVzL2ZmLWZyaWVuZC9mZi5mcmllbmQuc2VydmljZS5qcyIsIi4uL21vZHVsZXMvZmYtbmV3cy9mZi5uZXdzLmFwcC5qcyIsIi4uL21vZHVsZXMvZmYtbmV3cy9mZi5uZXdzLmZlZWQuZGlyZWN0aXZlLmpzIiwiLi4vbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3MucG9zdC5kaXJlY3RpdmUuanMiLCIuLi9tb2R1bGVzL2ZmLW5ld3MvZmYubmV3cy5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFBQSxXQUFXLENBQUM7QUFDWixXQUFXLENBQUM7QUFDWixBQUFJLEVBQUEsQ0FBQSxRQUFPLEVBQUks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QUksQUFBQyxDQUFDLDhCQUE2QixDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0VBQ0o7QUFBQSxBQUNBLFNBQVMsV0FBUyxDQUFFLFNBQVEsQ0FBRyxDQUFBLE9BQU0sQ0FBRztBQUN0QyxTQUFPLENBQUEsS0FBSSxJQUFJLEFBQUMsQ0FBQyxtQkFBa0IsQ0FBQyxRQUFRLEFBQUMsQ0FBQyxTQUFTLElBQUcsQ0FBRyxDQUFBLE1BQUssQ0FBRyxDQUFBLE9BQU0sQ0FBRztBQUM1RSxTQUFJLFNBQVEsQ0FBRztBQUNiLGdCQUFRLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztNQUNqQjtBQUFBLElBQ0YsQ0FBQyxNQUFNLEFBQUMsQ0FBQyxTQUFTLElBQUcsQ0FBRyxDQUFBLE1BQUssQ0FBRyxDQUFBLE9BQU0sQ0FBRztBQUN2QyxTQUFJLE9BQU0sQ0FBRztBQUNYLGNBQU0sQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO01BQ2Y7QUFBQSxBQUNBLFlBQU0sSUFBSSxBQUFDLENBQUMsa0NBQWlDLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUM7RUFDSjtBQUFBLEFBQ0Y7QUFBQSxBQUNBLEtBQUssUUFBUSxFQUFJLEVBQUMsT0FBTSxDQUFHLFVBQVEsQ0FBRyxhQUFXLENBQUcsY0FBWSxDQUFDLENBQUM7QUFHcUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBuZ01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdGaXRGYWNlYm9vaycsIFsnbmdBbmltYXRlJywgJ25nUm91dGUnLCAnbmdNZXNzYWdlcycsICduZ0Nvb2tpZXMnLCAnbmdTYW5pdGl6ZScsICduZ1Jlc291cmNlJywgJ3VuZGVyc2NvcmUnLCAnYW5ndWxhck1vbWVudCcsICdmZi5kYXNoYm9hcmRNb2R1bGUnLCAnZmYubmV3c01vZHVsZScsICdmZi5mcmllbmRNb2R1bGUnLCAnZmYuY29yZU1vZHVsZSddKTtcbnJlcXVpcmUoJy4vY29tcG9uZW50cy9uZy11bmRlcnNjb3JlL25nLXVuZGVyc2NvcmUuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9mZi1jb3JlL2ZmLmNvcmUuYXBwLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC5hcHAuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3MuYXBwLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZmYtZGFzaGJvYXJkL2ZmLmRhc2hib2FyZC5hcHAuanMnKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5aGNIQXVhbk1pTENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZZWEJ3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUVVFc1YwRkJWeXhEUVVGRE8wRkJRMW9zUVVGQlNTeEZRVUZCTEVOQlFVRXNVVUZCVHl4RlFVRkpMRU5CUVVFc1QwRkJUU3hQUVVGUExFRkJRVU1zUTBGQlF5eGhRVUZaTEVOQlFVY3NSVUZCUXl4WFFVRlZMRU5CUVVjc1ZVRkJVU3hEUVVGSExHRkJRVmNzUTBGQlJ5eFpRVUZWTEVOQlFVY3NZVUZCVnl4RFFVRkhMR0ZCUVZjc1EwRkJSeXhoUVVGWExFTkJRVWNzWjBKQlFXTXNRMEZCUnl4eFFrRkJiVUlzUTBGQlJ5eG5Ra0ZCWXl4RFFVRkhMR3RDUVVGblFpeERRVUZITEdkQ1FVRmpMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1pQTEUxQlFVMHNRVUZCUXl4RFFVRkRMRFpEUVVFMFF5eERRVUZETEVOQlFVTTdRVUZEZEVRc1RVRkJUU3hCUVVGRExFTkJRVU1zYTBOQlFXbERMRU5CUVVNc1EwRkJRenRCUVVNelF5eE5RVUZOTEVGQlFVTXNRMEZCUXl4elEwRkJjVU1zUTBGQlF5eERRVUZETzBGQlF5OURMRTFCUVUwc1FVRkJReXhEUVVGRExHdERRVUZwUXl4RFFVRkRMRU5CUVVNN1FVRkRNME1zVFVGQlRTeEJRVUZETEVOQlFVTXNORU5CUVRKRExFTkJRVU1zUTBGQlF6dEJRVWR6UWlJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTHlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dWRtRnlJRzVuVFc5a2RXeGxJRDBnWVc1bmRXeGhjaTV0YjJSMWJHVW9KMFpwZEVaaFkyVmliMjlySnl3Z1d5ZHVaMEZ1YVcxaGRHVW5MQ0FuYm1kU2IzVjBaU2NzSUNkdVowMWxjM05oWjJWekp5d2dKMjVuUTI5dmEybGxjeWNzSUNkdVoxTmhibWwwYVhwbEp5d2dKMjVuVW1WemIzVnlZMlVuTENBbmRXNWtaWEp6WTI5eVpTY3NJQ2RoYm1kMWJHRnlUVzl0Wlc1MEp5d2dKMlptTG1SaGMyaGliMkZ5WkUxdlpIVnNaU2NzSUNkbVppNXVaWGR6VFc5a2RXeGxKeXdnSjJabUxtWnlhV1Z1WkUxdlpIVnNaU2NzSUNkbVppNWpiM0psVFc5a2RXeGxKMTBwTzF4dWNtVnhkV2x5WlNnbkxpOWpiMjF3YjI1bGJuUnpMMjVuTFhWdVpHVnljMk52Y21VdmJtY3RkVzVrWlhKelkyOXlaUzVxY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlptTFdOdmNtVXZabVl1WTI5eVpTNWhjSEF1YW5NbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTltWmkxbWNtbGxibVF2Wm1ZdVpuSnBaVzVrTG1Gd2NDNXFjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyWm1MVzVsZDNNdlptWXVibVYzY3k1aGNIQXVhbk1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OW1aaTFrWVhOb1ltOWhjbVF2Wm1ZdVpHRnphR0p2WVhKa0xtRndjQzVxY3ljcE8xeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGxvWTBoQmRXRnVUV2xNUTBwNllqTldlVmt5Vm5wSmFuQmlTV2s1Vm1NeVZubGplVGw1V1ZkYWFGcFhlRzFhV0VwMVdWYzFhMXBZVFhaVlNFcDJZVzFXYW1SSVRYWmFiV3d3VEZkYWFGa3lWbWxpTWpseVRETmtNMlI1T1hka1YwcHpZVmROZGxsWVFuZE1iWEI2U1d3d2MwbHROV2hpVjFaNlNXcHdZbGhUZDJsaVYwWjNZMGRzZFZvelRXbFBhVXBDVVZWMFFrOHdSa0pSVlVWelVWVkdRbE5UZUVaUlZVWkNURVZPUWxGVlJYTlZWVVpDVkhsNFJsRlZSa3BNUlU1Q1VWVkZjMVF3UmtKVVUzaFFVVlZHVUV4RlJrSlJWVTF6VVRCR1FsRjVlR2hSVlVaYVRFVk9RbEZWWTNOU1ZVWkVaV3ROYzFZd1JrSldVM2hFVVZWR1NFeEdWa0pSVmtWelVUQkdRbEo1ZUdoUlZVWllURVZPUWxFeU5VUk1SbXhDVVZaVmMxRXdSa0pTZVhob1VWVkdXRXhGVGtKUk0yaERURWRHUWxGV1kzTlJNRVpDVW5sNGFGRlZSbGhNUlU1Q1VUTndRMHhIWkVOUlZVWnFURVZPUWxKWFdYTmpWVXBDVVZjeFEweEZUa0pSTWpWRFRFZGtRMUZWUm1wTVJVNUNVVEpSYzJFd1NrSlJWMlJEVEVWT1FsRXlhRU5NUjJSRFVWVkdha3hGVGtKUk1uQkRURVZPUWxGVlRYTlJNRVpDVVZSMFFsRlZaRVZNUlRGQ1VWVXdjMUZWUmtKUmVYaEVVVlZHUkV4RVdrUlJWVVV3VVhsNFJGRlZSa1JNUlU1Q1VWVk5OMUZWUms1a1JWRnpWRlZHUWxSVGVFSlJWVVpFVEVWT1FsRlZUWE5oTUU1Q1VWZHNSRXhGVGtKUlZVMXpVVEJHUWxGNmRFSlJWVTE2VVhsNFRsRlZSazVNUlVaQ1VWVk5jMUV3UmtKUmVYaDZVVEJHUW1OVlRYTlJNRVpDVVhsNFJGRlZSa1JQTUVaQ1VYazVSRXhGTVVKUlZUQnpVVlZHUWxGNWVFUlJWVVpFVEVkMFJGRlZSbkJSZVhoRVVWVkdSRXhGVGtKUlZVMDNVVlZHUkUwd1RYTlVWVVpDVkZONFFsRlZSa1JNUlU1Q1VWVk5jMDVGVGtKUlZFcEVURVZPUWxGVlRYTlJNRVpDVVhwMFFsRlZUbmxTUTBselNXNU9kbVJZU21wYVZrcDJZak5SYVU5cFNYWldXRTVzWTI1TmRtTnRSbTFaVjFaeldtMVdlV0p0Um5WYVIxWjZUREZDZVdJeWNHeFpNMUo2VERKYWNHUkRNVzFaVjA1c1dXMDVkbUY1T1ROa00yTjJZMGhXYVdKSGJHcE1lVWx6U1c1T2RtUllTbXBhV0U1RVlqSTFNRnBYTlRCSmFuQmlTV2s0Y1V0c2VIVkpRMjluVkZkR2NHSnBRblJpTWxJeFlrZFZjMGxJVG05aU0xWnpXa05DYVZwVFFqRmpNbFpyU1Vkc2RVbElVbTlhVTBKMVdua3hhR05JUVhWWVJ6Um5TMmxDUVdKdFpHdGlNazFuWWxjNWEyUlhlR3hZUnpSblMybENRV0p0Um5SYVUwSkhZVmhTUjFsWFRteFpiVGwyWVhsQ1kySnBRWEZNTVhoMVpHMUdlVWxITlc1VVZ6bHJaRmQ0YkVsRU1HZFpWelZ1WkZkNGFHTnBOWFJpTWxJeFlrZFZiMG93V25Ca1JWcG9XVEpXYVdJeU9YSktlWGRuVnpGNGRVbERRV2RKUTJSMVdqQkdkV0ZYTVdoa1IxVnVURU5CYm1KdFpGTmlNMVl3V2xOamMwbERaSFZhTURGc1l6Tk9hRm95Vm5wS2VYaGpZbWxCWjBsRFFXNWliV1JFWWpJNWNtRlhWbnBLZVhkblNqSTFibFV5Um5WaFdGSndaVzFWYmt4RFFtTmlhVUZuU1VOQmJtSnRaRk5hV0U1MlpGaEthbHBUWTNOSlEyUXhZbTFTYkdOdVRtcGlNMHBzU25sNFkySnBRV2RKUTBGdVdWYzFibVJYZUdoamF6RjJZbGRXZFdSRFkzTllSelJuU1VOQloxaEhOR2RKUTBGdVdtMVpkVnBIUm5waFIwcDJXVmhLYTFSWE9XdGtWM2hzU25sNFkySnBRV2RKUTJSdFdtazFkVnBZWkhwVVZ6bHJaRmQ0YkVwNWVHTmlhVUZuU1VOa2JWcHBOVzFqYld4c1ltMVNUbUl5VWpGaVIxVnVURVo0ZFVsRFFXZEtNbHB0VEcxT2RtTnRWazVpTWxJeFlrZFZibGhITldSTFZuaDFXRWMxWTJKdVNteGpXRlp3WTIxVmIwcDVOSFpaTWpsMFkwYzVkVnBYTlRCamVUbDFXbmt4TVdKdFVteGpiazVxWWpOS2JFd3lOVzVNV0ZaMVdrZFdlV015VG5aamJWVjFZVzVOYmt0VWRHTmlhVGh4UzJ4NGRVbERiMmRUVlRWTFVsVk9WVWxJVW05YVUwSjBZakpTTVdKSFZXZGhWelJuWkVkb2JFbEZXbkJrUlZwb1dUSldhV0l5T1hKSlJURjJXa2hXYzFwVGQyZFJWazFuVTFaUloxTldUV2RSVlVwUVZtdFZkVmhITkdkTGFVSk5WREJHUlVsSVVtOWFVMEowWWpKU01XSkhWWE5KUms1UVNVVnNWVWxGYkZSSlJVcEdWRVY0VUZaNU5XTmlhVUZ4VERGNGRWaEhOWGxhV0VZeFlWaEtiRXREWTNWTU1qRjJXa2hXYzFwWVRYWmFiVmwwV1RJNWVWcFRPVzFhYVRWcVlqTktiRXh0Um5kalF6VnhZM2xqY0U4eGVIVmpiVlo0WkZkc2VWcFRaMjVNYVRsMFlqSlNNV0pIVm5wTU1scHRURmRhZVdGWFZuVmFRemx0V21rMWJXTnRiR3hpYlZGMVdWaENkMHh0Y0hwS2VXczNXRWMxZVZwWVJqRmhXRXBzUzBOamRVd3lNWFphU0ZaeldsaE5kbHB0V1hSaWJWWXpZM2s1YlZwcE5YVmFXR1I2VEcxR2QyTkROWEZqZVdOd1R6RjRkV050Vm5oa1YyeDVXbE5uYmt4cE9YUmlNbEl4WWtkV2Vrd3lXbTFNVjFKb1l6Sm9hV0l5Um5sYVF6bHRXbWsxYTFsWVRtOVpiVGxvWTIxUmRWbFlRbmRNYlhCNlNubHJOMWhITkdsWVdEQTlYRzR2THlNZ2MyOTFjbU5sVlZKTVBTOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZZWEJ3TG1weklsMTlcbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9hcHAuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xuYW5ndWxhci5tb2R1bGUoJ3VuZGVyc2NvcmUnLCBbXSkuZmFjdG9yeSgnXycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gd2luZG93Ll87XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5amIyMXdiMjVsYm5SekwyNW5MWFZ1WkdWeWMyTnZjbVV2Ym1jdGRXNWtaWEp6WTI5eVpTNXFjeUlzSW5OdmRYSmpaWE1pT2xzaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OWpiMjF3YjI1bGJuUnpMMjVuTFhWdVpHVnljMk52Y21VdmJtY3RkVzVrWlhKelkyOXlaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVUZCTEZkQlFWY3NRMEZCUXp0QlFVTmFMRTFCUVUwc1QwRkJUeXhCUVVGRExFTkJRVU1zV1VGQlZ5eERRVUZITEVkQlFVTXNRMEZCUXl4UlFVRlJMRUZCUVVNc1EwRkJReXhIUVVGRkxFTkJRVWNzVlVGQlVTeEJRVUZETEVOQlFVVTdRVUZEZGtRc1QwRkJUeXhEUVVGQkxFMUJRVXNzUlVGQlJTeERRVUZETzBGQlEycENMRU5CUVVNc1EwRkJRenRCUVVjMFJ5SXNJbk52ZFhKalpWSnZiM1FpT2lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyTnZiWEJ2Ym1WdWRITXZibWN0ZFc1a1pYSnpZMjl5WlM4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2JtRnVaM1ZzWVhJdWJXOWtkV3hsS0NkMWJtUmxjbk5qYjNKbEp5d2dXMTBwTG1aaFkzUnZjbmtvSjE4bkxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ2NtVjBkWEp1SUhkcGJtUnZkeTVmTzF4dWZTazdYRzVjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXUmhkR0U2WVhCd2JHbGpZWFJwYjI0dmFuTnZianRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbTFoVjNoc1NXcHZhVXd4Vm5wYVdFcDZURE5LYUZwdFJteGlSMXBzWTIwMWFHSnRVbXhqZVRsUlkyMDVjVnBYVGpCamVUbHRZVmhSZEZwdFJtcGFWMHAyWWpKemRtUXpaRE5NTTBJeFdXMTRjRmw1T1dwaU1qRjNZakkxYkdKdVVucE1NalZ1VEZoV2RWcEhWbmxqTWs1MlkyMVZkbUp0WTNSa1Z6VnJXbGhLZWxreU9YbGFVelZ4WTNsSmMwbHVUblprV0VwcVdsaE5hVTlzYzJsTU1WWjZXbGhLZWt3elNtaGFiVVpzWWtkYWJHTnROV2hpYlZKc1kzazVVV050T1hGYVYwNHdZM2s1YldGWVVYUmFiVVpxV2xkS2RtSXljM1prTTJRelRETkNNVmx0ZUhCWmVUbHFZakl4ZDJJeU5XeGlibEo2VERJMWJreFlWblZhUjFaNVl6Sk9kbU50VlhaaWJXTjBaRmMxYTFwWVNucFpNamw1V2xNMWNXTjVTbVJNUTBwMVdWY3hiR041U1RaWE1UQnpTVzB4YUdOSVFuQmliV1I2U1dwdmFWRlZSa0pSVkhSQ1VWVkdRa3hGTVVKUlZUQnpWREJHUWxSNWVFSlJWVVpFVEVWT1FsRlZUWE5YVlVaQ1ZubDRSRkZWUmtoTVJXUkNVVlZOYzFFd1JrSlJlWGhTVVZWT2QxRnBlRUpSVlVaRVRFVk9RbEZWVFhOU01FWkNVbE40UkZGVlJraE1SbFpDVVZaRmMxRlZSa0pSZVhoRVVWVkdSazh3UmtKUk0wcERURVU1UWxGVk9ITlJNRVpDVVZONFRsRlZSa3hNUlZaQ1VWVlZjMUV3UmtKUmVuUkNVVlZPZFZGcGVFUlJWVVpFVEVWT1FsRlZUVGRSVlVaRVZHbEpjMGx1VG5aa1dFcHFXbFpLZG1JelVXbFBhVWwyVmxoT2JHTnVUWFpqYlVadFdWZFdjMXB0Vm5saWJVWjFXa2RXZWt3eFFubGlNbkJzV1ROU2Vrd3lXbkJrUXpGdFdWZE9iRmx0T1haaGVUa3paRE5qZG1OSVZtbGlSMnhxVERKT2RtSllRblppYlZaMVpFaE5kbUp0WTNSa1Z6VnJXbGhLZWxreU9YbGFVemhwVEVOS2VtSXpWbmxaTWxaNlVUSTVkV1JIVm5Wa1EwazJWM2xLYUdKdFpERmlSMFo1VEcweGRscElWbk5hVTJkdVpGYzFhMXBZU25wWk1qbDVXbE5qYzBsR2RHUkxWbmgxU1VOQlowbEROVzFaVjA0d1lqTktOVXREWkdaS2VYZG5XbTVXZFZrelVuQmlNalJ2UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDTTJGWE5XdGlNMk4xV0hweloweDVPR2RaV0U1NlpGY3hiR041UWpGaWJWSnNZMjVPYW1JelNteEpSMmhvWTNsQ2FHSklTbXhaVjFJMVNVZEtiRnBYTkdkaVJ6bG9Xa2RXYTBsSE9YVkpTRkp2V2xOQ2QxbFhaR3hZUnpSblNVTkJaMlpUYXpkWVJ6UnBXRmd3UFZ4dUx5OGpJSE52ZFhKalpWVlNURDB2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDJOdmJYQnZibVZ1ZEhNdmJtY3RkVzVrWlhKelkyOXlaUzl1WnkxMWJtUmxjbk5qYjNKbExtcHpJbDE5XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvY29tcG9uZW50cy9uZy11bmRlcnNjb3JlL25nLXVuZGVyc2NvcmUuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xudmFyIHNlcnZpY2UgPSByZXF1aXJlKCcuL2ZmLmNvcmUuc2VydmljZS5qcycpO1xudmFyIGZhY2Vib29rSW50ZXJjZXB0b3JQcm92aWRlciA9IHJlcXVpcmUoJy4vZmYuY29yZS5jb25maWcuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdmZi5jb3JlTW9kdWxlJywgW10pLmNvbnRyb2xsZXIoJ2ZmQ29yZUNvbnRyb2xsZXInLCByZXF1aXJlKCcuL2ZmLmNvcmUuY29udHJvbGxlci5qcycpKS5zZXJ2aWNlKHNlcnZpY2UubmFtZSwgc2VydmljZS5zZXJ2aWNlKS5jb25zdGFudCgnZmZUb2tlbicsICcnKS5wcm92aWRlcignZmFjZWJvb2tJbnRlcmNlcHRvcicsIGZhY2Vib29rSW50ZXJjZXB0b3JQcm92aWRlcikuY29uZmlnKGZ1bmN0aW9uKGZhY2Vib29rSW50ZXJjZXB0b3JQcm92aWRlcikge30pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdOdmNtVXZabVl1WTI5eVpTNWhjSEF1YW5NaUxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012Ylc5a2RXeGxjeTltWmkxamIzSmxMMlptTG1OdmNtVXVZWEJ3TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUVVFc1YwRkJWeXhEUVVGRE8wRkJRMW9zUVVGQlNTeEZRVUZCTEVOQlFVRXNUMEZCVFN4RlFVRkpMRU5CUVVFc1QwRkJUU3hCUVVGRExFTkJRVU1zYzBKQlFYRkNMRU5CUVVNc1EwRkJRenRCUVVNM1F5eEJRVUZKTEVWQlFVRXNRMEZCUVN3eVFrRkJNRUlzUlVGQlNTeERRVUZCTEU5QlFVMHNRVUZCUXl4RFFVRkRMSEZDUVVGdlFpeERRVUZETEVOQlFVTTdRVUZEYUVVc1RVRkJUU3hQUVVGUExFRkJRVU1zUTBGQlF5eGxRVUZqTEVOQlFVY3NSMEZCUXl4RFFVRkRMRmRCUVZjc1FVRkJReXhEUVVGRExHdENRVUZwUWl4RFFVRkhMRU5CUVVFc1QwRkJUU3hCUVVGRExFTkJRVU1zZVVKQlFYZENMRU5CUVVNc1EwRkJReXhSUVVGUkxFRkJRVU1zUTBGQlF5eFBRVUZOTEV0QlFVc3NRMEZCUnl4RFFVRkJMRTlCUVUwc1VVRkJVU3hEUVVGRExGTkJRVk1zUVVGQlF5eERRVUZETEZOQlFWRXNRMEZCUnl4SFFVRkRMRU5CUVVNc1UwRkJVeXhCUVVGRExFTkJRVU1zY1VKQlFXOUNMRU5CUVVjc05FSkJRVEJDTEVOQlFVTXNUMEZCVHl4QlFVRkRMRU5CUVVNc1UwRkJVeXd5UWtGQk1FSXNRMEZCUnl4SFFVRkRMRU5CUVVNc1EwRkJRenRCUVVkb1RDSXNJbk52ZFhKalpWSnZiM1FpT2lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRZMjl5WlM4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNJblZ6WlNCemRISnBZM1JjSWp0Y2JuWmhjaUJ6WlhKMmFXTmxJRDBnY21WeGRXbHlaU2duTGk5bVppNWpiM0psTG5ObGNuWnBZMlV1YW5NbktUdGNiblpoY2lCbVlXTmxZbTl2YTBsdWRHVnlZMlZ3ZEc5eVVISnZkbWxrWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMlptTG1OdmNtVXVZMjl1Wm1sbkxtcHpKeWs3WEc1aGJtZDFiR0Z5TG0xdlpIVnNaU2duWm1ZdVkyOXlaVTF2WkhWc1pTY3NJRnRkS1M1amIyNTBjbTlzYkdWeUtDZG1aa052Y21WRGIyNTBjbTlzYkdWeUp5d2djbVZ4ZFdseVpTZ25MaTltWmk1amIzSmxMbU52Ym5SeWIyeHNaWEl1YW5NbktTa3VjMlZ5ZG1salpTaHpaWEoyYVdObExtNWhiV1VzSUhObGNuWnBZMlV1YzJWeWRtbGpaU2t1WTI5dWMzUmhiblFvSjJabVZHOXJaVzRuTENBbkp5a3VjSEp2ZG1sa1pYSW9KMlpoWTJWaWIyOXJTVzUwWlhKalpYQjBiM0luTENCbVlXTmxZbTl2YTBsdWRHVnlZMlZ3ZEc5eVVISnZkbWxrWlhJcExtTnZibVpwWnlobWRXNWpkR2x2YmlobVlXTmxZbTl2YTBsdWRHVnlZMlZ3ZEc5eVVISnZkbWxrWlhJcElIdDlLVHRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYVG5aamJWVjJXbTFaZFZreU9YbGFVelZvWTBoQmRXRnVUV2xNUTBwNllqTldlVmt5Vm5wSmFuQmlTV2s1Vm1NeVZubGplVGw1V1ZkYWFGcFhlRzFhV0VwMVdWYzFhMXBZVFhaVlNFcDJZVzFXYW1SSVRYWmFiV3d3VEZkYWFGa3lWbWxpTWpseVRETmtNMlI1T1hka1YwcHpZVmROZG1KWE9XdGtWM2hzWTNrNWJWcHBNV3BpTTBwc1RESmFiVXh0VG5aamJWVjFXVmhDZDB4dGNIcEpiREJ6U1cwMWFHSlhWbnBKYW5CaVdGTjNhV0pYUm5kalIyeDFXak5OYVU5cFNrSlJWVVpDVHpCR1FsRlZSWE5SVlVaQ1UxTjRSbEZWUmtKTVJVNUNVVlZGYzFRd1JrSlVVM2hHVVZWR1NreEZUa0pSVlVWelZEQkdRbFJUZUVKUlZVWkVURVZPUWxGVlRYTmpNRXBDVVZoR1EweEZUa0pSVlUxelVUQkdRbEY2ZEVKUlZVMHpVWGw0UWxGVlJrcE1SVlpDVVZWRmMxRXdSa0pSVTNkNVVXdEdRazFGU1hOU1ZVWkNVMU40UkZGVlJrSk1SVGxDVVZVd2MxRlZSa0pSZVhoRVVWVkdSRXhJUmtOUlZVWjJVV2w0UkZGVlJrUk1SVTVDVVZWTk4xRlZSbEpoUlZWelZGVkdRbFJUZUZCUlZVWlFURVZHUWxGVlRYTlJNRVpDVVhsNGJGRlZSbXBNUlU1Q1VWVmpjMUl3UmtKUmVYaEVVVlZHUkV4R1pFSlJNMEpEVEVWR1FsRlZUWE5STUVaQ1VYbDRjbEZyUmtKaFZVbHpVVEJHUWxKNWVFUlJWVVpDVEVVNVFsRlZNSE5SVlVaQ1VYbDRSRkZWUmtSTVNHeERVVlZHTTFGcGVFUlJWVVpFVEVWT1FsRlZUWE5WVlVaRVRUQlJjMUZWUmtKUmVYaEVVVlZHUkV4Rk9VSlJWVEJ6VXpCR1FsTjVlRVJSVlVaSVRFVk9RbEZWUlhOVU1FWkNWRk40VWxGVlJsSk1SVTVDVVZWTmMxVXdSa1JQVlVselVWVkdRbEY1ZUVSUlZVWkVURVpPUWxGV1JYTlJNRVpDVWxONFNGRlZSa1JNUlU1Q1VWVk5jMVV3UmtSYVEzaENVVlZHUkV4RlRrSlJWVTF6WTFWS1FsRlhPVU5NUlU1Q1VWVmpjMDVGU2tKUlZFSkRURVZPUWxGVlRYTlVNRVpFWkVWUmMxRlZSa0pSZVhoRVVWVkdSRXhHVGtKUlZrMXpUV3RLUWxGVVFrTk1SVTVDVVZWamMxSXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVMDNVVlZHUm1OclVXbE1RMHA2WWpOV2VWa3lWbE5pTWprd1NXcHZhVXd4Vm5wYVdFcDZURE5LYUZwdFJteGlSMXBzWTIwMWFHSnRVbXhqZVRsUlkyMDVjVnBYVGpCamVUbHRZVmhSZEZwdFJtcGFWMHAyWWpKemRtUXpaRE5NTTBJeFdXMTRjRmw1T1hSaU1sSXhZa2RXZWt3eVdtMU1WMDUyWTIxVmRrbHBkMmxqTWpreFkyMU9iR013VG5aaWJsSnNZbTVSYVU5c2MybGtiVVo1U1VoT2JHTnVXbkJaTWxWblVGTkNlVnBZUmpGaFdFcHNTME5qZFV3eVdtMU1iVTUyWTIxVmRXTXlWbmxrYld4cVdsTTFjV041WTNCUGVVSmpZbTVhYUdOcFFtMVpWMDVzV1cwNWRtRXdiSFZrUjFaNVdUSldkMlJIT1hsVlNFcDJaRzFzYTFwWVNXZFFVMEo1V2xoR01XRllTbXhMUTJOMVRESmFiVXh0VG5aamJWVjFXVEk1ZFZwdGJHNU1iWEI2U25sck4xaEhOSFpMYVhCalltbEJjVWxHU214alNFcHNZekpXZFdSSVRXZGtSMmhzU1VkT2RtTnRWV2RpVnpsclpGZDRiRWxJU214ak0wSjJZbTVPY0ZsdGVHeFlSelJuUzJsQ2JXSXpTV2RrUjJoc1NVaGtkbU50ZEcxaVJ6a3pTVWM1YlVsSVVtOWFVMEpvWTBoQmRWaEhOR2RMYkhoMVNVTnZaMUZITlc1YVJ6bHFTVWN4ZGxwSVZuTmFWbmgxU1VOdloxRkhOV2hpVjFWbldtMVpkVmt5T1hsYVZURjJXa2hXYzFwVFFtTmlhVUZ4VERGNGRWbFhOVzVrVjNob1kyazFkR0l5VWpGaVIxVnZTakphYlV4dFRuWmpiVlpPWWpKU01XSkhWVzVNUTBKaVdGTnNZMkpwUVdkSlEwRjFXVEk1ZFdSSVNuWmlSM2hzWTJsbmJscHRXa1JpTTBwc1VUSTVkV1JJU25aaVIzaHNZMmxqYzBsSVNteGpXRlp3WTIxVmIwcDVOSFphYlZsMVdUSTVlVnBUTldwaU1qVXdZMjA1YzJKSFZubE1iWEI2U25scmNGaEhOR2RKUTBGblRHNU9iR051V25CWk1sVnZZekpXZVdSdGJHcGFVelYxV1ZjeGJFeERRbnBhV0VveVlWZE9iRXh1VG14amJscHdXVEpWY0ZoSE5HZEpRMEZuVEcxT2RtSnVUakJaVnpVd1MwTmtiVnBzVW5aaE1sWjFTbmwzYmtwNWJHTmlhVUZuU1VOQmRXTklTblprYld4cldsaEpiMG95V21oWk1sWnBZakk1Y2xOWE5UQmFXRXBxV2xoQ01HSXpTVzVNUTBKdFdWZE9iRmx0T1haaE1HeDFaRWRXZVZreVZuZGtSemw1VlVoS2RtUnRiR3RhV0Vsd1dFYzBaMGxEUVdkTWJVNTJZbTFhY0ZwNWFHMWtWelZxWkVkc2RtSnBhRzFaVjA1c1dXMDVkbUV3YkhWa1IxWjVXVEpXZDJSSE9YbFZTRXAyWkcxc2ExcFlTWEJKU0hRNVMxUjBZMkpzZUhWSmJERTVYRzR2THlNZ2MyOTFjbU5sVlZKTVBTOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZiVzlrZFd4bGN5OW1aaTFqYjNKbEwyWm1MbU52Y21VdVlYQndMbXB6SWwxOVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmFwcC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBmYWNlYm9va0ludGVyY2VwdG9yUHJvdmlkZXIoJGxvY2F0aW9uUHJvdmlkZXIsICRodHRwUHJvdmlkZXIsIGZmVG9rZW4pIHtcbiAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKFsnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRyb290U2NvcGUpIHtcbiAgICByZXR1cm4geydyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBhZGRUb2tlbihjb25maWcpO1xuICAgICAgfX07XG4gICAgZnVuY3Rpb24gYWRkVG9rZW4oY29uZmlnKSB7XG4gICAgICBpZiAoc2hvdWxkTm90QWRkVG9rZW4oY29uZmlnKSlcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIGlmIChjb25maWcudXJsLmluZGV4T2YoJ2ZhY2Vib29rJykgPiAwKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXRGYWNlYm9va1VybChjb25maWcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0RmFjZWJvb2tVcmwoY29uZmlnKSB7XG4gICAgICB2YXIgc2lnbmFsID0gY29uZmlnLnVybC5pbmRleE9mKCc/JykgPiAwID8gJyYnIDogJz8nO1xuICAgICAgY29uZmlnLnVybCA9ICdodHRwczovZ3JhcGguZmFjZWJvb2suY29tL3YyLjQvJyArIGNvbmZpZy51cmwucmVwbGFjZSgnL2ZhY2Vib29rLycsICcnKSArIHNpZ25hbCArICdhY2Nlc3NfdG9rZW49JyArICRyb290U2NvcGUudG9rZW4gKyAnJmRlYnVnPWFsbCZmb3JtYXQ9anNvbiZtZXRob2Q9JyArIGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKSArICcmcHJldHR5PTAmc3VwcHJlc3NfaHR0cF9jb2RlPTEnO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG4gICAgZnVuY3Rpb24gc2hvdWxkTm90QWRkVG9rZW4oY29uZmlnKSB7XG4gICAgICByZXR1cm4gKCEkcm9vdFNjb3BlLnRva2VuIHx8IGNvbmZpZy51cmwuaW5kZXhPZignLmh0bWwnKSA+IDApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4geyRnZXQ6IGZ1bmN0aW9uKCkge319O1xufVxubW9kdWxlLmV4cG9ydHMgPSBbJyRsb2NhdGlvblByb3ZpZGVyJywgJyRodHRwUHJvdmlkZXInLCAnZmZUb2tlbicsIGZhY2Vib29rSW50ZXJjZXB0b3JQcm92aWRlcl07XG5tb2R1bGUuZXhwb3J0cy5uYW1lID0gJ2ZhY2Vib29rSW50ZXJjZXB0b3JQcm92aWRlcic7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV052Y21VdlptWXVZMjl5WlM1amIyNW1hV2N1YW5NaUxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012Ylc5a2RXeGxjeTltWmkxamIzSmxMMlptTG1OdmNtVXVZMjl1Wm1sbkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlFVRXNWMEZCVnl4RFFVRkRPMEZCUTFvc1QwRkJVeXcwUWtGQk1FSXNRMEZCUlN4cFFrRkJaMElzUTBGQlJ5eERRVUZCTEdGQlFWa3NRMEZCUnl4RFFVRkJMRTlCUVUwc1EwRkJSenRCUVVNNVJTeHJRa0ZCWjBJc1ZVRkJWU3hCUVVGRExFTkJRVU1zU1VGQlJ5eERRVUZETEVOQlFVTTdRVUZEYWtNc1kwRkJXU3hoUVVGaExFdEJRVXNzUVVGQlF5eERRVUZETEVOQlFVTXNXVUZCVnl4RFFVRkhMRlZCUVZNc1ZVRkJVeXhEUVVGSE8wRkJRMnhGTEZOQlFVOHNSVUZCUXl4VFFVRlJMRU5CUVVjc1ZVRkJVeXhOUVVGTExFTkJRVWM3UVVGRGFFTXNZVUZCVHl4RFFVRkJMRkZCUVU4c1FVRkJReXhEUVVGRExFMUJRVXNzUTBGQlF5eERRVUZETzAxQlEzcENMRU5CUVVNc1EwRkJRenRCUVVOS0xGZEJRVk1zVTBGQlR5eERRVUZGTEUxQlFVc3NRMEZCUnp0QlFVTjRRaXhUUVVGSkxHbENRVUZuUWl4QlFVRkRMRU5CUVVNc1RVRkJTeXhEUVVGRE8wRkJRekZDTEdGQlFVOHNUMEZCU3l4RFFVRkRPMEZCUVVFc1FVRkRaaXhUUVVGSkxFMUJRVXNzU1VGQlNTeFJRVUZSTEVGQlFVTXNRMEZCUXl4VlFVRlRMRU5CUVVNc1EwRkJRU3hEUVVGSkxFVkJRVUVzUTBGQlJ6dEJRVU4wUXl4aFFVRlBMRU5CUVVFc2FVSkJRV2RDTEVGQlFVTXNRMEZCUXl4TlFVRkxMRU5CUVVNc1EwRkJRenROUVVOc1F6dEJRVUZCTEVGQlEwRXNWMEZCVHl4UFFVRkxMRU5CUVVNN1NVRkRaanRCUVVGQkxFRkJRMEVzVjBGQlV5eHJRa0ZCWjBJc1EwRkJSU3hOUVVGTExFTkJRVWM3UVVGRGFrTXNRVUZCU1N4UlFVRkJMRU5CUVVFc1RVRkJTeXhGUVVGSkxFTkJRVUVzVFVGQlN5eEpRVUZKTEZGQlFWRXNRVUZCUXl4RFFVRkRMRWRCUVVVc1EwRkJReXhEUVVGQkxFTkJRVWtzUlVGQlFTeERRVUZCTEVOQlFVa3NTVUZCUlN4RlFVRkpMRWxCUVVVc1EwRkJRenRCUVVOd1JDeFhRVUZMTEVsQlFVa3NSVUZCU1N4RFFVRkJMR2xEUVVGblF5eEZRVUZKTEVOQlFVRXNUVUZCU3l4SlFVRkpMRkZCUVZFc1FVRkJReXhEUVVGRExGbEJRVmNzUTBGQlJ5eEhRVUZETEVOQlFVTXNRMEZCUVN4RFFVRkpMRTlCUVVzc1EwRkJRU3hEUVVGSkxHZENRVUZqTEVOQlFVRXNRMEZCU1N4RFFVRkJMRlZCUVZNc1RVRkJUU3hEUVVGQkxFTkJRVWtzYVVOQlFTdENMRU5CUVVFc1EwRkJTU3hEUVVGQkxFMUJRVXNzVDBGQlR5eFpRVUZaTEVGQlFVTXNSVUZCUXl4RFFVRkJMRU5CUVVrc2FVTkJRU3RDTEVOQlFVTTdRVUZEZGs4c1YwRkJUeXhQUVVGTExFTkJRVU03U1VGRFpqdEJRVUZCTEVGQlEwRXNWMEZCVXl4clFrRkJaMElzUTBGQlJTeE5RVUZMTEVOQlFVYzdRVUZEYWtNc1YwRkJUeXhGUVVGRExFTkJRVU1zVlVGQlV5eE5RVUZOTEVOQlFVRXNSVUZCU3l4RFFVRkJMRTFCUVVzc1NVRkJTU3hSUVVGUkxFRkJRVU1zUTBGQlF5eFBRVUZOTEVOQlFVTXNRMEZCUVN4RFFVRkpMRVZCUVVFc1EwRkJReXhEUVVGRE8wbEJReTlFTzBGQlFVRXNSVUZEUml4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOSUxFOUJRVThzUlVGQlF5eEpRVUZITEVOQlFVY3NWVUZCVVN4QlFVRkRMRU5CUVVVc1IwRkJReXhEUVVGRExFTkJRVU03UVVGRE9VSTdRVUZCUVN4QlFVTkJMRXRCUVVzc1VVRkJVU3hGUVVGSkxFVkJRVU1zYlVKQlFXdENMRU5CUVVjc1owSkJRV01zUTBGQlJ5eFZRVUZSTEVOQlFVY3NORUpCUVRCQ0xFTkJRVU1zUTBGQlF6dEJRVU12Uml4TFFVRkxMRkZCUVZFc1MwRkJTeXhGUVVGSkxEaENRVUUwUWl4RFFVRkRPMEZCUjIxRUlpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMWpiM0psTHlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVpuVnVZM1JwYjI0Z1ptRmpaV0p2YjJ0SmJuUmxjbU5sY0hSdmNsQnliM1pwWkdWeUtDUnNiMk5oZEdsdmJsQnliM1pwWkdWeUxDQWthSFIwY0ZCeWIzWnBaR1Z5TENCbVpsUnZhMlZ1S1NCN1hHNGdJQ1JzYjJOaGRHbHZibEJ5YjNacFpHVnlMbWgwYld3MVRXOWtaU2gwY25WbEtUdGNiaUFnSkdoMGRIQlFjbTkyYVdSbGNpNXBiblJsY21ObGNIUnZjbk11Y0hWemFDaGJKeVJ5YjI5MFUyTnZjR1VuTENCbWRXNWpkR2x2Ymlna2NtOXZkRk5qYjNCbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhzbmNtVnhkV1Z6ZENjNklHWjFibU4wYVc5dUtHTnZibVpwWnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXUmtWRzlyWlc0b1kyOXVabWxuS1R0Y2JpQWdJQ0FnSUgxOU8xeHVJQ0FnSUdaMWJtTjBhVzl1SUdGa1pGUnZhMlZ1S0dOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnYVdZZ0tITm9iM1ZzWkU1dmRFRmtaRlJ2YTJWdUtHTnZibVpwWnlrcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamIyNW1hV2M3WEc0Z0lDQWdJQ0JwWmlBb1kyOXVabWxuTG5WeWJDNXBibVJsZUU5bUtDZG1ZV05sWW05dmF5Y3BJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptOXliV0YwUm1GalpXSnZiMnRWY213b1kyOXVabWxuS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJqYjI1bWFXYzdYRzRnSUNBZ2ZWeHVJQ0FnSUdaMWJtTjBhVzl1SUdadmNtMWhkRVpoWTJWaWIyOXJWWEpzS0dOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnZG1GeUlITnBaMjVoYkNBOUlHTnZibVpwWnk1MWNtd3VhVzVrWlhoUFppZ25QeWNwSUQ0Z01DQS9JQ2NtSnlBNklDYy9KenRjYmlBZ0lDQWdJR052Ym1acFp5NTFjbXdnUFNBbmFIUjBjSE02TDJkeVlYQm9MbVpoWTJWaWIyOXJMbU52YlM5Mk1pNDBMeWNnS3lCamIyNW1hV2N1ZFhKc0xuSmxjR3hoWTJVb0p5OW1ZV05sWW05dmF5OG5MQ0FuSnlrZ0t5QnphV2R1WVd3Z0t5QW5ZV05qWlhOelgzUnZhMlZ1UFNjZ0t5QWtjbTl2ZEZOamIzQmxMblJ2YTJWdUlDc2dKeVprWldKMVp6MWhiR3dtWm05eWJXRjBQV3B6YjI0bWJXVjBhRzlrUFNjZ0t5QmpiMjVtYVdjdWJXVjBhRzlrTG5SdlRHOTNaWEpEWVhObEtDa2dLeUFuSm5CeVpYUjBlVDB3Sm5OMWNIQnlaWE56WDJoMGRIQmZZMjlrWlQweEp6dGNiaUFnSUNBZ0lISmxkSFZ5YmlCamIyNW1hV2M3WEc0Z0lDQWdmVnh1SUNBZ0lHWjFibU4wYVc5dUlITm9iM1ZzWkU1dmRFRmtaRlJ2YTJWdUtHTnZibVpwWnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNnaEpISnZiM1JUWTI5d1pTNTBiMnRsYmlCOGZDQmpiMjVtYVdjdWRYSnNMbWx1WkdWNFQyWW9KeTVvZEcxc0p5a2dQaUF3S1R0Y2JpQWdJQ0I5WEc0Z0lIMWRLVHRjYmlBZ2NtVjBkWEp1SUhza1oyVjBPaUJtZFc1amRHbHZiaWdwSUh0OWZUdGNibjFjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnV3lja2JHOWpZWFJwYjI1UWNtOTJhV1JsY2ljc0lDY2thSFIwY0ZCeWIzWnBaR1Z5Snl3Z0oyWm1WRzlyWlc0bkxDQm1ZV05sWW05dmEwbHVkR1Z5WTJWd2RHOXlVSEp2ZG1sa1pYSmRPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVibUZ0WlNBOUlDZG1ZV05sWW05dmEwbHVkR1Z5WTJWd2RHOXlVSEp2ZG1sa1pYSW5PMXh1WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHB0WVZkNGJFbHFiMmxNTVZaNldsaEtla3d6U21oYWJVWnNZa2RhYkdOdE5XaGliVkpzWTNrNVVXTnRPWEZhVjA0d1kzazViV0ZZVVhSYWJVWnFXbGRLZG1JeWMzWmtNMlF6VEROQ01WbHRlSEJaZVRsMFlqSlNNV0pIVm5wTU1scHRURmRPZG1OdFZYWmFiVmwxV1RJNWVWcFROV3BpTWpWdFlWZGpkV0Z1VFdsTVEwcDZZak5XZVZreVZucEphbkJpU1drNVZtTXlWbmxqZVRsNVdWZGFhRnBYZUcxYVdFcDFXVmMxYTFwWVRYWlZTRXAyWVcxV2FtUklUWFphYld3d1RGZGFhRmt5Vm1saU1qbHlURE5rTTJSNU9YZGtWMHB6WVZkTmRtSlhPV3RrVjNoc1kzazViVnBwTVdwaU0wcHNUREphYlV4dFRuWmpiVlYxV1RJNWRWcHRiRzVNYlhCNlNXd3djMGx0TldoaVYxWjZTV3B3WWxoVGQybGlWMFozWTBkc2RWb3pUV2xQYVVwQ1VWZE9Razh3UmtKUlZVVnpWREJHUWxWNWR6QlJhMFpDVFVWSmMxRXdSa0pTVTNod1VXdEdRbG93U1hOUk1FWkNVbmw0UkZGVlJrSk1SMFpDVVZacmMxRXdSa0pTZVhoRVVWVkdRa3hGT1VKUlZUQnpVVEJHUWxKVWRFSlJWVTB6VWxONGNsRnJSa0phTUVselZsVkdRbFpUZUVKUlZVWkVURVZPUWxGVlRYTlRWVVpDVW5sNFJGRlZSa1JNUlU1Q1VWVk5OMUZWUmtSaGEwMXpXVEJHUWxkVGVHaFJWVVpvVEVWMFFsRlZjM05SVlVaQ1VYbDRSRkZWUmtSTVJVNUNVVlZOYzFkVlJrSldlWGhFVVZWR1NFeEdWa0pSVmsxelZsVkdRbFY1ZUVSUlZVWklUekJHUWxFeWVFWk1SazVDVVZVNGMxSlZSa1JVUTNoVVVWVkdVa3hGVGtKUlZXTnpWbFZHUWxaVGVFNVJWVVpNVEVWT1FsRlZZemRSVlVaRVRUQkpjMWxWUmtKVWVYaEVVVlZHUWt4R1JrSlJWVGh6VVZWR1FsRjVlRVJSVlVaRVRFVXhRbEZWYzNOUk1FWkNVWGw0UkZGVlJrUlBNREZDVVROd1EweEZUa0pSTUZselVUQkdRbEY2ZEVKUlZXUkZURVprUWxGV1RYTlZNRVpDVkhsNFJGRlZSa1pNUlRGQ1VWVnpjMUV3UmtKU1ZIUkNVVlZPTWxGcGVGUlJWVVpLVEVkc1ExRlZSbTVSYVhoQ1VWVkdSRXhGVGtKUlZVMXpWRlZHUWxONWVFUlJWVVpFVHpCR1FsRlZZM05aVlVaQ1ZIbDRVRkZWUmt4TVJVNUNVVlZOTjFGVlJrSlJVM2hDVVZWVk1WRjVlRlJSVlVaS1RFVXhRbEZWYzNOVFZVWkNVMU40VWxGVlJsSk1SVVpDVVZWTmMxRXdSa0pSZVhoV1VWVkdWRXhGVGtKUlZVMXpVVEJHUWxGVGVFUlJWVVpHVEVWV1FsRlZSWE5STUVaQ1VsUjBRbEZWVG5WUmVYaG9VVlZHVUV4RlRrSlJWVVZ6WVZWS1FsRlhaRU5NUlVaQ1VWVk5jMUV3UmtKUmVYaE9VVlZHVEV4RlRrSlJWVTF6VVRCR1FsRlVkRTVSVlU1eFVYcDBRbEZWUmtKTVJVWkNVVEJGYzFZd1JrSlVlWGhRVVZWR1RFeEZUa0pSVlUwM1UxVkdSRnBxZEVKUlZVWkNURVZHUWxJd1JYTldNRVpDVlhsNGNsRnJSa0phTUVselVUQkdRbEpUZUU1UlZVWk1URVZPUWxGVlZUZFJWVVpFWVVWTmMxRlZSa0pUVTNoU1VWVkdRa3hGVGtKUlZVVnpWRlZHUWxONWVFWlJWVVpLVEVWT1FsRlZSWE5VVlVaQ1UzbDRTbEZWUmtwTVJrWkNVVlpGYzFGVlJrSlJlWGhFVVZWR1JFeEZaRUpSVlZWelVUQkdRbEY1ZUVSUlZVWkNURVZPUWxGVmEzTlNWVVpDVVZONFJGRlZSa0pNUlU1Q1VWVnJjMU5WUmtKU1UzaEdVVlZHUmt4RmJFSlJWVlZ6VVRCR1FsRjZkRUpSVlU1elVrTjRXRkZWUmt4TVJXeENVVlZyYzFKVlJrSlRVM2hFVVZWR1FreEhiRVJSVlVadVVYbDRSbEZWVGpaUmVYaEVVVlZHUWt4Rk1VSlJWWE56VTFWR1FsTlRlRkpSVlVaU1RFVkdRbEZWVFhOUk1FWkNVWGw0V2xGVlJsaE1SVTVDVVZWVmMxSXdSa0pSZVhoRVVWVkdSRXhGVGtKUlZVVnpVVEJHUWxOVGVGQlJWVVpNVEVWT1FsRlZSWE5STUVaQ1VubDRibEZyUmtKWmVYaEVVVlZHUWt4RlRrSlJWVlZ6VVRCR1FsRlRlRlpSVlVaVVRFVXhRbEZWTUhOUk1FWkNVVk40UkZGVlRUTlNVM2h3VVRCR1Frc3dTWE5STUVaQ1VWTjRSRkZWUmtwTVJVNUNVVlZGYzFSVlJrSlRlWGhRVVZWR1VFeEdiRUpSVm10elVWVkdRbEY1ZUVaUlZVWkVURVZPUWxGVlJYTlJNRVpDVTFONGNGRXdSa0pMTUVselVUQkdRbEZVZEVKUlZVNTNVbmw0V0ZGVlJsQk1SVGxDVVZWemMxRXdSa0pSZW5SS1VWVk9iVTh3UmtKUlZVVnpVVlZHUmxGVGVGaFJWVVpVVEVkMFExRlZSbTVSYVhoRVVWVkdSa3hGTVVKUlZYTnpVVEJHUWxKVWRFSlJWVTV2VVhsNFdGRlZSbEJNUlZaQ1VWVk5jMUV3UmtKUmVYaFdVVlZHVkV4Rk1VSlJWVEJ6VVRCR1FsRlRlRVpSVlVaTVRFVk9RbEZWUlhOVVZVWkNVM2w0U2xGVlJrcE1Sa1pDVVZaRmMxRlZSa0pSZVhoRVVWVkdSRXhGT1VKUlZUQnpVVEJHUWxGNWVFUlJWVVpDVEVWT1FsRlZhM05TVlVaQ1VWTjRSRkZWUmtSTVJVNUNVVlZGTjFOVlJrUlBWVkUzVVZWR1FsRlRlRVpSVlU1SFRFVk9RbEZWVFhOUk1FWkNVWGw0UkZGVlJrUlBNRVpDVWxWbmMxUXdSa0pVZVhoR1VWVkdSa3hGYkVKUlZXTnpVVEJHUWxKNWVGWlJWVVpTVEVWR1FsRlZUWE5STUVaQ1VsTjRTRkZWUmtSTVJVNUNVVlZWYzFFd1JrSlJlblJDVVZWV2IxRjZkRUpSVlVaQ1RFVkdRbEpWUlhOVE1FWkNVM2w0VWxGVlJsSk1SVlpDVVZWcmMxSlZSa0pSZVhoMFVXdEdRbUV3U1hOUk1FWkNVbmw0YmxGclJrSlplWGhFVVZWR1NFeEdWa0pSVmtWelVUQkdRbEo1ZHpCUmEwWkNUVVZKYzFFd1JrSlJlWGhFVVZWR1JFOHdSa0pSZVRsSFRFVjBRbEZWYzNOVlZVWkNWVk40VEZGVlJreE1SVlpDVVZWcmMwOUZTa0pSVkZKRFRFVk9RbEZWVFRkUlZVWkVZbXRSYVV4RFNucGlNMVo1V1RKV1UySXlPVEJKYW05cFRERldlbHBZU25wTU0wcG9XbTFHYkdKSFdteGpiVFZvWW0xU2JHTjVPVkZqYlRseFdsZE9NR041T1cxaFdGRjBXbTFHYWxwWFNuWmlNbk4yWkROa00wd3pRakZaYlhod1dYazVkR0l5VWpGaVIxWjZUREphYlV4WFRuWmpiVlYyU1dsM2FXTXlPVEZqYlU1c1l6Qk9kbUp1VW14aWJsRnBUMnh6YVV4NWIzRllSelJuUzJsQ1NtSnVVbXhaTWxaM1pFTkNhR0pIZDJkaFNGSXdZME5DZVZwWVJqRmFXRTR3U1VoU2RrbEhiSFZoYlZacVpFTkNNR0ZIVldkYWJVWnFXbGRLZG1JeWRHTmlhVUZ4U1VoU2RtRXlWblZKUjBaMVdrTkNjR0p0V25aamJURm9aRWRzZG1KcFFuQmFhVUl3WVVkVloyUllTbk5KUjA1MlltNVNhR0ZYTlhwSlF6bHRXVmRPYkZsdE9YWmhlVGxqWW1sQmNWaEhOR2RMYVVKQlltMWthMkl5VFdkaVYxWXdZVWM1YTBsR2VIVkpRMjluVVVjMWFHSlhWV2RhYlZsMVdUSTVlVnBWTVhaYVNGWnpXbE5PYW1JeU5XMWhWMk5uV0VjMFowdHBRa0ZpVjFaMFdXMVdlVlF5V1dkYWJWbDFXVEk1ZVZwVk1YWmFTRlp6V2xaNGRVbERjR05pYVVGeFNVVkNiR1ZIUm5SalIzaHNXRWMwWjB0c2VIVkpRMjluU25rNWJWbFhUbXhaYlRsMllYazVkRnBUT1cxYVYxWnJTakY0ZFVsRGIyZGFNbFl3WTNsQ2QxbFlTbnBhVjFGblpFYzRObGhITkdkTGFVRnVZVWhTTUdOSVRUWk1lVGx1WTIxR2QyRkROVzFaVjA1c1dXMDVkbUY1TldwaU1qQjJaR3BKZFU1RE9YUmFVemx0V2xkV2ExQXlSbXBaTWxaNll6RTVNR0l5ZEd4aWFqRkVVVlZHUkZSdVkzaGtNMXBXVjJ0S1FsRnJSbEZXTVdoYVdWaE9NazVFVWtkWk1tdDVVVEk1YW1JelFtbFRSbkJFVDFWRk1XRjZVa05OVlZKNlpFVjRVbFl3WTNkVGJYQnhaRzVrTVdScWFFeFViWEJUVGxaa1RsZHJUazVVUmtKS1ZXNWFTRnBzVmtSWldFcFJUbXhDYlZwRmFGbFdNV3h6VjJ0R1lWRnJUbmxYYTBaMFpFaHNkVnBGVmpKU01YQkNUbTVXWVZGdFJrTlZiRWt4VVRKd01tUnFRbHBQU0U1SFlUQkdVbVZ0Tld4aVJURkdXbTEwYzJWVVNYcFVWbkJDVjJ0T2QwOUZjRnBrUjFZMFpFZG9NR0p1U2pGT1ZFSlhVV3RvU1ZZd1VsQlNiVkpoVVZoYWJtSlVRbkpYUkZVelpGaHNWRnBxUVRGWGEwNHlVa1pLTTFJeFNuUlNSVFZTVjJ0R1IyUkVVbmxUUldSWVpERk9VR014UlhwTmJsWjNZMjFzTWs5RVJXMWFSMVpwWkZkak9WbFhlSE5LYlZwMlkyMHhhR1JFTVhGak1qbDFTbTB4YkdSSGFIWmFSREZ1V2xoUmJXTklTbXhrU0ZJMVVGUkJiV016Vm5kalNFcHNZek5PWm1GSVVqQmpSamxxWWpKU2JGQlVSVzVZUnpSblMyazVZMkp0V2pGaWJVNHdZVmM1ZFVsSFdtaFpNbFpwWWpJNWNsTlhOVEJhV0VwcVdsaENNR0l6U2xGamJUa3lZVmRTYkdOcFoydGlSemxxV1ZoU2NHSXlOVkZqYlRreVlWZFNiR05wZDJkS1IyZ3daRWhDVVdOdE9USmhWMUpzWTJsM1oxcHRXbFZpTW5Sc1ltbHNOMWhITkdkSlExSnpZakpPYUdSSGJIWmliRUo1WWpOYWNGcEhWbmxNYldnd1lsZDNNVlJYT1d0YVUyZ3dZMjVXYkV0VWRHTmlhVUZuU2tkb01HUklRbEZqYlRreVlWZFNiR05wTlhCaWJsSnNZMjFPYkdOSVVuWmpiazExWTBoV2VtRkRhR0pLZVZKNVlqSTVNRlV5VG5aalIxVnVURU5DYldSWE5XcGtSMngyWW1sbmEyTnRPWFprUms1cVlqTkNiRXRUUWpkWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VoMFkySnBRV2RKUTBGblNVTmtlVnBZUmpGYVdFNHdTbnB2WjFwdVZuVlpNMUp3WWpJMFowdEhUblppYlZwd1dubHJaMlV4ZUhWSlEwRm5TVU5CWjBsRFFubGFXRkl4WTIwMFoxbFhVbXRXUnpseVdsYzBiMWt5T1hWYWJXeHVTMVIwWTJKcFFXZEpRMEZuU1VneFkySnBRV2RKUTBJNVR6RjRkVmhITkdkSlEwRm5USGx2Y1VsR1FtaGpiazVzU1VoU2IxcFRRakZqYlhkbllWYzBaMWt5Um5wYVUwSndaRU5DYjFsWVRXZE1NbHBvV1RKV2FXSXlPWEpNZVVGeFRERjRkVWxEUVdkSlIxb3hZbTFPTUdGWE9YVkpSMFpyV2taU2RtRXlWblZMUjA1MlltMWFjRnA1YkRkWVJ6Um5TVU5CWjBsRFFuQmFhVUZ2WXpKb2RtUlhlR3RVYlRrd1VWZFNhMVpIT1hKYVZ6UnZXVEk1ZFZwdGJHNUxVMnRuWTIxV01HUllTblZKUjA1MlltMWFjRnA2ZEdOaWFVRm5TVU5CWjBsR2VIVkpRMEZuU1VOQloyRlhXV2RMUjA1MlltMWFjRnA1TlRGamJYZDFZVmMxYTFwWWFGQmFhV2R1V20xR2FscFhTblppTW5OdVMxUTBkMHRZZEdOaWFVRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbEhXblpqYlRGb1pFVmFhRmt5Vm1saU1qbHlWbGhLYzB0SFRuWmliVnB3V25sc1kySnBRV2RKUTBGblNVZ3hZMkpwUVdkSlEwRm5TVWhLYkdSSVZubGlhVUpxWWpJMWJXRlhZemRZUnpSblNVTkJaMlpXZUhWWVJ6Um5TVU5CWjB4NWIzRkpSVVpyV2tOQ2FHSkhkMmRhYlVacVdsZEtkbUl5YzJkalIwWjVXVmN4YkdSSFZubGplVUl6WVZoU2IwbElVbTlhVTBKb1dUSk9iR016VFdka1J6bHlXbGMwWjB0cE9XTmlhVUZuU1VOQ2JXUlhOV3BrUjJ4MlltbENiV0l6U25SWldGSkhXVmRPYkZsdE9YWmhNVlo1WWtOb2FtSXlOVzFoVjJOd1pURjRkVWxEUVdkSlEwRm5aRzFHZVVsSVRuQmFNalZvWWtOQk9VbEhUblppYlZwd1duazFNV050ZDNWaFZ6VnJXbGhvVUZwcFoyNVFlV053U1VRMFowMURRUzlKUTJOdFNucHZibEI1WXpkWVJ6Um5TVU5CWjBsRFFtcGlNalZ0WVZkamRXUllTbk5KUkRCblNqSm9NR1JJUW5wUGFUbHVZMjFHZDJGRE5XMVpWMDVzV1cwNWRtRjVOV3BpTWpCMlpHcEpkVTVET0c1WVJ6Um5TVU5CWjBsRFFXZEpRM05uV1RJNWRWcHRiRzVNYmxaNVlrTTFlVnBZUW5OWlYwNXNTME5qZGxwdFJtcGFWMHAyWWpKemRrcDVkMjVLZVd0blMzbENlbUZYWkhWWlYzZG5TM2xrYUZreVRteGpNMDVtWkVjNWNscFhORGxLZVhOclkyMDVkbVJHVG1waU0wSnNURzVTZG1FeVZuVkpRMEpqWW1sQlowbERRV2RKUTBGblMzbEJia3B0VW14WmJsWnVVRmRHYzJKRFdtMWlNMHAwV1ZoUk9XRnVUblppYVZwMFdsaFNiMkl5VVRsS2VVRnlTVWRPZG1KdFduQmFlVFYwV2xoU2IySXlVWFZrUnpsTllqTmtiR05yVG1oak1sVnZTMU5CY2tsRFkyMWpTRXBzWkVoU05WQlVRVzFqTTFaM1kwaEtiR016VG1aaFNGSXdZMFk1YW1JeVVteFFWRVZ1V0VjMFowbERRV2RKUTBKNVdsaFNNV050TkdkWk1qbDFXbTFzYms4eGVIVkpRMEZuU1VneFkySnNlSFZKUTBGblNVZGFNV0p0VGpCaFZ6bDFTVWhPYjJJelZuTmFSVFYyWkVWR2ExcEdVblpoTWxaMVMwZE9kbUp0V25CYWVXdzNXRWMwWjBsRFFXZEpRMEo1V2xoU01XTnROR2RMUTBWclkyMDVkbVJHVG1waU0wSnNURzVTZG1FeVZuVkpTSGc0U1VkT2RtSnRXbkJhZVRVeFkyMTNkV0ZYTld0YVdHaFFXbWxuYmt4dGFEQmlWM2R1UzFOQkswbEVRWEJKUTBKalltbEJaMGxEUWpsWVJ6Um5TVWd4WkV0VWRHTmliSGgxU1VOQ2VWcFlVakZqYlRSblpYbEJhMW95VmpCUGFVSnRaRmMxYW1SSGJIWmlhV2R3U1VoME9VbElNRGRZUnpWalltNHhZMkpzZUhWaVZ6bHJaRmQ0YkV4dFZqUmpSemw1WkVoTloxQlRRbUpLZVZKellqSk9hR1JIYkhaaWJFSjVZak5hY0ZwSFZubEtlWGRuU25sU2IyUklVbmRWU0VwMlpHMXNhMXBZU1c1TVEwRnVXbTFhVldJeWRHeGlhV056U1VkYWFGa3lWbWxpTWpseVUxYzFNRnBZU21wYVdFSXdZak5LVVdOdE9USmhWMUpzWTJ3d04xaEhOWFJpTWxJeFlrZFZkVnBZYUhkaU0wb3dZM2sxZFZsWE1XeEpSREJuU2pKYWFGa3lWbWxpTWpseVUxYzFNRnBZU21wYVdFSXdZak5LVVdOdE9USmhWMUpzWTJsak4xaEhOR2xZV0RBOVhHNHZMeU1nYzI5MWNtTmxWVkpNUFM5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMWpiM0psTDJabUxtTnZjbVV1WTI5dVptbG5MbXB6SWwxOVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLmNvbmZpZy5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBmZkNvcmVDb250cm9sbGVyKCRzY29wZSwgJGxvY2F0aW9uLCBmZlRva2VuLCAkd2luZG93LCAkcm9vdFNjb3BlLCAkaHR0cCwgZmZDb3JlU2VydmljZSkge1xuICB2YXIgdm0gPSB0aGlzO1xuICB2YXIgY29kZTtcbiAgdm0uZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGU7XG4gIHZtLmZhY2Vib29rVXJsID0gJ2h0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9kaWFsb2cvb2F1dGg/Y2xpZW50X2lkPTE1NTg3MDIwNDc0NDY3MiZyZWRpcmVjdF91cmk9aHR0cDovL2xvY2FsaG9zdDo4ODg4LyZleHBpcnk9ODY0MDAmc2NvcGU9ZW1haWwsdXNlcl9wb3N0cyxwdWJsaXNoX2FjdGlvbnMsdXNlcl9mcmllbmRzLHVzZXJfc3RhdHVzLHVzZXJfZ2FtZXNfYWN0aXZpdHksdXNlcl9hY3Rpb25zLmZpdG5lc3MnO1xuICB2bS5oZWFkZXJVcmwgPSAnLi9tb2R1bGVzL2ZmLWNvcmUvZmYuY29yZS5oZWFkZXIudG1wbC5odG1sJztcbiAgdm0uZm9vdGVyVXJsID0gJy4vbW9kdWxlcy9mZi1jb3JlL2ZmLmNvcmUuZm9vdGVyLnRtcGwuaHRtbCc7XG4gIGZmQ29yZVNlcnZpY2UuY2xlYXJBbGwoKTtcbiAgbG9hZFRva2VuKCk7XG4gIGNsZWFyVXJsKCk7XG4gIGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICAgIHZhciBkYXRlT3V0ID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgcmV0dXJuIGRhdGVPdXQ7XG4gIH1cbiAgO1xuICBmdW5jdGlvbiBsb2FkVG9rZW4oKSB7XG4gICAgaWYgKCEkd2luZG93LmxvY2F0aW9uLnNlYXJjaClcbiAgICAgIHJldHVybjtcbiAgICBjb2RlID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCdjb2RlJyk7XG4gICAgJGh0dHAuZ2V0KCcvYXV0aG9yaXplLz9jb2RlPScgKyBjb2RlKS5zdWNjZXNzKGdldFRva2VuKS5lcnJvcihmYWlsVG9HZXRUb2tlbik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VG9rZW4oZGF0YSkge1xuICAgIHZtLnRva2VuID0gJHJvb3RTY29wZS50b2tlbiA9IGRhdGEuYWNjZXNzX3Rva2VuO1xuICAgIGxvYWRVc2VySW5mbygpO1xuICB9XG4gIGZ1bmN0aW9uIGZhaWxUb0dldFRva2VuKGVycm9yKSB7XG4gICAgdm0uZXJyb3JNZXNzYWdlID0gZXJyb3I7XG4gIH1cbiAgZnVuY3Rpb24gbG9hZFVzZXJJbmZvKCkge1xuICAgIGZmQ29yZVNlcnZpY2UuZ2V0VXNlckluZm8odXBkYXRlVXNlckluZm8pO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVVzZXJJbmZvKHVzZXJJbmZvKSB7XG4gICAgdm0udXNlckluZm8gPSB1c2VySW5mbztcbiAgfVxuICBmdW5jdGlvbiBjbGVhclVybCgpIHtcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShcIlwiLCBkb2N1bWVudC50aXRsZSwgJHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UGFyYW1ldGVyQnlOYW1lKG5hbWUpIHtcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sIFwiXFxcXFtcIikucmVwbGFjZSgvW1xcXV0vLCBcIlxcXFxdXCIpO1xuICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJbXFxcXD8mXVwiICsgbmFtZSArIFwiPShbXiYjXSopXCIpLFxuICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYygkd2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyBcIlwiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMV0ucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJ2ZmVG9rZW4nLCAnJHdpbmRvdycsICckcm9vdFNjb3BlJywgJyRodHRwJywgJ2ZmQ29yZVNlcnZpY2UnLCBmZkNvcmVDb250cm9sbGVyXTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXTnZjbVV2Wm1ZdVkyOXlaUzVqYjI1MGNtOXNiR1Z5TG1weklpd2ljMjkxY21ObGN5STZXeUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFkyOXlaUzltWmk1amIzSmxMbU52Ym5SeWIyeHNaWEl1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVN4WFFVRlhMRU5CUVVNN1FVRkRXaXhQUVVGVExHbENRVUZsTEVOQlFVVXNUVUZCU3l4RFFVRkhMRU5CUVVFc1UwRkJVU3hEUVVGSExFTkJRVUVzVDBGQlRTeERRVUZITEVOQlFVRXNUMEZCVFN4RFFVRkhMRU5CUVVFc1ZVRkJVeXhEUVVGSExFTkJRVUVzUzBGQlNTeERRVUZITEVOQlFVRXNZVUZCV1N4RFFVRkhPMEZCUXk5R0xFRkJRVWtzU1VGQlFTeERRVUZCTEVWQlFVTXNSVUZCU1N4TFFVRkhMRU5CUVVNN1FVRkRZaXhCUVVGSkxFbEJRVUVzUTBGQlFTeEpRVUZITEVOQlFVTTdRVUZEVWl4SFFVRkRMRmRCUVZjc1JVRkJTU3hYUVVGVExFTkJRVU03UVVGRE1VSXNSMEZCUXl4WlFVRlpMRVZCUVVrc05FNUJRVEJPTEVOQlFVTTdRVUZETlU4c1IwRkJReXhWUVVGVkxFVkJRVWtzTmtOQlFUSkRMRU5CUVVNN1FVRkRNMFFzUjBGQlF5eFZRVUZWTEVWQlFVa3NOa05CUVRKRExFTkJRVU03UVVGRE0wUXNZMEZCV1N4VFFVRlRMRUZCUVVNc1JVRkJReXhEUVVGRE8wRkJRM2hDTEZWQlFWRXNRVUZCUXl4RlFVRkRMRU5CUVVNN1FVRkRXQ3hUUVVGUExFRkJRVU1zUlVGQlF5eERRVUZETzBGQlExWXNVMEZCVXl4WFFVRlRMRU5CUVVVc1NVRkJSeXhEUVVGSE8wRkJRM2hDTEVGQlFVa3NUVUZCUVN4RFFVRkJMRTlCUVUwc1JVRkJTU3hKUVVGSkxFdEJRVWNzUVVGQlF5eERRVUZETEVsQlFVY3NRMEZCUXl4RFFVRkRPMEZCUXpWQ0xGTkJRVThzVVVGQlRTeERRVUZETzBWQlEyaENPMEZCUVVFc1FVRkRRU3hGUVVGQk8wRkJRMEVzVTBGQlV5eFZRVUZSTEVOQlFVTXNRVUZCUXl4RFFVRkZPMEZCUTI1Q0xFOUJRVWtzUTBGQlF5eFBRVUZOTEZOQlFWTXNUMEZCVHp0QlFVTjZRaXhaUVVGTk8wRkJRVUVzUVVGRFVpeFBRVUZITEVWQlFVa3NRMEZCUVN4clFrRkJhVUlzUVVGQlF5eERRVUZETEUxQlFVc3NRMEZCUXl4RFFVRkRPMEZCUTJwRExGRkJRVWtzU1VGQlNTeEJRVUZETEVOQlFVTXNiVUpCUVd0Q0xFVkJRVWtzUzBGQlJ5eERRVUZETEZGQlFWRXNRVUZCUXl4RFFVRkRMRkZCUVU4c1EwRkJReXhOUVVGTkxFRkJRVU1zUTBGQlF5eGpRVUZoTEVOQlFVTXNRMEZCUXp0RlFVTXZSVHRCUVVGQkxFRkJRMEVzVTBGQlV5eFRRVUZQTEVOQlFVVXNTVUZCUnl4RFFVRkhPMEZCUTNSQ0xFdEJRVU1zVFVGQlRTeEZRVUZKTEVOQlFVRXNWVUZCVXl4TlFVRk5MRVZCUVVrc1EwRkJRU3hKUVVGSExHRkJRV0VzUTBGQlF6dEJRVU12UXl4bFFVRlhMRUZCUVVNc1JVRkJReXhEUVVGRE8wVkJRMmhDTzBGQlFVRXNRVUZEUVN4VFFVRlRMR1ZCUVdFc1EwRkJSU3hMUVVGSkxFTkJRVWM3UVVGRE4wSXNTMEZCUXl4aFFVRmhMRVZCUVVrc1RVRkJTU3hEUVVGRE8wVkJRM3BDTzBGQlFVRXNRVUZEUVN4VFFVRlRMR0ZCUVZjc1EwRkJReXhCUVVGRExFTkJRVVU3UVVGRGRFSXNaMEpCUVZrc1dVRkJXU3hCUVVGRExFTkJRVU1zWTBGQllTeERRVUZETEVOQlFVTTdSVUZETTBNN1FVRkJRU3hCUVVOQkxGTkJRVk1zWlVGQllTeERRVUZGTEZGQlFVOHNRMEZCUnp0QlFVTm9ReXhMUVVGRExGTkJRVk1zUlVGQlNTeFRRVUZQTEVOQlFVTTdSVUZEZUVJN1FVRkJRU3hCUVVOQkxGTkJRVk1zVTBGQlR5eERRVUZETEVGQlFVTXNRMEZCUlR0QlFVTnNRaXhWUVVGTkxGVkJRVlVzUVVGQlF5eERRVUZETEVWQlFVTXNRMEZCUnl4RFFVRkJMRkZCUVU4c1RVRkJUU3hEUVVGSExFTkJRVUVzVDBGQlRTeFRRVUZUTEZOQlFWTXNRMEZCUXl4RFFVRkRPMFZCUTJ4Rk8wRkJRVUVzUVVGRFFTeFRRVUZUTEcxQ1FVRnBRaXhEUVVGRkxFbEJRVWNzUTBGQlJ6dEJRVU5vUXl4UFFVRkhMRVZCUVVrc1EwRkJRU3hKUVVGSExGRkJRVkVzUVVGQlF5eERRVUZETEUxQlFVc3NRMEZCUnl4TlFVRkpMRU5CUVVNc1VVRkJVU3hCUVVGRExFTkJRVU1zVFVGQlN5eERRVUZITEUxQlFVa3NRMEZCUXl4RFFVRkRPMEZCUTNwRUxFRkJRVWtzVFVGQlFTeERRVUZCTEV0QlFVa3NSVUZCU1N4SlFVRkpMRTlCUVVzc1FVRkJReXhEUVVGRExGRkJRVThzUlVGQlNTeExRVUZITEVOQlFVRXNRMEZCU1N4WlFVRlZMRU5CUVVNN1FVRkRhRVFzWTBGQlRTeEZRVUZKTEVOQlFVRXNTMEZCU1N4TFFVRkxMRUZCUVVNc1EwRkJReXhQUVVGTkxGTkJRVk1zVDBGQlR5eERRVUZETEVOQlFVTTdRVUZEYWtRc1UwRkJUeXhEUVVGQkxFOUJRVTBzU1VGQlRTeExRVUZITEVOQlFVRXNRMEZCU1N4SFFVRkRMRVZCUVVrc1EwRkJRU3hyUWtGQmFVSXNRVUZCUXl4RFFVRkRMRTlCUVUwc1EwRkJSU3hEUVVGQkxFTkJRVU1zVVVGQlVTeEJRVUZETEVOQlFVTXNTMEZCU1N4RFFVRkhMRWxCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGJrWTdRVUZCUVN4QlFVTkdPMEZCUVVFc1FVRkRRU3hMUVVGTExGRkJRVkVzUlVGQlNTeEZRVUZETEZGQlFVOHNRMEZCUnl4WlFVRlZMRU5CUVVjc1ZVRkJVU3hEUVVGSExGVkJRVkVzUTBGQlJ5eGhRVUZYTEVOQlFVY3NVVUZCVFN4RFFVRkhMR2RDUVVGakxFTkJRVWNzYVVKQlFXVXNRMEZCUXl4RFFVRkRPMEZCUjJRaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXTnZjbVV2SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1bWRXNWpkR2x2YmlCbVprTnZjbVZEYjI1MGNtOXNiR1Z5S0NSelkyOXdaU3dnSkd4dlkyRjBhVzl1TENCbVpsUnZhMlZ1TENBa2QybHVaRzkzTENBa2NtOXZkRk5qYjNCbExDQWthSFIwY0N3Z1ptWkRiM0psVTJWeWRtbGpaU2tnZTF4dUlDQjJZWElnZG0wZ1BTQjBhR2x6TzF4dUlDQjJZWElnWTI5a1pUdGNiaUFnZG0wdVptOXliV0YwUkdGMFpTQTlJR1p2Y20xaGRFUmhkR1U3WEc0Z0lIWnRMbVpoWTJWaWIyOXJWWEpzSUQwZ0oyaDBkSEJ6T2k4dmQzZDNMbVpoWTJWaWIyOXJMbU52YlM5a2FXRnNiMmN2YjJGMWRHZy9ZMnhwWlc1MFgybGtQVEUxTlRnM01ESXdORGMwTkRZM01pWnlaV1JwY21WamRGOTFjbWs5YUhSMGNEb3ZMMnh2WTJGc2FHOXpkRG80T0RnNEx5WmxlSEJwY25rOU9EWTBNREFtYzJOdmNHVTlaVzFoYVd3c2RYTmxjbDl3YjNOMGN5eHdkV0pzYVhOb1gyRmpkR2x2Ym5Nc2RYTmxjbDltY21sbGJtUnpMSFZ6WlhKZmMzUmhkSFZ6TEhWelpYSmZaMkZ0WlhOZllXTjBhWFpwZEhrc2RYTmxjbDloWTNScGIyNXpMbVpwZEc1bGMzTW5PMXh1SUNCMmJTNW9aV0ZrWlhKVmNtd2dQU0FuTGk5dGIyUjFiR1Z6TDJabUxXTnZjbVV2Wm1ZdVkyOXlaUzVvWldGa1pYSXVkRzF3YkM1b2RHMXNKenRjYmlBZ2RtMHVabTl2ZEdWeVZYSnNJRDBnSnk0dmJXOWtkV3hsY3k5bVppMWpiM0psTDJabUxtTnZjbVV1Wm05dmRHVnlMblJ0Y0d3dWFIUnRiQ2M3WEc0Z0lHWm1RMjl5WlZObGNuWnBZMlV1WTJ4bFlYSkJiR3dvS1R0Y2JpQWdiRzloWkZSdmEyVnVLQ2s3WEc0Z0lHTnNaV0Z5VlhKc0tDazdYRzRnSUdaMWJtTjBhVzl1SUdadmNtMWhkRVJoZEdVb1pHRjBaU2tnZTF4dUlDQWdJSFpoY2lCa1lYUmxUM1YwSUQwZ2JtVjNJRVJoZEdVb1pHRjBaU2s3WEc0Z0lDQWdjbVYwZFhKdUlHUmhkR1ZQZFhRN1hHNGdJSDFjYmlBZ08xeHVJQ0JtZFc1amRHbHZiaUJzYjJGa1ZHOXJaVzRvS1NCN1hHNGdJQ0FnYVdZZ0tDRWtkMmx1Wkc5M0xteHZZMkYwYVc5dUxuTmxZWEpqYUNsY2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQmpiMlJsSUQwZ1oyVjBVR0Z5WVcxbGRHVnlRbmxPWVcxbEtDZGpiMlJsSnlrN1hHNGdJQ0FnSkdoMGRIQXVaMlYwS0NjdllYVjBhRzl5YVhwbEx6OWpiMlJsUFNjZ0t5QmpiMlJsS1M1emRXTmpaWE56S0dkbGRGUnZhMlZ1S1M1bGNuSnZjaWhtWVdsc1ZHOUhaWFJVYjJ0bGJpazdYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdaMlYwVkc5clpXNG9aR0YwWVNrZ2UxeHVJQ0FnSUhadExuUnZhMlZ1SUQwZ0pISnZiM1JUWTI5d1pTNTBiMnRsYmlBOUlHUmhkR0V1WVdOalpYTnpYM1J2YTJWdU8xeHVJQ0FnSUd4dllXUlZjMlZ5U1c1bWJ5Z3BPMXh1SUNCOVhHNGdJR1oxYm1OMGFXOXVJR1poYVd4VWIwZGxkRlJ2YTJWdUtHVnljbTl5S1NCN1hHNGdJQ0FnZG0wdVpYSnliM0pOWlhOellXZGxJRDBnWlhKeWIzSTdYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdiRzloWkZWelpYSkpibVp2S0NrZ2UxeHVJQ0FnSUdabVEyOXlaVk5sY25acFkyVXVaMlYwVlhObGNrbHVabThvZFhCa1lYUmxWWE5sY2tsdVptOHBPMXh1SUNCOVhHNGdJR1oxYm1OMGFXOXVJSFZ3WkdGMFpWVnpaWEpKYm1adktIVnpaWEpKYm1adktTQjdYRzRnSUNBZ2RtMHVkWE5sY2tsdVptOGdQU0IxYzJWeVNXNW1ienRjYmlBZ2ZWeHVJQ0JtZFc1amRHbHZiaUJqYkdWaGNsVnliQ2dwSUh0Y2JpQWdJQ0JvYVhOMGIzSjVMbkIxYzJoVGRHRjBaU2hjSWx3aUxDQmtiMk4xYldWdWRDNTBhWFJzWlN3Z0pIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1d1lYUm9ibUZ0WlNrN1hHNGdJSDFjYmlBZ1puVnVZM1JwYjI0Z1oyVjBVR0Z5WVcxbGRHVnlRbmxPWVcxbEtHNWhiV1VwSUh0Y2JpQWdJQ0J1WVcxbElEMGdibUZ0WlM1eVpYQnNZV05sS0M5YlhGeGJYUzhzSUZ3aVhGeGNYRnRjSWlrdWNtVndiR0ZqWlNndlcxeGNYVjB2TENCY0lseGNYRnhkWENJcE8xeHVJQ0FnSUhaaGNpQnlaV2RsZUNBOUlHNWxkeUJTWldkRmVIQW9YQ0piWEZ4Y1hEOG1YVndpSUNzZ2JtRnRaU0FySUZ3aVBTaGJYaVlqWFNvcFhDSXBMRnh1SUNBZ0lDQWdJQ0J5WlhOMWJIUnpJRDBnY21WblpYZ3VaWGhsWXlna2QybHVaRzkzTG14dlkyRjBhVzl1TG5ObFlYSmphQ2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZEhNZ1BUMDlJRzUxYkd3Z1B5QmNJbHdpSURvZ1pHVmpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtISmxjM1ZzZEhOYk1WMHVjbVZ3YkdGalpTZ3ZYRndyTDJjc0lGd2lJRndpS1NrN1hHNGdJSDFjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1d5Y2tjMk52Y0dVbkxDQW5KR3h2WTJGMGFXOXVKeXdnSjJabVZHOXJaVzRuTENBbkpIZHBibVJ2ZHljc0lDY2tjbTl2ZEZOamIzQmxKeXdnSnlSb2RIUndKeXdnSjJabVEyOXlaVk5sY25acFkyVW5MQ0JtWmtOdmNtVkRiMjUwY205c2JHVnlYVHRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYVG5aamJWVjJXbTFaZFZreU9YbGFVelZxWWpJMU1HTnRPWE5pUjFaNVRHMXdla2xwZDJsak1qa3hZMjFPYkdONVNUWlhlVWwyVmxoT2JHTnVUWFpqYlVadFdWZFdjMXB0Vm5saWJVWjFXa2RXZWt3eFFubGlNbkJzV1ROU2Vrd3lXbkJrUXpGdFdWZE9iRmx0T1haaGVUa3paRE5qZG1OSVZtbGlSMnhxVERJeGRscElWbk5hV0UxMldtMVpkRmt5T1hsYVV6bHRXbWsxYW1JelNteE1iVTUyWW01U2VXSXllSE5hV0VsMVlXNU5hVmhUZDJsaWJVWjBXbGhOYVU5c2RHUk1RMHAwV1ZoQ2QyRlhOVzVqZVVrMlNXdEdRbFZWUlRkUlZVWkNVVk40VUZGVlJsUk1SMnhEVVZWR2JFeEZUa0pSVlZWelZGVkdRbE41ZUVSUlZVWklURVZPUWxGVlJYTlZNRVpDVlZONFJGRlZSa2hNUlU1Q1VWVkZjMVF3UmtKVVUzaEVVVlZHU0V4RlRrSlJWVVZ6VkRCR1FsUlRlRVJSVlVaSVRFVk9RbEZWUlhOV1ZVWkNWWGw0UkZGVlJraE1SVTVDVVZWRmMxTXdSa0pUVTNoRVVWVkdTRXhGVGtKUlZVVnpXVlZHUWxkVGVFUlJWVVpJVHpCR1FsRjVPVWRNUlVaQ1VWVnJjMU5WUmtKUlUzaEVVVlZHUWt4RlZrSlJWVTF6VWxWR1FsTlRlRXhSVlVaSVRFVk9RbEZWVFRkUlZVWkVXV2w0UWxGVlJrcE1SV3hDVVZWRmMxRXdSa0pSVTNoS1VWVkdTRXhGVGtKUlZVMDNVVlZHUkZWcGVFaFJWVVpFVEVaa1FsRldZM05TVlVaQ1UxTjRXRkZWUmxSTVJVNUNVVlZOTjFGVlJrUk5WVWx6VWpCR1FsRjVlRnBSVlVaYVRFVldRbEZWYTNOT1JUVkNVVlJDVDB4RlRrSlJWVVUzVVZWR1JFMHdPSE5TTUVaQ1VYbDRWbEZWUmxaTVJWWkNVVlZyYzA1clRrSlJWRXBFVEVWT1FsRlZUVGRSVlVaRVRUQlJjMUl3UmtKUmVYaFdVVlZHVmt4RlZrSlJWV3R6VG10T1FsRlVTa1JNUlU1Q1VWVk5OMUZWUmtSTk1GRnpXVEJHUWxkVGVGUlJWVVpVVEVWR1FsRlZUWE5TVlVaQ1VYbDRSRkZWUmtSUE1FWkNVVE5vUTB4R1ZrSlJWa1Z6VVZWR1FsRjVlRVpSVlVaRVRFVk9RbEZWVFRkUlZVWkVWME40VkZGVlJsQk1SVVpDVVZWTmMxSlZSa0pSZVhoRVVWVkdSRTh3UmtKU1ZsbHpWVEJHUWxWNWVGaFJWVVpVVEVWT1FsRlZWWE5UVlVaQ1VubDRSRkZWUmtaUE1FWkNVVE5hUTB4RlJrSlJWV3R6VkZWR1FsRlRlRVJSVlVaQ1RFVTVRbEZWTUhOU1ZVWkNVMU40U2xGVlJrcE1SWFJDVVZWamMxRlZSa0pSZVhoRVVWVkdSRXhGYkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpCR1FsRjZWa05NUms1Q1VWVTRjMVZWUmtKVVUzaEVVVlZHUkU4d1ZrSlJNbWhEVHpCR1FsRlZSWE5SVlVaQ1VYbDRSbEZWUmtKUE1FWkNVbFZSYzFVd1JrSlZlWGhXVVZWR1VreEZUa0pSVlUxelVWVkdRbEY1ZUVSUlZVWkVUekJHUWxFeWVFTk1SVGxDVVZWamMxRXdSa0pSZVhoUVVWVkdUa3hHVGtKUlZrMXpWREJHUWxSNmRFSlJWVVpJVEVac1FsRlZNRGRSVlVaQ1VWTjRRbEZWVm5WUmVYaFFVVlZHU0V4RlZrSlJWV3R6VVRCR1FsRlRlSEpSYTBaQ1lWVkpjMUZWUmtKUmVYaEVVVlZHUkV4Rk1VSlJWWE56VVRCR1FsRjVlRVJSVlVaRVR6QkdRbEV5Y0VSTVJrWkNVVlZyYzFOVlJrSlRVM2hDVVZWR1JFeEZUa0pSVlUxellsVktRbEZYZEVOTVJWWkNVVlZqYzFNd1JrSlNlWGhFVVZWR1JFeEdSa0pSTTFwRFRFVkdRbEZWVFhOUk1FWkNVWGw0VWxGVlJsQk1SVTVDVVZWTmMxUlZSa1JYYVhoQ1VWVkdSRXhGVGtKUlZVMXpXVEJHUWxsVGVFUlJWVVpFVEVWT1FsRlZUVGRTVlVaRVRqQkpOMUZWUmtKUlUzaENVVlZXUWt4R1RrSlJWazF6VlRCR1FsUjVlRVJSVlVaR1RFVnNRbEZWWTNOUk1FWkNVbFIwUWxGVlRubFJhWGhNVVZWR1JFeEZNVUpSVlRCelVsVkdRbE5UZUVSUlZVWkNURVpXUWxGV1RYTlVWVVpDVkZONFJsRlZSa3BNUlU1Q1VWVkZjMU5WUmtKU2VYaG9VVlZHYUV4RlRrSlJWVTAzVVZWR1JFd3dUWE5hVlVaQ1ZubDRRbEZWUmtSTVJWWkNVVlZOYzFFd1JrSlJlblJHVVZWT2IxRnFkRUpSVlVaQ1RFVkdRbEpWUlhOVk1FWkNWWGw0YkZGVlJtaE1SVTVDVVZWVmMxTXdSa0pUVTNoRVVWVkdSazh3UmtKUmVsWkRURVYwUWxGVlRYTlpWVVpDV1ZONFJsRlZSa3BNUlRGQ1VWVnJjMUV3UmtKUmVuUkdVVlZPTmxGcWRFSlJWVVpDVEVWR1FsSlZSWE5WTUVaQ1ZYbDRhRkZWUmxoTVJVNUNVVlZOYzFGVlJrSlJlWGhFVVZWR1JFOHdSa0pSTTBwRFRFZGtRMUZWUmxwTVJteENVVlpyYzFGVlJrSlJlWGhFVVZWR1JFeEhUa0pSVjBWelVUQkdRbEY1ZUVSUlZVWkVUekJXUWxGNlRrUlBNRVpDVVZWRmMxRlZSa1pSVTNoVVVWVkdWRXhIVmtKUlYwVnpVVEJHUWxKVGVGSlJWVVpRVEVWT1FsRlZWVGRSVlVaRVREQkpjMU13UmtKUmVYaFVVVlZHVkV4RlZrSlJWV3R6VlRCR1FsUjVlRVJSVlVaRVR6QldRbEV6YUVOUE1FWkNVVlZGYzFGVlJrWlJVM2hVVVZWR1ZFeEdUa0pSVlRoelVUQkdRbEY1ZUVKUlZVWkVURVZPUWxGVlRUZFJWVVpFWVd0SmMxWlZSa0pVVTNoV1VWVkdWa3hGUmtKUlZVMXpVVEJHUWxGNWVFWlJWVVpFVEVWT1FsRlZZM05STUVaQ1VWTjRVbEZWUmxCTVJURkNVVlV3YzFFd1JrSlNlWGhFVVZWR1FreEZPVUpSVlRCelZUQkdRbFY1ZUZSUlZVWlVURVZPUWxGVlRYTlJNRVpDVVhwMFJsRlZWbk5TVkhSQ1VWVkdRa3hGUmtKU1ZVVnpWVEJHUWxWNWVIUlJhMFpDWVZWSmMxRXdSa0pTVTNoS1VWVkdTRXhGVGtKUlZXTTNVVlZHUkdGRlRYTlVNRVpDVW5sNFJsRlZSa3BNUlU1Q1VWVkZjMU5WUmtKU2VYaFNVVlZHVWt4RlJrSlJWVTF6VVRCR1FsRjVlRTVSVlVaTVRFVk9RbEZWWTNOVVZVWkNVMU40UkZGVlJrUk1Sa1pDVVZaRmMxRlZSa0pSZVhoRVVWVkdSRXhGTVVKUlZYTnpVVEJHUWxKNWVFNVJWVVpLVEVWT1FsRlZUWE5STUVaQ1VYcDBRbEZWVGpaU1EzaENVVlZHU2t4Rk1VSlJWVVZ6VVRCR1FsRlRlRXhSVlVaS1RFVldRbEZWYTNOVFZVWkNVMU40VUZGVlJreE1SVVpDVVZWTmMxRXdSa0pSZVhoU1VWVkdVRXhGVmtKUlZXdHpVekJHUWxKNWVFUlJWVVpDVEVWT1FsRlZhM05YVlVaQ1ZsTjRSRkZWUmtSUE1FWkNVVE5DUlV4SFRrSlJWVEJ6VWxWR1FsTlRlRVJSVlVaQ1RFVjBRbEZWYTNOVE1FWkNVM2w0UWxGVlJrUk1SVTVDVVZWTmMxUXdSa0pVVTNoVVVWVkdWRXhGT1VKUlZUaHpVVEJHUWxGNWVFUlJWVVpFVHpCR1FsRjZaRVJNUms1Q1VWVTRjMUV3UmtKUlUzaFFVVlZHVGt4RmJFSlJWVEJ6VXpCR1FsSjVlRVJSVlVaQ1RFVk9RbEZWYTNOU01FWkNVWGw0UmxGVlJrcE1SVTVDVVZWRmMyRXdTa0pSVjJ4RFRFVkdRbEZWVFhOUk1FWkNVWGw0VUZGVlJrNU1SVTVDVVZWVmMxRXdSa0pSVTNoRVVWVkdSRXhHUmtKUlZrVnpVVlZHUWxGNWVFUlJWVVpFVEVWMFFsRlZhM05STUVaQ1VubDRTbEZWUmtaTVJVNUNVVlZOYzFFd1JrSlJlWGhFVVZWR1JFOHdWa0pSTWpWSFR6QkdRbEZWUlhOUlZVWkVVbXAwUWxGVlJrSk1SVVpDVWpCRmMxTXdSa0pUZVhoU1VWVkdVa3hGVmtKUlZXdHpVbFZHUWxGNWVGSlJWVVpRVEVWT1FsRlZZM05YVlVaQ1ZsTjRSRkZWUmtoTVJsWkNVVlpGYzFFd1JrSlNlWGhXVVZWR1VreEZUa0pSVldOeldWVkdRbFo1ZUVSUlZVWklURVpHUWxGVk1ITlJNRVpDVW5sNGJsRnJSa0paZVhoRVVWVkdTRXhIYkVOUlZVWnNURVZPUWxGVlRYTlJNRVpDVVZSMFFsRlZUakpUUTBselNXNU9kbVJZU21wYVZrcDJZak5SYVU5cFNYWldXRTVzWTI1TmRtTnRSbTFaVjFaeldtMVdlV0p0Um5WYVIxWjZUREZDZVdJeWNHeFpNMUo2VERKYWNHUkRNVzFaVjA1c1dXMDVkbUY1T1ROa00yTjJZMGhXYVdKSGJHcE1NakYyV2toV2MxcFlUWFphYlZsMFdUSTVlVnBUT0dsTVEwcDZZak5XZVZreVZucFJNamwxWkVkV2RXUkRTVFpYZVVsMlMybHdZMkpwUVhGSlJrcHNZMGhLYkdNeVZuVmtTRTFuWkVkb2JFbEhUblpqYlZWbldUSTVkV1JJU25aaVIzaHNZMmwzWjJRelNtaGpTRUp3WW0xaloyUkhhR3hKUm5oMVNVTnZaMlF5YUhaaVIxVm5XVmhDZDBsSVVuWkpSMFo2WXpKc2VtUkRRak5oV0ZKdlNVZE9kbUpYTVhaaWFVSnRXbGRHTUdSWVNteGplVFJuV0VjMFowdHNlSFZKUTI5blVVYzFibHBIT1dwSlIwNTJZbTVTZVdJeWVITmFXRXBqWW1sQmNVbEZRblZaVnpGc1NVZGFiVkV5T1hsYVZVNTJZbTVTZVdJeWVITmFXRXBqWW1sQmNVbEZRblJpTWxJeFlrZFZaMXB0V1hWWk1qbDVXbFV4ZGxwSVZuTmFWbmgxU1VOdmRsaEhOVzFrVnpWcVpFZHNkbUpwUW0xYWEwNTJZMjFXUkdJeU5UQmpiVGx6WWtkV2VVdERVbnBaTWpsM1dsTjNaMHBIZUhaWk1rWXdZVmM1ZFV4RFFtMWFiRkoyWVRKV2RVeERRV3RrTW14MVdrYzVNMHhEUVd0amJUbDJaRVpPYW1JelFteE1RMEZyWVVoU01HTkRkMmRhYlZwRVlqTktiRlV5Vm5sa2JXeHFXbE5yWjJVeGVIVkpRMEl5V1ZoSloyUnRNR2RRVTBJd1lVZHNlazk1UW1OaWFVRm5aRzFHZVVsSFRuWmFSMVUzV0VjMFowbElXblJNYlZwMlkyMHhhR1JGVW1oa1IxVm5VRk5DYldJelNuUlpXRkpGV1ZoU2JFOHhlSFZKUTBJeVlsTTFiVmxYVG14WmJUbDJZVEZXZVdKRFFUbEpRMlJ2WkVoU2QyTjZiM1pNTTJRelpIazFiVmxYVG14WmJUbDJZWGsxYW1JeU1IWmFSMnhvWWtjNWJrd3lPV2hrV0ZKdlVESk9jMkZYVm5Wa1JqbHdXa1F3ZUU1VVZUUk9la0Y1VFVSUk0wNUVVVEpPZWtsdFkyMVdhMkZZU214Wk0xSm1aRmhLY0ZCWGFEQmtTRUUyVEhrNWMySXlUbWhpUjJoMll6TlJOazlFWnpSUFF6aHRXbGhvZDJGWVNqVlFWR2N5VGtSQmQwcHVUbXBpTTBKc1VGZFdkRmxYYkhOTVNGWjZXbGhLWm1OSE9YcGtTRTF6WTBoV2FXSkhiSHBoUmpsb1dUTlNjR0l5TlhwTVNGWjZXbGhLWmxwdVNuQmFWelZyWTNsNE1XTXlWbmxZTTA0d1dWaFNNV041ZURGak1sWjVXREprYUdKWFZucFlNa1pxWkVkc01tRllValZNU0ZaNldsaEtabGxYVGpCaFZ6bDFZM2sxYldGWVVuVmFXRTU2U2pGNGRVbERRakppVXpWdldsZEdhMXBZU2xaamJYZG5VRk5CYmt4cE9YUmlNbEl4WWtkV2Vrd3lXbTFNVjA1MlkyMVZkbHB0V1hWWk1qbDVXbE0xYjFwWFJtdGFXRWwxWkVjeGQySkROVzlrUnpGelNucDBZMkpwUVdka2JUQjFXbTA1ZG1SSFZubFdXRXB6U1VRd1owcDVOSFppVnpsclpGZDRiR041T1cxYWFURnFZak5LYkV3eVdtMU1iVTUyWTIxVmRWcHRPWFprUjFaNVRHNVNkR05IZDNWaFNGSjBZa05qTjFoSE5HZEpSMXB0VVRJNWVWcFdUbXhqYmxwd1dUSlZkVmt5ZUd4WldFcENZa2QzYjB0VWRHTmlhVUZuWWtjNWFGcEdVblpoTWxaMVMwTnJOMWhITkdkSlIwNXpXbGRHZVZaWVNuTkxRMnMzV0VjMVkySnBRV2RhYmxaMVdUTlNjR0l5TkdkYWJUbDVZbGRHTUZKSFJqQmFVMmhyV1ZoU2JFdFlkR05pYVVGblNVTkNNbGxZU1dkYVIwWXdXbFU1TVdSRFFUbEpSelZzWkhsQ1JWbFlVbXhMUjFKb1pFZFZjRTh4ZUhWSlEwRm5TVWhLYkdSSVZubGlhVUpyV1ZoU2JGUXpWakJQTVhoMVNVTkNPVTh4ZUhWSlEwSmpZbWxCWjFwdVZuVlpNMUp3WWpJMFoySkhPV2hhUmxKMllUSldkVXREYkRkWVJ6Um5TVU5CWjJGWFdXOUpVMUl6WVZjMWEySXpZM1ZpUnpscVdWaFNjR0l5TkhWak1sWm9ZMjFPYjB0VFFubGFXRkl4WTIwME4xaEhOR2RKUTBGbldFYzBaMGxEUVdkWk1qbHJXbE5CT1VsSFpHeGtSa0pvWTIxR2RGcFlVbXhqYTBvMVZHMUdkRnBUWjI1Wk1qbHJXbE5qY0U4eGVIVkpRMEZuU1VOU2IyUklVbmRNYldSc1pFTm5ia3d5UmpGa1IyaDJZMjFzTmxwVE9DOVpNamxyV2xRd2JrdDVRbXBpTWxKc1MxWjRkVWxEUVdkSlEwRm5TVU5CWjB4dVRqRlpNazVzWXpOTmIxb3lWakJXUnpseVdsYzBjRmhITkdkSlEwRm5TVU5CWjBsRFFYVmFXRXA1WWpOSmIxcHRSbkJpUmxKMlVqSldNRlpIT1hKYVZ6UndUekY0ZFVsRFFqbFlSelZqWW1sQloxcHVWblZaTTFKd1lqSTBaMW95VmpCV1J6bHlXbGMwYjFwSFJqQlpVMnczV0VjMFowbERRV2RrYlRCMVpFYzVjbHBYTkdkUVUwRnJZMjA1ZG1SR1RtcGlNMEpzVEc1U2RtRXlWblZKUkRCbldrZEdNRmxUTldoWk1rNXNZek5PWm1SSE9YSmFWelEzV0VjMFowbERRV2RpUnpsb1drWldlbHBZU2twaWJWcDJTME5yTjFoSE5HZEpTREZqWW1sQloxaEhOR2RKUjFveFltMU9NR0ZYT1hWSlIxcG9ZVmQ0VldJd1pHeGtSbEoyWVRKV2RVdEhWbmxqYlRsNVMxaDBZMkpwUVdkSlEwSXlZbE0xYkdOdVNuWmphekZzWXpOT2FGb3lWV2RRVTBKc1kyNUtkbU5xZEdOaWFVRm5abFo0ZFZoSE5HZEpSMW94WW0xT01HRlhPWFZKUjNoMldWZFNWbU15Vm5sVFZ6VnRZbmxuY0dVeGVIVkpRMEZuU1VkYWJWRXlPWGxhVms1c1kyNWFjRmt5VlhWYU1sWXdWbGhPYkdOcmJIVmFiVGh2WkZoQ2ExbFlVbXhXV0U1c1kydHNkVnB0T0hCUE1YaDFTVU5DT1ZoSE5XTmlhVUZuV201V2RWa3pVbkJpTWpSblpGaENhMWxZVW14V1dFNXNZMnRzZFZwdE9HOWtXRTVzWTJ0c2RWcHRPSEJsTVhoMVNVTkJaMGxJV25STWJsWjZXbGhLU21KdFduWkpSREJuWkZoT2JHTnJiSFZhYlRnM1dFYzBaMGxJTVdOaWJIaDFTVU5DYldSWE5XcGtSMngyWW1sQ2FtSkhWbWhqYkZaNVlrTm5jR1V4ZUhWSlEwRm5TVWRvY0dNelVuWmpibXQxWTBoV2VtRkdUakJaV0ZKc1MwWjNhVmhEU1hOSlIxSjJXVE5XZEZwWE5UQk1ibEp3WkVkNGJFeERRV3RrTW14MVdrYzVNMHh0ZUhaWk1rWXdZVmM1ZFV4dVFtaGtSMmgxV1ZjeGJFdFVkR05pYVVGblNVTkJka3g1VWpOaFZ6VnJZak5qZFdKSE9XcFpXRkp3WWpJMGRXRklTbXhhYVVFNVNVTmpka2w1T0c1UE1YaDFTVU5DT1ZoSE5XTmlhVUZuV201V2RWa3pVbkJpTWpSbldqSldNRlZIUm5sWlZ6RnNaRWRXZVZGdWJFOVpWekZzUzBjMWFHSlhWWEJKU0hSalltbEJaMGxEUW5WWlZ6RnNTVVF3WjJKdFJuUmFVelY1V2xoQ2MxbFhUbXhMUXpsaVdFWjRZbGhUT0hOSlJuZHBXRVo0WTFoR2RHTkphV3QxWTIxV2QySkhSbXBhVTJkMlZ6RjRZMWhXTUhaTVEwSmpTV3g0WTFoR2VHUllRMGx3VHpGNGRVbERRV2RKU0Zwb1kybENlVnBYWkd4bFEwRTVTVWMxYkdSNVFsTmFWMlJHWlVoQmIxaERTbUpZUm5oaldFUTRiVmhXZDJsSlEzTm5ZbTFHZEZwVFFYSkpSbmRwVUZOb1lsaHBXV3BZVTI5d1dFTkpjRXhHZUhWSlEwRm5TVWhLYkdNelZuTmtTRTFuVUZOQ2VWcFhaR3hsUXpWc1pVZFdha3REVWpOaFZ6VnJZak5qZFdKSE9XcFpXRkp3WWpJMGRXTXlWbWhqYlU1dlMxUjBZMkpwUVdkSlEwSjVXbGhTTVdOdE5HZGpiVlo2WkZkNE1HTjVRVGxRVkRCblltNVdjMkpEUVM5SlJuZHBXRU5KWjA5cFFtdGFWMDUyV2tkV1ZsVnJiRVJpTWpGM1lqSTFiR0p1VVc5amJWWjZaRmQ0TUdNeGMzaFlVelY1V2xoQ2MxbFhUbXhMUXpsaldFTnpkbHA1ZDJkWVEwbG5XRU5KY0V0VWRHTmlhVUZuWmxaNGRXWldlSFZZUnpWalltMHhkbHBJVm5OYVV6VnNaVWhDZG1OdVVucEpSREJuVjNsamEyTXlUblpqUjFWdVRFTkJia3BIZUhaWk1rWXdZVmM1ZFVwNWQyZEtNbHB0VmtjNWNscFhORzVNUTBGdVNraGtjR0p0VW5aa2VXTnpTVU5qYTJOdE9YWmtSazVxWWpOQ2JFcDVkMmRLZVZKdlpFaFNkMHA1ZDJkS01scHRVVEk1ZVZwV1RteGpibHB3V1RKVmJreERRbTFhYTA1MlkyMVdSR0l5TlRCamJUbHpZa2RXZVZoVFFtTmlhVXBrWmxFOVBWeHVMeThqSUhOdmRYSmpaVlZTVEQwdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRZMjl5WlM5bVppNWpiM0psTG1OdmJuUnliMnhzWlhJdWFuTWlYWDA9XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1jb3JlL2ZmLmNvcmUuY29udHJvbGxlci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBmZkNvcmVTZXJ2aWNlKCRodHRwLCAkcm9vdFNjb3BlKSB7XG4gIHZhciBfdXNlckluZm87XG4gIHJldHVybiB7XG4gICAgZ2V0VXNlckluZm86IGdldFVzZXJJbmZvLFxuICAgIGNsZWFyQWxsOiBjbGVhckFsbFxuICB9O1xuICBmdW5jdGlvbiBjbGVhckFsbCgpIHtcbiAgICBfdXNlckluZm8gPSB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gbG9hZFVzZXJJbmZvKGZuKSB7XG4gICAgJGh0dHAuZ2V0KCcvZmFjZWJvb2svbWUnKS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgX3VzZXJJbmZvID0gJHJvb3RTY29wZS51c2VySW5mbyA9IHJlc3VsdDtcbiAgICAgIGlmIChmbikge1xuICAgICAgICBmbihfdXNlckluZm8pO1xuICAgICAgfVxuICAgIH0pLmVycm9yKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdmYWlsZWQgdG8gbG9hZCB1c2VycyBpbmZvcm1hdGlvbiBmcm9tIGZhY2Vib29rJyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VXNlckluZm8oZm4pIHtcbiAgICBpZiAoIV91c2VySW5mbykge1xuICAgICAgbG9hZFVzZXJJbmZvKGZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm4oX3VzZXJJbmZvKTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXJ2aWNlOiBbJyRodHRwJywgJyRyb290U2NvcGUnLCBmZkNvcmVTZXJ2aWNlXSxcbiAgbmFtZTogJ2ZmQ29yZVNlcnZpY2UnXG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdOdmNtVXZabVl1WTI5eVpTNXpaWEoyYVdObExtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRZMjl5WlM5bVppNWpiM0psTG5ObGNuWnBZMlV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVN4WFFVRlhMRU5CUVVNN1FVRkRXaXhQUVVGVExHTkJRVmtzUTBGQlJTeExRVUZKTEVOQlFVY3NRMEZCUVN4VlFVRlRMRU5CUVVjN1FVRkRlRU1zUVVGQlNTeEpRVUZCTEVOQlFVRXNVMEZCVVN4RFFVRkRPMEZCUTJJc1QwRkJUenRCUVVOTUxHTkJRVlVzUTBGQlJ5eFpRVUZWTzBGQlEzWkNMRmRCUVU4c1EwRkJSeXhUUVVGUE8wRkJRVUVzUlVGRGJrSXNRMEZCUXp0QlFVTkVMRk5CUVZNc1UwRkJUeXhEUVVGRExFRkJRVU1zUTBGQlJUdEJRVU5zUWl4WlFVRlJMRVZCUVVrc1ZVRkJVU3hEUVVGRE8wVkJRM1pDTzBGQlFVRXNRVUZEUVN4VFFVRlRMR0ZCUVZjc1EwRkJSU3hGUVVGRExFTkJRVWM3UVVGRGVFSXNVVUZCU1N4SlFVRkpMRUZCUVVNc1EwRkJReXhqUVVGaExFTkJRVU1zVVVGQlVTeEJRVUZETEVOQlFVTXNVMEZCVXl4TlFVRkxMRU5CUVVjN1FVRkRha1FzWTBGQlVTeEZRVUZKTEVOQlFVRXNWVUZCVXl4VFFVRlRMRVZCUVVrc1QwRkJTeXhEUVVGRE8wRkJRM2hETEZOQlFVa3NSVUZCUXl4RFFVRkhPMEZCUTA0c1UwRkJReXhCUVVGRExFTkJRVU1zVTBGQlVTeERRVUZETEVOQlFVTTdUVUZEWmp0QlFVRkJMRWxCUTBZc1EwRkJReXhOUVVGTkxFRkJRVU1zUTBGQlF5eFRRVUZUTEV0QlFVa3NRMEZCUnp0QlFVTjJRaXhaUVVGTkxFMUJRVTBzUVVGQlF5eERRVUZETEdkRVFVRXJReXhEUVVGRExFTkJRVU03U1VGRGFrVXNRMEZCUXl4RFFVRkRPMFZCUTBvN1FVRkJRU3hCUVVOQkxGTkJRVk1zV1VGQlZTeERRVUZGTEVWQlFVTXNRMEZCUnp0QlFVTjJRaXhQUVVGSkxFTkJRVU1zVTBGQlVTeERRVUZITzBGQlEyUXNhVUpCUVZjc1FVRkJReXhEUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETzBsQlEyeENMRXRCUVU4N1FVRkRUQ3hQUVVGRExFRkJRVU1zUTBGQlF5eFRRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTm1PMEZCUVVFc1JVRkRSanRCUVVGQkxFRkJRMFk3UVVGQlFTeEJRVU5CTEV0QlFVc3NVVUZCVVN4RlFVRkpPMEZCUTJZc1VVRkJUU3hEUVVGSExFVkJRVU1zVDBGQlRTeERRVUZITEdGQlFWY3NRMEZCUnl4alFVRlpMRU5CUVVNN1FVRkRPVU1zUzBGQlJ5eERRVUZITEdkQ1FVRmpPMEZCUVVFc1FVRkRkRUlzUTBGQlF6dEJRVWR6UnlJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFkyOXlaUzhpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY0luVnpaU0J6ZEhKcFkzUmNJanRjYm1aMWJtTjBhVzl1SUdabVEyOXlaVk5sY25acFkyVW9KR2gwZEhBc0lDUnliMjkwVTJOdmNHVXBJSHRjYmlBZ2RtRnlJRjkxYzJWeVNXNW1ienRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0JuWlhSVmMyVnlTVzVtYnpvZ1oyVjBWWE5sY2tsdVptOHNYRzRnSUNBZ1kyeGxZWEpCYkd3NklHTnNaV0Z5UVd4c1hHNGdJSDA3WEc0Z0lHWjFibU4wYVc5dUlHTnNaV0Z5UVd4c0tDa2dlMXh1SUNBZ0lGOTFjMlZ5U1c1bWJ5QTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ2ZWeHVJQ0JtZFc1amRHbHZiaUJzYjJGa1ZYTmxja2x1Wm04b1ptNHBJSHRjYmlBZ0lDQWthSFIwY0M1blpYUW9KeTltWVdObFltOXZheTl0WlNjcExuTjFZMk5sYzNNb1puVnVZM1JwYjI0b2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNCZmRYTmxja2x1Wm04Z1BTQWtjbTl2ZEZOamIzQmxMblZ6WlhKSmJtWnZJRDBnY21WemRXeDBPMXh1SUNBZ0lDQWdhV1lnS0dadUtTQjdYRzRnSUNBZ0lDQWdJR1p1S0Y5MWMyVnlTVzVtYnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrdVpYSnliM0lvWm5WdVkzUnBiMjRvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0oyWmhhV3hsWkNCMGJ5QnNiMkZrSUhWelpYSnpJR2x1Wm05eWJXRjBhVzl1SUdaeWIyMGdabUZqWldKdmIyc25LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVJQ0JtZFc1amRHbHZiaUJuWlhSVmMyVnlTVzVtYnlobWJpa2dlMXh1SUNBZ0lHbG1JQ2doWDNWelpYSkpibVp2S1NCN1hHNGdJQ0FnSUNCc2IyRmtWWE5sY2tsdVptOG9abTRwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQm1iaWhmZFhObGNrbHVabThwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEc0Z0lITmxjblpwWTJVNklGc25KR2gwZEhBbkxDQW5KSEp2YjNSVFkyOXdaU2NzSUdabVEyOXlaVk5sY25acFkyVmRMRnh1SUNCdVlXMWxPaUFuWm1aRGIzSmxVMlZ5ZG1salpTZGNibjA3WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVV3eFZucGFXRXA2VEROS2FGcHRSbXhpUjFwc1kyMDFhR0p0VW14amVUbFJZMjA1Y1ZwWFRqQmplVGx0WVZoUmRGcHRSbXBhVjBwMllqSnpkbVF6WkROTU0wSXhXVzE0Y0ZsNU9YUmlNbEl4WWtkV2Vrd3lXbTFNVjA1MlkyMVZkbHB0V1hWWk1qbDVXbE0xZWxwWVNqSmhWMDVzVEcxd2VrbHBkMmxqTWpreFkyMU9iR041U1RaWGVVbDJWbGhPYkdOdVRYWmpiVVp0V1ZkV2MxcHRWbmxpYlVaMVdrZFdla3d4UW5saU1uQnNXVE5TZWt3eVduQmtRekZ0V1ZkT2JGbHRPWFpoZVRrelpETmpkbU5JVm1saVIyeHFUREl4ZGxwSVZuTmFXRTEyV20xWmRGa3lPWGxhVXpsdFdtazFhbUl6U214TWJrNXNZMjVhY0ZreVZYVmhiazFwV0ZOM2FXSnRSblJhV0UxcFQyeDBaRXhEU25SWldFSjNZVmMxYm1ONVNUWkphMFpDVkRCRk4xRlZSa0pSVTNoUVVWVkdWRXhIVGtKUlZtdHpVVEJHUWxKVGVFeFJWVVpLVEVWT1FsRlZZM05STUVaQ1VWTjRWbEZWUmxSTVJVNUNVVlZWTjFGVlJrWmthMDF6VVZWR1FsTlRlRXBSVlVaQ1RFVk9RbEZWUlhOVk1FWkNWVk40UkZGVlJrUlBNRVpDVVRKSmMxUXdSa0pVZW5SQ1VWVk9UVXhIVGtKUlZsVnpVVEJHUWxKNWVGcFJWVVpXVHpCR1FsRXpXa05NUm1SQ1VWVTRjMUV3UmtKU2VYaFVVVlZHVUU4d1JrSlJWVVZ6VWxWR1JHSnJTWE5STUVaQ1VWUjBRbEZWVmtKTVJrNUNVVlpOYzFVd1JrSlVlWGhFVVZWR1JFeEZSa0pSVlUxelVUQkdRbEY2ZEVKUlZVNXhVV2w0V2xGVlJsSk1SVlpDVVZWcmMxWlZSa0pWVTNoRVVWVkdSRTh3VmtKUk0xcERUekJHUWxGVlJYTlJWVVpVVVZONFZGRlZSbFJNUjBaQ1VWWmpjMUV3UmtKU1UzaEdVVlZHUkV4RlRrSlJWVlUzVVZWR1JHUnJTWE5WVlVaQ1UxTjRTbEZWUmtwTVJVWkNVVlZOYzFFd1JrSlJlWGhxVVZWR2FFeEZUa0pSVlUxelZWVkdSRnBwZUVKUlZVWkVURVZPUWxGVlRYTlZNRVpDVlhsNFRsRlZSa3hNUlU1Q1VWVlZOMUZWUmtSa2EwbHpXVEJHUWxWVGVFWlJWVVpLVEVWT1FsRlZSWE5XVlVaQ1ZYbDRWRkZWUmxSTVJWWkNVVlZyYzFRd1JrSlRlWGhFVVZWR1JFOHdSa0pSTTJoRVRFWk9RbEZWWTNOU1ZVWkNVWGw0UkZGVlJrWlBNRVpDVVRCdmMxVXdSa0pSZVhoQ1VWVkdSRXhGVGtKUlZVMXpWVEJHUWxWVGVFUlJWVVpFVEVWT1FsRlZUVGRVVlVaRVdtcDBRbEZWUmtKTVJXeENVVEJaYzFFd1JrSlJlWGhPVVZWT1NreEZSa0pSVlUxelVUQkdRbEY1ZUZSUlZVWlVURVYwUWxGVmEzTlJNRVpDVWxSMFFsRlZUbmRSYVhoYVVWVkdUa3hGTVVKUlZUQnpVVlZHUWxGNWVFUlJWVVpFVEVka1JWRlZSWEpSZVhoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkdGclZYTlJNRVpDVVhsNFJGRlZSa1JQTUZaQ1VUQTBOMUZWUmtKUlUzaENVVlpzUWt4R1RrSlJWazF6VjFWR1FsWlRlRVJSVlVaR1RFVldRbEZWVFhOUk1FWkNVbFIwUWxGVlRqQlJhWGhRVVZWR1NreEZUa0pSVlUxelZUQkdRbFZUZUVSUlZVWkdUekJHUWxFeVNYTmhWVXBDVVZaamMxRlZSa0pSZVhoRVVWVkdSRXhGVmtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRXllRU5NUlhSQ1VWVTROMUZWUmtSVVEzaFFVVlZHUkV4RlJrSlJWVTF6VVRCR1FsRjVlRlJSVlVaU1RFVk9RbEZWVFhOUk1FWkNVWHAwU2xGVlRtMVBNRVpDVVZWRmMxSlZSa1JTYW5SQ1VWVkdRa3hGUmtKUk1GazNVVlZHUWxGVGVFSlJWVlpDVEVWMFFsRlZjM05WVlVaQ1ZWTjRSbEZWUmtwUE1FWkNVVEpaYzFWVlJrSlVVM2hFVVZWR1NFeEZWa0pSVlUxelZEQkdRbFJUZUVSUlZVWklURWRHUWxGV1kzTlJNRVpDVW5sNGFsRlZSbHBNUlU1Q1VWVk5OMUZWUmtSUFZVMXpVekJHUWxKNWVFUlJWVVpJVEVka1ExRlZSbXBQTUVaQ1VWVkZjMUZWUmtSa1JVbHpVVEJHUWxGVWRFSlJWVTVDU1dsM2FXTXlPVEZqYlU1c1ZXMDVkbVJEU1RaSmFUbFdZekpXZVdONU9YbFpWMXBvV2xkNGJWcFlTblZaVnpWcldsaE5kbFZJU25aaGJWWnFaRWhOZGxwdGJEQk1WMXBvV1RKV2FXSXlPWEpNTTJRelpIazVkMlJYU25OaFYwMTJZbGM1YTJSWGVHeGplVGx0V21reGFtSXpTbXhNZVVselNXNU9kbVJZU21wYVdFNUVZakkxTUZwWE5UQkphbkJpU1drNGNVdHNlSFZKUTI5blZXMVdlbU5IT1hWak1teHBZa2RWWjFwdE9YbEpSMXA1WVZkV2RWcElUV2RoVnpWdFlqTktkRmxZVW5CaU1qVmpZbWxCY1ZoSE5HZExhVUpCWW0xa2EySXlUV2RqTWxaNVpHMXNhbHBXZUhWSlEyOW5VVWN4ZGxwSVZuTmFVMEp0V21rMWFtSXpTbXhVVnpsclpGZDRiRmhITkdkTGFVSkJZMjFXZUdSWGJIbGFXRTFuU2tkb01HUklRWE5KUTFKNVlqSTVNRlV5VG5aalIxWmpZbWxCY1V3eGVIVmFibFoxV1ROU2NHSXlOR2RhYlZwRVlqTktiRlV5Vm5sa2JXeHFXbE5uYTJGSVVqQmpRM2RuU2toS2RtSXpVbFJaTWpsM1dsTnNOMWhITldOaWFVRm5aRzFHZVVsR09URmpNbFo1VTFjMWJXSjZkR05pYVVGblkyMVdNR1JZU25WSlNIUmpZbWxCWjBsRFFtNWFXRkpXWXpKV2VWTlhOVzFpZW05bldqSldNRlpZVG14amEyeDFXbTA0YzFoSE5HZEpRMEZuV1RKNGJGbFlTa0ppUjNjMlNVZE9jMXBYUm5sUlYzaHpXRWMwWjBsSU1XTmliSGgxU1VOQ2JXUlhOV3BrUjJ4MlltbENhbUpIVm1oamEwWnpZa05uY0dVeGVIVkpRMEZuU1VZNU1XTXlWbmxUVnpWdFlubEJPVWxJVm5WYVIxWnRZVmMxYkZwRWRHTmlhVUZuWmxaNGRWaEhOR2RKUXpoeFMyeDRkVWxEUVdkTGFVSlRXbGhTZVdGWFZqSmFVMEl3WVVkVloyRlhOVzFpTTBwMFdWaFNjR0l5TkdkWlYwcDJaRmhSWjJSSGFHeEpTRlo2V2xoSmRWaEhOR2RKUTBGeFdFYzBaMGxEUVhGSlJVSjFXakpTZGxsNVFuUmFXRkp2WWpKUloxaEhOR2RKUTBGeFNVVkNkVmxYTVd4SlIxcHRVVEk1ZVZwV1RteGpibHB3V1RKVmFtSkhPV2hhUmxaNldsaEtTbUp0V25aSlEwSmpZbWxCWjBsRGIyZFJTRUpvWTIxR2RFbElkRzFrVnpWcVpFZHNkbUp1TUdkYWJUUm5VVmMxTlVsSFdqRmliVTR3WVZjNWRVbElVbTlaV0ZGblkyMVdhbHBYYkRKYVdFMW5aRWRvYkVsSGJIVmFiVGw1WWxkR01HRlhPWFZKUjBaNlNVZEdkVWxIUm5sYU0xWjBXbGMxTUV4c2VIVkpRMEZuUzJrNVkySnBRV2RhYmxaMVdUTlNjR0l5TkdkaVJ6bG9Xa1pXZWxwWVNrcGliVnAyUzBkYWRVdFlkR05pYVVGblNVTkJhMkZJVWpCalF6VnVXbGhSYjBwNU9XMVpWMDVzV1cwNWRtRjVPWFJhVTJOd1dFYzBaMGxEUVdkSlEwRjFZek5XYWxreVZucGplV2h0WkZjMWFtUkhiSFppYVdoNVdsaE9NV0pJVVhCbE1YaDFTVU5CWjBsRFFXZEpRMEptWkZoT2JHTnJiSFZhYlRoblVGTkJhMk50T1haa1JrNXFZak5DYkV4dVZucGFXRXBLWW0xYWRrbEVNR2RqYlZaNlpGZDRNRTk1UW1OaWFVRm5TVU5CWjBsRFFXZGhWMWx2V20wMGNHVXhlSFZKUTBGblNVTkJaMGxEUVdkSlIxcDFTMFk1TVdNeVZubFRWelZ0WW5sck4xaEhOR2RKUTBGblNVTkJaMGxJTVdOaWFVRm5TVU5CWjBsSU1IQllSelJuU1VOQlowbERRWFZhV0VwNVlqTkpiMXB1Vm5WWk0xSndZakkwYjFwWVNubGlNMGx3WlRGNGRVbERRV2RKUTBGblNVTkNhbUl5TlhwaU1uaHNURzFXZVdOdE9YbExRMlJ0V1Zkc2MxcFhVV2RrUnpobllrYzVhRnBEUWpGak1sWjVZM2xDY0dKdFduWmpiVEZvWkVkc2RtSnBRbTFqYlRsMFNVZGFhRmt5Vm1saU1qbHlTbmxyTjFoSE5HZEpRMEZuU1VOQ09VdFVkR05pYVVGblpsWjRkVmhITldOaWFVRm5USGx2Y1ZoSE5HZEpRMEZ4U1VaS2JHUklTbkJhV0Zwc1NVaFNiMXBUUW1wWlYwNXZXbGRSWjJGWE5XMWlNMHAwV1ZoU2NHSXlOR2RaVjBwMlpGaFJaMlJIYUd4SlNGWjZXbGhKZFZoSE5HZEpRMEZ4U1VWc2JVbElVbTlhVTBKd1ltMWFkbU50TVdoa1IyeDJZbWxDY0dONVFuVmlNMUZuWkVkb2JHTnRWWE5KUjJSMlNVaFNka2xJVW05YVUwSnBXVmRPY2xwWE5XdEpTRkoyU1VoS2JHUklTbkJhV0Zwc1NVZHNNRWxJVm5waFZ6VnVXRWMwWjBsRFFYRkpTRkp2V2xOQ2RGcFlVbTlpTWxGbllrYzVhRnBHVm5wYVdFcEtZbTFhZGt0RGJHTmlhVUZuU1VOd1kySnBRV2RKUTI5blVVYzFibHBIT1dwSlJ6RnNaRWRvZGxwRFFtTmlhVUZuU1VOdloxRkhOV2hpVjFWbldtMWFSR0l6U214Vk1sWjVaRzFzYWxwVFRtNWFXRkpXWXpKV2VWTlhOVzFpZVVGbldFYzBaMGxEUVhGSlJVSjNXVmhLYUdKVFFqZGFibFoxV1ROU2NHSXlOVGxKUjFwMVNVVkdkV1ZUUW0xa1Z6VnFaRWRzZG1KcFFqQmhSMFl3U1VoS2JGa3lWbkJrYlZaNlNVaFNiMXBUUW5CaWJWcDJZMjB4YUdSSGJIWmlhVUpvWTNsQ2FHSnBRbWhqYldReFlsZFdkV1JETldOaWFVRm5TVU52ZGxoSE5HZEpSMW94WW0xT01HRlhPWFZKUjJSc1pFWldlbHBZU2twaWJWcDJTMGRhZFV0WWRHTmlhVUZuU1VOQ2NGcHBRVzlKVmpreFl6SldlVk5YTlcxaWVXdzNXRWMwWjBsRFFXZEpRMEp6WWpKR2ExWllUbXhqYTJ4MVdtMDRiMXB0TkhCUGVVRm5TVVo0ZFVsRFFXZEpTREJuV2xkNGVscFRRamRZUnpSblNVTkJaMGxEUW0xaWFXaG1aRmhPYkdOcmJIVmFiVGh3VHpGNGRVbERRV2RKU0RGalltbEJaMlpXZUhWbVZuaDFXRWMxZEdJeVVqRmlSMVYxV2xob2QySXpTakJqZVVFNVNVaDBZMkpwUVdkak1sWjVaRzFzYWxwVWIyZFhlV05yWVVoU01HTkRZM05KUTJOclkyMDVkbVJHVG1waU0wSnNTbmwzWjFwdFdrUmlNMHBzVlRKV2VXUnRiR3BhVmpCeldFYzBaMGxITldoaVYxVTJTVU5rYlZwclRuWmpiVlpVV2xoS01tRlhUbXhLTVhoMVpsWjRkVWxzTVRsY2JpOHZJeUJ6YjNWeVkyVlZVa3c5TDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXTnZjbVV2Wm1ZdVkyOXlaUzV6WlhKMmFXTmxMbXB6SWwxOVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtY29yZS9mZi5jb3JlLnNlcnZpY2UuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xuYW5ndWxhci5tb2R1bGUoJ2ZmLmRhc2hib2FyZE1vZHVsZScsIFtdKS5jb25maWcocmVxdWlyZSgnLi9mZi5kYXNoYm9hcmQucm91dGVzLmpzJykpLmNvbnRyb2xsZXIoJ2ZmRGFzaGJvYXJkQ29udHJvbGxlcicsIHJlcXVpcmUoJy4vZmYuZGFzaGJvYXJkLmNvbnRyb2xsZXIuanMnKSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV1JoYzJoaWIyRnlaQzltWmk1a1lYTm9ZbTloY21RdVlYQndMbXB6SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0WkdGemFHSnZZWEprTDJabUxtUmhjMmhpYjJGeVpDNWhjSEF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVN4WFFVRlhMRU5CUVVNN1FVRkRXaXhOUVVGTkxFOUJRVThzUVVGQlF5eERRVUZETEc5Q1FVRnRRaXhEUVVGSExFZEJRVU1zUTBGQlF5eFBRVUZQTEVGQlFVTXNRMEZCUXl4UFFVRk5MRUZCUVVNc1EwRkJReXd3UWtGQmVVSXNRMEZCUXl4RFFVRkRMRmRCUVZjc1FVRkJReXhEUVVGRExIVkNRVUZ6UWl4RFFVRkhMRU5CUVVFc1QwRkJUU3hCUVVGRExFTkJRVU1zT0VKQlFUWkNMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJSM0JFSWl3aWMyOTFjbU5sVW05dmRDSTZJaTlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012Ylc5a2RXeGxjeTltWmkxa1lYTm9ZbTloY21Rdklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWhibWQxYkdGeUxtMXZaSFZzWlNnblptWXVaR0Z6YUdKdllYSmtUVzlrZFd4bEp5d2dXMTBwTG1OdmJtWnBaeWh5WlhGMWFYSmxLQ2N1TDJabUxtUmhjMmhpYjJGeVpDNXliM1YwWlhNdWFuTW5LU2t1WTI5dWRISnZiR3hsY2lnblptWkVZWE5vWW05aGNtUkRiMjUwY205c2JHVnlKeXdnY21WeGRXbHlaU2duTGk5bVppNWtZWE5vWW05aGNtUXVZMjl1ZEhKdmJHeGxjaTVxY3ljcEtUdGNibHh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktiV0ZYZUd4SmFtOXBUREZXZWxwWVNucE1NMHBvV20xR2JHSkhXbXhqYlRWb1ltMVNiR041T1ZGamJUbHhXbGRPTUdONU9XMWhXRkYwV20xR2FscFhTblppTW5OMlpETmtNMHd6UWpGWmJYaHdXWGs1ZEdJeVVqRmlSMVo2VERKYWJVeFhVbWhqTW1ocFlqSkdlVnBET1cxYWFUVnJXVmhPYjFsdE9XaGpiVkYxV1ZoQ2QweHRjSHBKYVhkcFl6STVNV050VG14amVVazJWM2xKZGxaWVRteGpiazEyWTIxR2JWbFhWbk5hYlZaNVltMUdkVnBIVm5wTU1VSjVZakp3YkZrelVucE1NbHB3WkVNeGJWbFhUbXhaYlRsMllYazVNMlF6WTNaalNGWnBZa2RzYWt3eU1YWmFTRlp6V2xoTmRscHRXWFJhUjBaNllVZEtkbGxZU210TU1scHRURzFTYUdNeWFHbGlNa1o1V2tNMWFHTklRWFZoYmsxcFdGTjNhV0p0Um5SYVdFMXBUMngwWkV4RFNuUlpXRUozWVZjMWJtTjVTVFpKYTBaQ1ZGVkZOMUZWUmtKUlUzaE9VVlZHVGt4Rk9VSlJWVGh6VVZWR1FsRjVlRVJSVlVaRVRFYzVRMUZWUm5SUmFYaEVVVlZHU0V4RlpFSlJWVTF6VVRCR1FsRjVlRkJSVlUwelVXbDRRbEZWUmtSTVJVNUNVVlZOYzFRd1JrSlVVM2hDVVZWR1JFeEZUa0pSVlUxelRVVktRbEZZYkVOTVJVNUNVVlZOYzFFd1JrSlJlWGhZVVZWT2NWRjVlRUpSVlVaRVRFVk9RbEZWVFhOa1ZVcENVVmhPUTB4RlRrSlJWV056VVRCR1FsRlRlRkJSVlVaT1RFVkdRbEZWVFhOUk1FWkNVWGwzTkZGclJrSk9hMGx6VVRCR1FsRjVlRVJSVlVaRVRFVk9RbEZWUlRkUlZVWkVZVVZaYVV4RFNucGlNMVo1V1RKV1UySXlPVEJKYW05cFRERldlbHBZU25wTU0wcG9XbTFHYkdKSFdteGpiVFZvWW0xU2JHTjVPVkZqYlRseFdsZE9NR041T1cxaFdGRjBXbTFHYWxwWFNuWmlNbk4yWkROa00wd3pRakZaYlhod1dYazVkR0l5VWpGaVIxWjZUREphYlV4WFVtaGpNbWhwWWpKR2VWcERPR2xNUTBwNllqTldlVmt5Vm5wUk1qbDFaRWRXZFdSRFNUWlhlVWwyUzJsd1kySnBRWEZKUmtwc1kwaEtiR015Vm5Wa1NFMW5aRWRvYkVsSFRuWmlibEpvWVZjMWJHTnBRbWhqYlZab1NVZGFkbU5wUWpCaFIxVm5ZbGRHY0dKcFFuZFpWMlJzV0VjMFowdHNlSFZKUTI5blVVYzFibHBIT1dwSlJ6RjJXa2hXYzFwV2VIVkpRMjluVVVjMWFHSlhWV2RhYlZsMVdrZEdlbUZIU25aWldFcHJWRmM1YTJSWGVHeEpSbmgxU1VOdmRsaEhOV2hpYldReFlrZEdlVXh0TVhaYVNGWnpXbE5uYmxwdFdYVmFSMFo2WVVkS2RsbFlTbXRVVnpsclpGZDRiRXA1ZDJkWE1UQndXRWMwWjBsRFFXZE1iVTUyWW0xYWNGcDVhSGxhV0VZeFlWaEtiRXREWTNWTU1scHRURzFTYUdNeWFHbGlNa1o1V2tNMWVXSXpWakJhV0UxMVlXNU5ia3RUYkdOaWFVRm5TVU5CZFZreU9YVmtTRXAyWWtkNGJHTnBaMjVhYlZwRldWaE9iMWx0T1doamJWSkVZakkxTUdOdE9YTmlSMVo1U25sM1oyTnRWbmhrVjJ4NVdsTm5ia3hwT1cxYWFUVnJXVmhPYjFsdE9XaGpiVkYxV1RJNWRXUklTblppUjNoc1kyazFjV041WTNCTFZuaDFTV3d4T1Z4dUx5OGpJSE52ZFhKalpWVlNURDB2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpHRnphR0p2WVhKa0wyWm1MbVJoYzJoaWIyRnlaQzVoY0hBdWFuTWlYWDA9XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1kYXNoYm9hcmQvZmYuZGFzaGJvYXJkLmFwcC5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBmZkRhc2hib2FyZENvbnRyb2xsZXIoJHNjb3BlKSB7XG4gIHZhciB2bSA9IHRoaXM7XG59XG5tb2R1bGUuZXhwb3J0cyA9IFsnJHNjb3BlJywgZmZEYXNoYm9hcmRDb250cm9sbGVyXTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXUmhjMmhpYjJGeVpDOW1aaTVrWVhOb1ltOWhjbVF1WTI5dWRISnZiR3hsY2k1cWN5SXNJbk52ZFhKalpYTWlPbHNpTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXUmhjMmhpYjJGeVpDOW1aaTVrWVhOb1ltOWhjbVF1WTI5dWRISnZiR3hsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVGQkxGZEJRVmNzUTBGQlF6dEJRVU5hTEU5QlFWTXNjMEpCUVc5Q0xFTkJRVVVzVFVGQlN5eERRVUZITzBGQlEzSkRMRUZCUVVrc1NVRkJRU3hEUVVGQkxFVkJRVU1zUlVGQlNTeExRVUZITEVOQlFVTTdRVUZEWmp0QlFVRkJMRUZCUTBFc1MwRkJTeXhSUVVGUkxFVkJRVWtzUlVGQlF5eFJRVUZQTEVOQlFVY3NjMEpCUVc5Q0xFTkJRVU1zUTBGQlF6dEJRVWRyUlNJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpHRnphR0p2WVhKa0x5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVablZ1WTNScGIyNGdabVpFWVhOb1ltOWhjbVJEYjI1MGNtOXNiR1Z5S0NSelkyOXdaU2tnZTF4dUlDQjJZWElnZG0wZ1BTQjBhR2x6TzF4dWZWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmJKeVJ6WTI5d1pTY3NJR1ptUkdGemFHSnZZWEprUTI5dWRISnZiR3hsY2wwN1hHNWNiaTh2SXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFdSaGRHRTZZWEJ3YkdsallYUnBiMjR2YW5OdmJqdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNtMWhWM2hzU1dwdmFVd3hWbnBhV0VwNlRETkthRnB0Um14aVIxcHNZMjAxYUdKdFVteGplVGxSWTIwNWNWcFhUakJqZVRsdFlWaFJkRnB0Um1wYVYwcDJZakp6ZG1RelpETk1NMEl4V1cxNGNGbDVPWFJpTWxJeFlrZFdla3d5V20xTVYxSm9ZekpvYVdJeVJubGFRemx0V21rMWExbFlUbTlaYlRsb1kyMVJkVmt5T1hWa1NFcDJZa2Q0YkdOcE5YRmplVWx6U1c1T2RtUllTbXBhV0UxcFQyeHphVXd4Vm5wYVdFcDZURE5LYUZwdFJteGlSMXBzWTIwMWFHSnRVbXhqZVRsUlkyMDVjVnBYVGpCamVUbHRZVmhSZEZwdFJtcGFWMHAyWWpKemRtUXpaRE5NTTBJeFdXMTRjRmw1T1hSaU1sSXhZa2RXZWt3eVdtMU1WMUpvWXpKb2FXSXlSbmxhUXpsdFdtazFhMWxZVG05WmJUbG9ZMjFSZFZreU9YVmtTRXAyWWtkNGJHTnBOWEZqZVVwa1RFTktkVmxYTVd4amVVazJWekV3YzBsdE1XaGpTRUp3WW0xa2VrbHFiMmxSVlVaT1VWUjBRbEZWUmtKTVJUbENVVlpOYzJNd1NrSlJWemxEVEVWT1FsRlZWWE5VVlVaQ1UzbDRSRkZWUmtoUE1FWkNVVE5LUkV4RlJrSlJWV3R6VTFWR1FsRlRlRVJSVlVaQ1RFVldRbEZWVFhOU1ZVWkNVMU40VEZGVlJraE1SVTVDVVZWTk4xRlZSa1JhYW5SQ1VWVkdRa3hGUmtKU1ZVVnpVekJHUWxONWVGSlJWVVpTVEVWV1FsRlZhM05TVlVaQ1VYbDRVbEZWUmxCTVJVNUNVVlZqYzJNd1NrSlJWemxEVEVWT1FsRlZUWE5STUVaQ1VWUjBRbEZWVG5GU1EwbHpTVzVPZG1SWVNtcGFWa3AyWWpOUmFVOXBTWFpXV0U1c1kyNU5kbU50Um0xWlYxWnpXbTFXZVdKdFJuVmFSMVo2VERGQ2VXSXljR3haTTFKNlRESmFjR1JETVcxWlYwNXNXVzA1ZG1GNU9UTmtNMk4yWTBoV2FXSkhiR3BNTWpGMldraFdjMXBZVFhaYWJWbDBXa2RHZW1GSFNuWlpXRXByVEhsSmMwbHVUblprV0VwcVdsaE9SR0l5TlRCYVZ6VXdTV3B3WWtscE9IRkxiSGgxU1VOdloxRXlPWFZrU0VwMllrZDRla2xJVW05YVUwSjBXVmRzZFVsSFVtaGpNbWhwWWpKR2VWcERRbWhqYlZab1RHeDRkVWxEY0dOaWFVRnhTVVZDYW1KSFJucGplVUp0V210U2FHTXlhR2xpTWtaNVdrVk9kbUp1VW5saU1uaHpXbGhLWTJKcFFYRkpSVUowV2xjeGFWcFlTbEJhYVVKdFdtazFhMWxZVG05WmJUbG9ZMjFTVG1JeVVqRmlSMVpqWW1sQmNVd3hlSFZhYmxaMVdUTlNjR0l5TkdkYWJWcEZXVmhPYjFsdE9XaGpiVkpFWWpJMU1HTnRPWE5pUjFaNVMwTlNlbGt5T1hkYVUydG5aVEY0ZFVsRFFqSlpXRWxuWkcwd1oxQlRRakJoUjJ4NlQzbENZMkp1TVdOaWJIaDFZbGM1YTJSWGVHeE1iVlkwWTBjNWVXUklUV2RRVTBKaVNubFNlbGt5T1hkYVUyTnpTVWRhYlZKSFJucGhSMHAyV1ZoS2ExRXlPWFZrU0VwMllrZDRiR05zTUdkWVJ6UnBXRmd3UFZ4dUx5OGpJSE52ZFhKalpWVlNURDB2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpHRnphR0p2WVhKa0wyWm1MbVJoYzJoaWIyRnlaQzVqYjI1MGNtOXNiR1Z5TG1weklsMTlcbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWRhc2hib2FyZC9mZi5kYXNoYm9hcmQuY29udHJvbGxlci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAkcm91dGVQcm92aWRlci53aGVuKCcvJywge1xuICAgIGNvbnRyb2xsZXI6ICdmZkRhc2hib2FyZENvbnRyb2xsZXIgYXMgdm0nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9tb2R1bGVzL2ZmLWRhc2hib2FyZC9mZi5kYXNoYm9hcmQudG1wbC5odG1sJ1xuICB9KTtcbn1dO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdSaGMyaGliMkZ5WkM5bVppNWtZWE5vWW05aGNtUXVjbTkxZEdWekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRaR0Z6YUdKdllYSmtMMlptTG1SaGMyaGliMkZ5WkM1eWIzVjBaWE11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVN4WFFVRlhMRU5CUVVNN1FVRkRXaXhMUVVGTExGRkJRVkVzUlVGQlNTeEZRVUZETEdkQ1FVRmxMRU5CUVVjc1ZVRkJVeXhqUVVGaExFTkJRVWM3UVVGRE0wUXNaVUZCWVN4TFFVRkxMRUZCUVVNc1EwRkJReXhIUVVGRkxFTkJRVWM3UVVGRGRrSXNZVUZCVXl4RFFVRkhMRGhDUVVFMFFqdEJRVU40UXl4alFVRlZMRU5CUVVjc1owUkJRVGhETzBGQlFVRXNSVUZETjBRc1EwRkJReXhEUVVGRE8wRkJRMG9zUTBGQlF5eERRVUZETzBGQlJ6aEhJaXdpYzI5MWNtTmxVbTl2ZENJNklpOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZiVzlrZFd4bGN5OW1aaTFrWVhOb1ltOWhjbVF2SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZzbkpISnZkWFJsVUhKdmRtbGtaWEluTENCbWRXNWpkR2x2Ymlna2NtOTFkR1ZRY205MmFXUmxjaWtnZTF4dUlDQWtjbTkxZEdWUWNtOTJhV1JsY2k1M2FHVnVLQ2N2Snl3Z2UxeHVJQ0FnSUdOdmJuUnliMnhzWlhJNklDZG1aa1JoYzJoaWIyRnlaRU52Ym5SeWIyeHNaWElnWVhNZ2RtMG5MRnh1SUNBZ0lIUmxiWEJzWVhSbFZYSnNPaUFuTGk5dGIyUjFiR1Z6TDJabUxXUmhjMmhpYjJGeVpDOW1aaTVrWVhOb1ltOWhjbVF1ZEcxd2JDNW9kRzFzSjF4dUlDQjlLVHRjYm4xZE8xeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGZFNhR015YUdsaU1rWjVXa001YlZwcE5XdFpXRTV2V1cwNWFHTnRVWFZqYlRreFpFZFdla3h0Y0hwSmFYZHBZekk1TVdOdFRteGplVWsyVjNsSmRsWllUbXhqYmsxMlkyMUdiVmxYVm5OYWJWWjVZbTFHZFZwSFZucE1NVUo1WWpKd2JGa3pVbnBNTWxwd1pFTXhiVmxYVG14WmJUbDJZWGs1TTJRelkzWmpTRlpwWWtkc2Frd3lNWFphU0ZaeldsaE5kbHB0V1hSYVIwWjZZVWRLZGxsWVNtdE1NbHB0VEcxU2FHTXlhR2xpTWtaNVdrTTFlV0l6VmpCYVdFMTFZVzVOYVZoVGQybGliVVowV2xoTmFVOXNkR1JNUTBwMFdWaENkMkZYTlc1amVVazJTV3RHUWxaVlJUZFJWVVpDVVZONFRGRlZSa3hNUmtaQ1VWWkZjMUpWUmtKVFUzaEdVVlZHUkV4SFpFTlJWVVpzVEVWT1FsRlZZM05XVlVaQ1ZYbDRhbEZWUm1oTVJVNUNVVlZqTjFGVlJrUk5NRkZ6V2xWR1FsbFRlRXhSVlVaTVRFVkdRbEZWVFhOUk1FWkNVWGw0U0ZGVlJrWk1SVTVDVVZWak4xRlZSa1JrYTBseldWVkdRbFY1ZUVSUlZVWktURVJvUTFGVlJUQlJhblJDVVZWT05sRjVlR3BSVlVaV1RFVk9RbEZWYTNOYU1GSkNVVlJvUkU4d1JrSlJWVVZ6VWxWR1JFOVZVWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVVEJ2YzFFd1JrSlJlWGhFVVZWR1FrOHdSa0pSTUZGcFRFTktlbUl6Vm5sWk1sWlRZakk1TUVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGZFNhR015YUdsaU1rWjVXa000YVV4RFNucGlNMVo1V1RKV2VsRXlPWFZrUjFaMVpFTkpObGQ1U1haTGFYQmpZbWxCY1VsR1NuWmtXRkpzWTNsQ2JXSXpTV2RrUjJoc1NVZFNhR015YUdsaU1rWjVXa05DWTJKcFFYRllSelJuUzJsQ1FXSnRaR3RpTWsxbllsZFdNR0ZIT1d0WVJ6Um5TMmxDUVdKdFJuUmFVMEp0V21rMWExbFlUbTlaYlRsb1kyMVNUbUl5VWpGaVIxVnFXVEk1ZFZwdGJHNVlSelJuUzJsQ1FWcFlhR2hpV0VKeldsWjRkVWxEYjJkTWVUaG5aRmhLYzBsRU1HZEtNbWd3WkVoQk5reDVPWFJsV0dSc1dXNU9jR1JIVlhWWk1qbDBUSGxrWTJKcFFYRkpRemgyU1VoT2IySXpWbk5hUTBKellqSkdhMGxJVW05YVUwSnJXVmhPYjFsdE9XaGpiVkZuV1RJNWRXUklTblppUjNoc1kybENhR0p0VVdka1IxWjBZMGQ0YUdSSFZtTmlhVUZ4V0VjMFowdHBPV05pYlRGMldraFdjMXBUTld4bFNFSjJZMjVTZWtsRU1HZFhlV05yWTIwNU1XUkhWbEZqYlRreVlWZFNiR05wWTNOSlIxb3hZbTFPTUdGWE9YVkxRMUo1WWpOV01GcFdRbmxpTTFwd1drZFdlVXRUUWpkWVJ6Um5TVU5TZVdJelZqQmFWa0o1WWpOYWNGcEhWbmxNYm1SdldsYzBiMHA1T0c1TVEwSTNXRWMwWjBsRFFXZFpNamwxWkVoS2RtSkhlR3hqYVVFMlNVTmtiVnByVW1oak1taHBZakpHZVZwRlRuWmlibEo1WWpKNGMxcFlTV2RaV0UxblpHMHdia3hHZUhWSlEwRm5TVWhTYkdKWVFuTlpXRkpzVmxoS2MwbEViMmRLZVRSMllsYzVhMlJYZUd4amVUbHRXbWt4YTFsWVRtOVpiVGxvWTIxUmRscHRXWFZhUjBaNllVZEtkbGxZU210TWJsSjBZMGQzZFdGSVVuUmlRMlJqWW1sQloyWlRhemRZUnpVNVdGWjRkVWxzTVRsY2JpOHZJeUJ6YjNWeVkyVlZVa3c5TDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXUmhjMmhpYjJGeVpDOW1aaTVrWVhOb1ltOWhjbVF1Y205MWRHVnpMbXB6SWwxOVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtZGFzaGJvYXJkL2ZmLmRhc2hib2FyZC5yb3V0ZXMuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xudmFyIGZyaWVuZENvbnRyb2xsZXIgPSByZXF1aXJlKCcuL2ZmLmZyaWVuZC5jb250cm9sbGVyLmpzJyk7XG52YXIgZnJpZW5kU2VydmljZSA9IHJlcXVpcmUoJy4vZmYuZnJpZW5kLnNlcnZpY2UuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdmZi5mcmllbmRNb2R1bGUnLCBbXSkuY29uZmlnKHJlcXVpcmUoJy4vZmYuZnJpZW5kLnJvdXRlcy5qcycpKS5mYWN0b3J5KGZyaWVuZFNlcnZpY2UubmFtZSwgZnJpZW5kU2VydmljZS5zZXJ2aWNlKS5jb250cm9sbGVyKGZyaWVuZENvbnRyb2xsZXIubmFtZSwgZnJpZW5kQ29udHJvbGxlci5jb250cm9sbGVyKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXWnlhV1Z1WkM5bVppNW1jbWxsYm1RdVlYQndMbXB6SWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0Wm5KcFpXNWtMMlptTG1aeWFXVnVaQzVoY0hBdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGQlFTeFhRVUZYTEVOQlFVTTdRVUZEV2l4QlFVRkpMRVZCUVVFc1EwRkJRU3huUWtGQlpTeEZRVUZKTEVOQlFVRXNUMEZCVFN4QlFVRkRMRU5CUVVNc01rSkJRVEJDTEVOQlFVTXNRMEZCUXp0QlFVTXpSQ3hCUVVGSkxFVkJRVUVzUTBGQlFTeGhRVUZaTEVWQlFVa3NRMEZCUVN4UFFVRk5MRUZCUVVNc1EwRkJReXgzUWtGQmRVSXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxFMUJRVTBzVDBGQlR5eEJRVUZETEVOQlFVTXNhVUpCUVdkQ0xFTkJRVWNzUjBGQlF5eERRVUZETEU5QlFVOHNRVUZCUXl4RFFVRkRMRTlCUVUwc1FVRkJReXhEUVVGRExIVkNRVUZ6UWl4RFFVRkRMRU5CUVVNc1VVRkJVU3hCUVVGRExFTkJRVU1zWVVGQldTeExRVUZMTEVOQlFVY3NRMEZCUVN4aFFVRlpMRkZCUVZFc1EwRkJReXhYUVVGWExFRkJRVU1zUTBGQlF5eG5Ra0ZCWlN4TFFVRkxMRU5CUVVjc1EwRkJRU3huUWtGQlpTeFhRVUZYTEVOQlFVTXNRMEZCUXp0QlFVZDZSaUlzSW5OdmRYSmpaVkp2YjNRaU9pSXZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0Wm5KcFpXNWtMeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWx3aWRYTmxJSE4wY21samRGd2lPMXh1ZG1GeUlHWnlhV1Z1WkVOdmJuUnliMnhzWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMlptTG1aeWFXVnVaQzVqYjI1MGNtOXNiR1Z5TG1wekp5azdYRzUyWVhJZ1puSnBaVzVrVTJWeWRtbGpaU0E5SUhKbGNYVnBjbVVvSnk0dlptWXVabkpwWlc1a0xuTmxjblpwWTJVdWFuTW5LVHRjYm1GdVozVnNZWEl1Ylc5a2RXeGxLQ2RtWmk1bWNtbGxibVJOYjJSMWJHVW5MQ0JiWFNrdVkyOXVabWxuS0hKbGNYVnBjbVVvSnk0dlptWXVabkpwWlc1a0xuSnZkWFJsY3k1cWN5Y3BLUzVtWVdOMGIzSjVLR1p5YVdWdVpGTmxjblpwWTJVdWJtRnRaU3dnWm5KcFpXNWtVMlZ5ZG1salpTNXpaWEoyYVdObEtTNWpiMjUwY205c2JHVnlLR1p5YVdWdVpFTnZiblJ5YjJ4c1pYSXVibUZ0WlN3Z1puSnBaVzVrUTI5dWRISnZiR3hsY2k1amIyNTBjbTlzYkdWeUtUdGNibHh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktiV0ZYZUd4SmFtOXBUREZXZWxwWVNucE1NMHBvV20xR2JHSkhXbXhqYlRWb1ltMVNiR041T1ZGamJUbHhXbGRPTUdONU9XMWhXRkYwV20xR2FscFhTblppTW5OMlpETmtNMHd6UWpGWmJYaHdXWGs1ZEdJeVVqRmlSMVo2VERKYWJVeFhXbmxoVjFaMVdrTTViVnBwTlcxamJXeHNZbTFSZFZsWVFuZE1iWEI2U1dsM2FXTXlPVEZqYlU1c1kzbEpObGQ1U1haV1dFNXNZMjVOZG1OdFJtMVpWMVp6V20xV2VXSnRSblZhUjFaNlRERkNlV0l5Y0d4Wk0xSjZUREphY0dSRE1XMVpWMDVzV1cwNWRtRjVPVE5rTTJOMlkwaFdhV0pIYkdwTU1qRjJXa2hXYzFwWVRYWmFiVmwwV201S2NGcFhOV3RNTWxwdFRHMWFlV0ZYVm5WYVF6Vm9ZMGhCZFdGdVRXbFlVM2RwWW0xR2RGcFlUV2xQYkhSa1RFTktkRmxZUW5kaFZ6VnVZM2xKTmtsclJrSlJWVVUzVVZWR1FsRlRlRUpSVlVaS1RFVldRbEZWUlhOUk1FWkNVVk40YmxGclJrSmFVM2hHVVZWR1NreEZUa0pSVlVWelZEQkdRbFJUZUVKUlZVWkVURVZPUWxGVlRYTk5hMHBDVVZSQ1EweEZUa0pSVlUxelVUQkdRbEY2ZEVKUlZVMTZVa040UWxGVlJrcE1SVlpDVVZWRmMxRXdSa0pSVTNob1VWVkdXa3hGVmtKUlZXdHpVVEJHUWxGVGVGQlJWVVpPVEVWR1FsRlZUWE5STUVaQ1VYbDRNMUZyUmtKa1ZVbHpVVEJHUWxGNWVFUlJWVVpFVHpCR1FsVllTa1ZNUlRGQ1VWVXdjMVF3UmtKVWVYaENVVlZHUkV4RlRrSlJWVTF6WVZWS1FsRlhaRU5NUlU1Q1VWVmpjMUl3UmtKUmVYaEVVVlZHUkV4Rk9VSlJla1pEVEVWR1FsRlZUWE5STUVaQ1VYbDRVRkZWUms1TVJVWkNVVlZOYzFFd1JrSlJlWGd4VVd0R1FtTXdTWE5STUVaQ1VYbDRSRkZWUmtSTVJrWkNVVEp3UkV4RlJrSlJWVTF6VVRCR1FsRjVlR2hSVlVaYVRFVjBRbEZWYzNOUk1FWkNVbmw0UkZGVlJrSk1SMFpDVVZacmMxVlZSa0pWVTNoRVVWVkdSRXhHWkVKUk0yaEVURVZHUWxGVlRYTlJNRVpDVVhsNGJsRnJSa0phVTNoTVVWVkdURXhGVGtKUlZXTnpVVEJHUWxGVGVHNVJhMFpDV2xONFdGRlZSbGhNUlU1Q1VWVk5jMUV3UmtKUlZIUkNVVlZPYzFKVFNYTkpiazUyWkZoS2FscFdTblppTTFGcFQybEpkbFpZVG14amJrMTJZMjFHYlZsWFZuTmFiVlo1WW0xR2RWcEhWbnBNTVVKNVlqSndiRmt6VW5wTU1scHdaRU14YlZsWFRteFpiVGwyWVhrNU0yUXpZM1pqU0ZacFlrZHNha3d5TVhaYVNGWnpXbGhOZGxwdFdYUmFia3B3V2xjMWEweDVTWE5KYms1MlpGaEthbHBZVGtSaU1qVXdXbGMxTUVscWNHSkpibHBvWTJsQ2JXTnRiR3hpYlZKRVlqSTFNR050T1hOaVIxWjVTVVF3WjJOdFZuaGtWMng1V2xObmJreHBPVzFhYVRWdFkyMXNiR0p0VVhWWk1qbDFaRWhLZG1KSGVHeGphVFZ4WTNsamNFOHhlSFZrYlVaNVNVZGFlV0ZYVm5WYVJrNXNZMjVhY0ZreVZXZFFVMEo1V2xoR01XRllTbXhMUTJOMVRESmFiVXh0V25saFYxWjFXa00xZWxwWVNqSmhWMDVzVEcxd2VrcDVhemRZUnpWalltazRjVXRzZUhWSlEyOW5WVzFXZW1OSE9YVmpNbXhwWWtkVloxcHRPWGxKUjFwNVlWZFdkVnBJVFdkaFZ6VnRZak5LZEZsWVVuQmlNalJuV1ZjMWEwbElTbXhqU0Vwc1l6SldkV1JIUmpCaFZ6bDFXRWMwWjB0c2VIVkpRMjluVVVjMWJscEhPV3BKUnpGMldraFdjMXBXZUhWSlEyOW5VVWMxYUdKWFZXZGFiVmwxV201S2NGcFhOV3RVVnpsclpGZDRiRWxHZUhWSlEyOTJXRWMxYUdKdFpERmlSMFo1VEcweGRscElWbk5hVTJkdVdtMVpkVnB1U25CYVZ6VnJWRmM1YTJSWGVHeEtlWGRuVnpFd2NGaEhOR2RKUTBGblRHMU9kbUp0V25CYWVXaDVXbGhHTVdGWVNteExRMk4xVERKYWJVeHRXbmxoVjFaMVdrTTFlV0l6VmpCYVdFMTFZVzVOYmt0VGJHTmlhVUZuU1VOQmRWcHRSbXBrUnpsNVpWTm9iV050Ykd4aWJWSlVXbGhLTW1GWFRteE1iVFZvWWxkVmMwbEhXbmxoVjFaMVdrWk9iR051V25CWk1sVjFZekpXZVdSdGJHcGFVMnhqWW1sQlowbERRWFZaTWpsMVpFaEtkbUpIZUd4amFXaHRZMjFzYkdKdFVrUmlNalV3WTIwNWMySkhWbmxNYlRWb1lsZFZjMGxIV25saFYxWjFXa1ZPZG1KdVVubGlNbmh6V2xoSmRWa3lPWFZrU0VwMllrZDRiR05wYkdOaWFVcGtabEU5UFZ4dUx5OGpJSE52ZFhKalpWVlNURDB2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpuSnBaVzVrTDJabUxtWnlhV1Z1WkM1aGNIQXVhbk1pWFgwPVxuLy8jIHNvdXJjZVVSTD0vVXNlcnMvcmFmYWVsZmVybmFuZGVzL1Byb2plY3RzL2ZpdC1mYWNlYm9vay93d3cvcHVibGljL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC5hcHAuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZmZGcmllbmRDb250cm9sbGVyKCRzY29wZSwgZmZGcmllbmRTZXJ2aWNlKSB7XG4gIHZhciB2bSA9IHRoaXM7XG4gIGZmRnJpZW5kU2VydmljZS5saXN0KGxvYWRGcmllbmRzKTtcbiAgZnVuY3Rpb24gbG9hZEZyaWVuZHMoZnJpZW5kcykge1xuICAgIGRlYnVnZ2VyO1xuICAgIHZtLmZyaWVuZHMgPSBmcmllbmRzO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnZmZGcmllbmRTZXJ2aWNlJywgZmZGcmllbmRDb250cm9sbGVyXSxcbiAgbmFtZTogJ2ZmRnJpZW5kQ29udHJvbGxlcidcbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV1p5YVdWdVpDOW1aaTVtY21sbGJtUXVZMjl1ZEhKdmJHeGxjaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdaeWFXVnVaQzltWmk1bWNtbGxibVF1WTI5dWRISnZiR3hsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVGQkxGZEJRVmNzUTBGQlF6dEJRVU5hTEU5QlFWTXNiVUpCUVdsQ0xFTkJRVVVzVFVGQlN5eERRVUZITEVOQlFVRXNaVUZCWXl4RFFVRkhPMEZCUTI1RUxFRkJRVWtzU1VGQlFTeERRVUZCTEVWQlFVTXNSVUZCU1N4TFFVRkhMRU5CUVVNN1FVRkRZaXhuUWtGQll5eExRVUZMTEVGQlFVTXNRMEZCUXl4WFFVRlZMRU5CUVVNc1EwRkJRenRCUVVOcVF5eFRRVUZUTEZsQlFWVXNRMEZCUlN4UFFVRk5MRU5CUVVjN1FVRkROVUlzV1VGQlVUdEJRVU5TTEV0QlFVTXNVVUZCVVN4RlFVRkpMRkZCUVUwc1EwRkJRenRGUVVOMFFqdEJRVUZCTEVGQlEwWTdRVUZCUVN4QlFVTkJMRXRCUVVzc1VVRkJVU3hGUVVGSk8wRkJRMllzVjBGQlV5eERRVUZITEVWQlFVTXNVVUZCVHl4RFFVRkhMR3RDUVVGblFpeERRVUZITEcxQ1FVRnBRaXhEUVVGRE8wRkJRelZFTEV0QlFVY3NRMEZCUnl4eFFrRkJiVUk3UVVGQlFTeEJRVU16UWl4RFFVRkRPMEZCUnpaSElpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMW1jbWxsYm1Rdklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNW1kVzVqZEdsdmJpQm1aa1p5YVdWdVpFTnZiblJ5YjJ4c1pYSW9KSE5qYjNCbExDQm1aa1p5YVdWdVpGTmxjblpwWTJVcElIdGNiaUFnZG1GeUlIWnRJRDBnZEdocGN6dGNiaUFnWm1aR2NtbGxibVJUWlhKMmFXTmxMbXhwYzNRb2JHOWhaRVp5YVdWdVpITXBPMXh1SUNCbWRXNWpkR2x2YmlCc2IyRmtSbkpwWlc1a2N5aG1jbWxsYm1SektTQjdYRzRnSUNBZ1pHVmlkV2RuWlhJN1hHNGdJQ0FnZG0wdVpuSnBaVzVrY3lBOUlHWnlhV1Z1WkhNN1hHNGdJSDFjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JqYjI1MGNtOXNiR1Z5T2lCYkp5UnpZMjl3WlNjc0lDZG1aa1p5YVdWdVpGTmxjblpwWTJVbkxDQm1aa1p5YVdWdVpFTnZiblJ5YjJ4c1pYSmRMRnh1SUNCdVlXMWxPaUFuWm1aR2NtbGxibVJEYjI1MGNtOXNiR1Z5SjF4dWZUdGNibHh1THk4aklITnZkWEpqWlUxaGNIQnBibWRWVWt3OVpHRjBZVHBoY0hCc2FXTmhkR2x2Ymk5cWMyOXVPMkpoYzJVMk5DeGxlVW95V2xoS2VtRlhPWFZKYW05NlRFTktiV0ZYZUd4SmFtOXBUREZXZWxwWVNucE1NMHBvV20xR2JHSkhXbXhqYlRWb1ltMVNiR041T1ZGamJUbHhXbGRPTUdONU9XMWhXRkYwV20xR2FscFhTblppTW5OMlpETmtNMHd6UWpGWmJYaHdXWGs1ZEdJeVVqRmlSMVo2VERKYWJVeFhXbmxoVjFaMVdrTTViVnBwTlcxamJXeHNZbTFSZFZreU9YVmtTRXAyWWtkNGJHTnBOWEZqZVVselNXNU9kbVJZU21wYVdFMXBUMnh6YVV3eFZucGFXRXA2VEROS2FGcHRSbXhpUjFwc1kyMDFhR0p0VW14amVUbFJZMjA1Y1ZwWFRqQmplVGx0WVZoUmRGcHRSbXBhVjBwMllqSnpkbVF6WkROTU0wSXhXVzE0Y0ZsNU9YUmlNbEl4WWtkV2Vrd3lXbTFNVjFwNVlWZFdkVnBET1cxYWFUVnRZMjFzYkdKdFVYVlpNamwxWkVoS2RtSkhlR3hqYVRWeFkzbEtaRXhEU25WWlZ6RnNZM2xKTmxjeE1ITkpiVEZvWTBoQ2NHSnRaSHBKYW05cFVWVkdVbEZVZEVKUlZVWkNURVU1UWxGV1RYTmlWVXBDVVZkc1EweEZUa0pSVlZWelZGVkdRbE41ZUVSUlZVWklURVZPUWxGVlJYTmFWVVpDV1hsNFJGRlZSa2hQTUVaQ1VUSTFSVXhGUmtKUlZXdHpVMVZHUWxGVGVFUlJWVVpDVEVWV1FsRlZUWE5TVlVaQ1UxTjRURkZWUmtoTVJVNUNVVlZOTjFGVlJrUlphWGh1VVd0R1FsbDVlRXhSVlVaTVRFVkdRbEZWVFhOUk1FWkNVWGw0V0ZGVlJsWk1SVTVDVVZWTmMxRXdSa0pSZW5SQ1VWVldjVkY1ZUZSUlZVWlVURVpzUWxGV1ZYTlJNRVpDVWxONFVGRlZSazVNUlU1Q1VWVlZOMUZWUmtSTk1FbHpWMVZHUWxWVWRFSlJWVTVUVEVWMFFsRlZUWE5WVlVaQ1ZWTjRSbEZWUmtwTVJrWkNVVlV3YzFFd1JrSlJlblJHVVZWT01GRnFkRUpSVlVaQ1RFVkdRbEV3V1RkUlZVWkNVVk40UWxGVlZrSk1SWFJDVVZWemMxVlZSa0pWVTNoR1VWVkdTRTh3UmtKUk1sRnpWakJHUWxWNWVFUlJWVVpHVEVWV1FsRlZUWE5WVlVaQ1ZIbDRSRkZWUmtoTVIzUkRVVlZHYmxGcGVFUlJWVVpJVEVjeFExRlZSbkJSYVhoRVVWVkdSRTh3UmtKUmVrNUZURVYwUWxGVlkzTlJNRVpDVW5sNGVGRnJSa0ppVlVrM1VWVkdRbEZUZUVKUlZVMTZVV2w0UkZGVlJrSlBNRVpDVVRCRmFVeERTbnBpTTFaNVdUSldVMkl5T1RCSmFtOXBUREZXZWxwWVNucE1NMHBvV20xR2JHSkhXbXhqYlRWb1ltMVNiR041T1ZGamJUbHhXbGRPTUdONU9XMWhXRkYwV20xR2FscFhTblppTW5OMlpETmtNMHd6UWpGWmJYaHdXWGs1ZEdJeVVqRmlSMVo2VERKYWJVeFhXbmxoVjFaMVdrTTRhVXhEU25waU0xWjVXVEpXZWxFeU9YVmtSMVoxWkVOSk5sZDVTWFpMYVhCalltbEJjVWxGVG5aaWJsSjVZako0ZWtsSVVtOWFVMEp0WTIxc2JHSnRVbnBKU0Zwd1dsaGpkVmhITkdkTGJIaDFTVU52WjFGSE5XNWFSemxxU1VkU2NHTnRWbXBrUjJ3eVdsWjRkVWxEYjJkUlJ6Vm9ZbGRWWjFwdFdYVmFia3B3V2xjMWExUlhPV3RrVjNoc1NUSmFiVkp1U25CYVZ6VnJVVEk1ZFdSSVNuWmlSM2hzWTJ4NGRVbERiMmRSUnpGc1lsZEtiR05yT1cxSlIxcHRURzFhZVdGWFZuVmFSVEYyV2toV2MxcFdlSFZKUTI5blVVaEtiR05ZVm5CamJWWjZTVU5TZWxreU9YZGFVM2RuV20xYVIyTnRiR3hpYlZKVVdsaEtNbUZYVG14WVJ6Um5TMms1WTJKdFdqRmliVTR3WVZjNWRVbEhXbTFTYmtwd1dsYzFhMUV5T1hWa1NFcDJZa2Q0YkdOcFoydGpNazUyWTBkVmMwbEhXbTFTYmtwd1dsYzFhMVV5Vm5sa2JXeHFXbE5yWjJVeGVIVkpRMEl5V1ZoSloyUnRNR2RRVTBJd1lVZHNlazk1UW1OaWFVRm5XbTFhUjJOdGJHeGliVkpVV2xoS01tRlhUbXhNYlhod1l6TlJiMkpIT1doYVJWcDVZVmRXZFZwSVRYQlBNWGgxV0VjMFowbEhXakZpYlU0d1lWYzVkVWxIZUhaWlYxSkhZMjFzYkdKdFVucExSMXA1WVZkV2RWcElUWEJsTVhoMVNVTkJaMGxIVW14WmJsWnVXakpXZVU4eGVIVkpRMEZuU1VoYWRFeHRXbmxoVjFaMVdraE5aMUJUUW0xamJXeHNZbTFTZWs4eGVIVkpRMEk1V0VjMU9WaEhOV05pYlRGMldraFdjMXBUTld4bFNFSjJZMjVTZWtsRU1UZFlSelJuU1VkT2RtSnVVbmxpTW5oeldsaEpObGQ1WTJ0ak1rNTJZMGRWYmt4RFFXNWFiVnBIWTIxc2JHSnRVbFJhV0VveVlWZE9iRXA1ZDJkYWJWcEhZMjFzYkdKdFVrUmlNalV3WTIwNWMySkhWbmxZVTNoalltbEJaMkp0Um5SYVZHOW5TakphYlZKdVNuQmFWelZyVVRJNWRXUklTblppUjNoc1kybGtZMkp1TVdOaWFVcGtabEU5UFZ4dUx5OGpJSE52ZFhKalpWVlNURDB2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpuSnBaVzVrTDJabUxtWnlhV1Z1WkM1amIyNTBjbTlzYkdWeUxtcHpJbDE5XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1mcmllbmQvZmYuZnJpZW5kLmNvbnRyb2xsZXIuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgJHJvdXRlUHJvdmlkZXIud2hlbignL2ZyaWVuZHMnLCB7XG4gICAgY29udHJvbGxlcjogJ2ZmRnJpZW5kQ29udHJvbGxlciBhcyB2bScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL21vZHVsZXMvZmYtZnJpZW5kL2ZmLmZyaWVuZC50bXBsLmh0bWwnXG4gIH0pO1xufV07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MV1p5YVdWdVpDOW1aaTVtY21sbGJtUXVjbTkxZEdWekxtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRabkpwWlc1a0wyWm1MbVp5YVdWdVpDNXliM1YwWlhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGQlFTeFhRVUZYTEVOQlFVTTdRVUZEV2l4TFFVRkxMRkZCUVZFc1JVRkJTU3hGUVVGRExHZENRVUZsTEVOQlFVY3NWVUZCVXl4alFVRmhMRU5CUVVjN1FVRkRNMFFzWlVGQllTeExRVUZMTEVGQlFVTXNRMEZCUXl4VlFVRlRMRU5CUVVjN1FVRkRPVUlzWVVGQlV5eERRVUZITERKQ1FVRjVRanRCUVVOeVF5eGpRVUZWTEVOQlFVY3NNRU5CUVhkRE8wRkJRVUVzUlVGRGRrUXNRMEZCUXl4RFFVRkRPMEZCUTBvc1EwRkJReXhEUVVGRE8wRkJSM2RISWl3aWMyOTFjbU5sVW05dmRDSTZJaTlWYzJWeWN5OXlZV1poWld4bVpYSnVZVzVrWlhNdlVISnZhbVZqZEhNdlptbDBMV1poWTJWaWIyOXJMM2QzZHk5d2RXSnNhV012Ylc5a2RXeGxjeTltWmkxbWNtbGxibVF2SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZzbkpISnZkWFJsVUhKdmRtbGtaWEluTENCbWRXNWpkR2x2Ymlna2NtOTFkR1ZRY205MmFXUmxjaWtnZTF4dUlDQWtjbTkxZEdWUWNtOTJhV1JsY2k1M2FHVnVLQ2N2Wm5KcFpXNWtjeWNzSUh0Y2JpQWdJQ0JqYjI1MGNtOXNiR1Z5T2lBblptWkdjbWxsYm1SRGIyNTBjbTlzYkdWeUlHRnpJSFp0Snl4Y2JpQWdJQ0IwWlcxd2JHRjBaVlZ5YkRvZ0p5NHZiVzlrZFd4bGN5OW1aaTFtY21sbGJtUXZabVl1Wm5KcFpXNWtMblJ0Y0d3dWFIUnRiQ2RjYmlBZ2ZTazdYRzU5WFR0Y2JseHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8ySmhjMlUyTkN4bGVVb3lXbGhLZW1GWE9YVkphbTk2VEVOS2JXRlhlR3hKYW05cFRERldlbHBZU25wTU0wcG9XbTFHYkdKSFdteGpiVFZvWW0xU2JHTjVPVkZqYlRseFdsZE9NR041T1cxaFdGRjBXbTFHYWxwWFNuWmlNbk4yWkROa00wd3pRakZaYlhod1dYazVkR0l5VWpGaVIxWjZUREphYlV4WFdubGhWMVoxV2tNNWJWcHBOVzFqYld4c1ltMVJkV050T1RGa1IxWjZURzF3ZWtscGQybGpNamt4WTIxT2JHTjVTVFpYZVVsMlZsaE9iR051VFhaamJVWnRXVmRXYzFwdFZubGliVVoxV2tkV2Vrd3hRbmxpTW5Cc1dUTlNla3d5V25Ca1F6RnRXVmRPYkZsdE9YWmhlVGt6WkROamRtTklWbWxpUjJ4cVRESXhkbHBJVm5OYVdFMTJXbTFaZEZwdVNuQmFWelZyVERKYWJVeHRXbmxoVjFaMVdrTTFlV0l6VmpCYVdFMTFZVzVOYVZoVGQybGliVVowV2xoTmFVOXNkR1JNUTBwMFdWaENkMkZYTlc1amVVazJTV3RHUWxaVlJUZFJWVVpDVVZONFRGRlZSa3hNUmtaQ1VWWkZjMUpWUmtKVFUzaEdVVlZHUkV4SFpFTlJWVVpzVEVWT1FsRlZZM05XVlVaQ1ZYbDRhbEZWUm1oTVJVNUNVVlZqTjFGVlJrUk5NRkZ6V2xWR1FsbFRlRXhSVlVaTVRFVkdRbEZWVFhOUk1FWkNVWGw0VmxGVlJsUk1SVTVDVVZWak4xRlZSa1JQVlVseldWVkdRbFY1ZUVSUlZVWktURVJLUTFGVlJqVlJhblJDVVZWT01GRjVlR3BSVlVaV1RFVk9RbEZWYTNOTlJVNUNVVmhrUkU4d1JrSlJWVVZ6VWxWR1JHVkZVWE5STUVaQ1VYbDRSRkZWUmtSUE1FWkNVVEJ2YzFFd1JrSlJlWGhFVVZWR1FrOHdSa0pSTUZGcFRFTktlbUl6Vm5sWk1sWlRZakk1TUVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGZGFlV0ZYVm5WYVF6aHBURU5LZW1JelZubFpNbFo2VVRJNWRXUkhWblZrUTBrMlYzbEpka3RwY0dOaWFVRnhTVVpLZG1SWVVteGplVUl3WW5sQ2JtSjVRakJpZVVKdFkyMXNiR0p0VW5wSlJuaDFTVU53WTJKcFFYRkpSVUoxV2pKU2RsbDVRblJhV0ZKdllqSlNZMkpwUVhGSlJVSjFXVmN4YkVsSFdtMU1iVkpvWXpKb2FXSXlSbmxhUlRGMldraFdjMXBUVG1waU1qVnRZVmRrWTJKcFFYRkpSVUpzWlVkR2RHTkhlR3hZUnpSblMybEJka3g1UWpGamJYZG5VRk5CYm1GSVVqQmpSRzkyVERJeE5XUXlWbWxqTW13d1dsTTFhbUl5TUhaSmVUbHRZMjFzYkdKdFVucEtNWGgxU1VOdloweDVPR2RqTW1oMlpGZDRhMGxIZUhaWlYxRm5aRWRvYkVsSFdubGhWMVoxV2toTloxa3lPWFZrU0VwMllrZDRiR05wUW1oaWJWRm5aRWRvYkVsSVVteGlXRUp6V1ZoU2JGaEhOR2RMYkhoMVNVTnZkbGhITlhSaU1sSXhZa2RWZFZwWWFIZGlNMG93WTNsQk9VbEdjMjVLU0VwMlpGaFNiRlZJU25aa2JXeHJXbGhKYmt4RFFtMWtWelZxWkVkc2RtSnBaMnRqYlRreFpFZFdVV050T1RKaFYxSnNZMmxyWjJVeGVIVkpRMEZyWTIwNU1XUkhWbEZqYlRreVlWZFNiR05wTlROaFIxWjFTME5qZGxwdVNuQmFWelZyWTNsamMwbElkR05pYVVGblNVTkNhbUl5TlRCamJUbHpZa2RXZVVsRWIyZEtNbHB0VW01S2NGcFhOV3RSTWpsMVpFaEtkbUpIZUd4amFVSm9ZM2xDTW1KVFkzTllSelJuU1VOQloyUkhWblJqUjNob1pFZFdWbU50ZDJkUGFVRnVUR2s1ZEdJeVVqRmlSMVo2VERKYWJVeFhXbmxoVjFaMVdrTTViVnBwTlcxamJXeHNZbTFSZFdSSE1YZGlRelZ2WkVjeGMwb3hlSFZKUTBJNVMxUjBZMkp1TVdSWVJ6UnBXRmd3UFZ4dUx5OGpJSE52ZFhKalpWVlNURDB2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdFpuSnBaVzVrTDJabUxtWnlhV1Z1WkM1eWIzVjBaWE11YW5NaVhYMD1cbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLWZyaWVuZC9mZi5mcmllbmQucm91dGVzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGZmRnJpZW5kU2VydmljZSgkaHR0cCwgJHJvb3RTY29wZSkge1xuICByZXR1cm4ge2xpc3Q6IGxpc3R9O1xuICBmdW5jdGlvbiBsaXN0KGZuU3VjY2VzcywgZm5FcnJvcikge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9mYWNlYm9vay8nICsgJHJvb3RTY29wZS51c2VySW5mby5pZCArICcvZnJpZW5kcycpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICBpZiAoZm5TdWNjZXNzKSB7XG4gICAgICAgIGZuU3VjY2VzcyhkYXRhKTtcbiAgICAgIH1cbiAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgIGlmIChmbkVycm9yKSB7XG4gICAgICAgIGZuRXJyb3IoZGF0YSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZygnZmZOZXdzU2VydmljZSBmYWlsZWQgdG8gZ2V0IGFjdGl2aXRpZXMnKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNlcnZpY2U6IFsnJGh0dHAnLCAnJHJvb3RTY29wZScsIGZmRnJpZW5kU2VydmljZV0sXG4gIG5hbWU6ICdmZkZyaWVuZFNlcnZpY2UnXG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdaeWFXVnVaQzltWmk1bWNtbGxibVF1YzJWeWRtbGpaUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFdaeWFXVnVaQzltWmk1bWNtbGxibVF1YzJWeWRtbGpaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVUZCTEZkQlFWY3NRMEZCUXp0QlFVTmFMRTlCUVZNc1owSkJRV01zUTBGQlJTeExRVUZKTEVOQlFVY3NRMEZCUVN4VlFVRlRMRU5CUVVjN1FVRkRNVU1zVDBGQlR5eEZRVUZETEVsQlFVY3NRMEZCUnl4TFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOdVFpeFRRVUZUTEV0QlFVY3NRMEZCUlN4VFFVRlJMRU5CUVVjc1EwRkJRU3hQUVVGTkxFTkJRVWM3UVVGRGFFTXNVMEZCVHl4RFFVRkJMRXRCUVVrc1NVRkJTU3hCUVVGRExFTkJRVU1zV1VGQlZ5eEZRVUZKTEVOQlFVRXNWVUZCVXl4VFFVRlRMRWRCUVVjc1EwRkJRU3hEUVVGSkxGZEJRVk1zUTBGQlF5eFJRVUZSTEVGQlFVTXNRMEZCUXl4VFFVRlRMRWxCUVVjc1EwRkJSeXhEUVVGQkxFMUJRVXNzUTBGQlJ5eERRVUZCTEU5QlFVMHNRMEZCUnp0QlFVTXpSeXhUUVVGSkxGTkJRVkVzUTBGQlJ6dEJRVU5pTEdkQ1FVRlJMRUZCUVVNc1EwRkJReXhKUVVGSExFTkJRVU1zUTBGQlF6dE5RVU5xUWp0QlFVRkJMRWxCUTBZc1EwRkJReXhOUVVGTkxFRkJRVU1zUTBGQlF5eFRRVUZUTEVsQlFVY3NRMEZCUnl4RFFVRkJMRTFCUVVzc1EwRkJSeXhEUVVGQkxFOUJRVTBzUTBGQlJ6dEJRVU4yUXl4VFFVRkpMRTlCUVUwc1EwRkJSenRCUVVOWUxHTkJRVTBzUVVGQlF5eERRVUZETEVsQlFVY3NRMEZCUXl4RFFVRkRPMDFCUTJZN1FVRkJRU3hCUVVOQkxGbEJRVTBzU1VGQlNTeEJRVUZETEVOQlFVTXNkME5CUVhWRExFTkJRVU1zUTBGQlF6dEpRVU4yUkN4RFFVRkRMRU5CUVVNN1JVRkRTanRCUVVGQkxFRkJRMFk3UVVGQlFTeEJRVU5CTEV0QlFVc3NVVUZCVVN4RlFVRkpPMEZCUTJZc1VVRkJUU3hEUVVGSExFVkJRVU1zVDBGQlRTeERRVUZITEdGQlFWY3NRMEZCUnl4blFrRkJZeXhEUVVGRE8wRkJRMmhFTEV0QlFVY3NRMEZCUnl4clFrRkJaMEk3UVVGQlFTeEJRVU40UWl4RFFVRkRPMEZCUnpCSElpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMW1jbWxsYm1Rdklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNW1kVzVqZEdsdmJpQm1aa1p5YVdWdVpGTmxjblpwWTJVb0pHaDBkSEFzSUNSeWIyOTBVMk52Y0dVcElIdGNiaUFnY21WMGRYSnVJSHRzYVhOME9pQnNhWE4wZlR0Y2JpQWdablZ1WTNScGIyNGdiR2x6ZENobWJsTjFZMk5sYzNNc0lHWnVSWEp5YjNJcElIdGNiaUFnSUNCeVpYUjFjbTRnSkdoMGRIQXVaMlYwS0NjdlptRmpaV0p2YjJzdkp5QXJJQ1J5YjI5MFUyTnZjR1V1ZFhObGNrbHVabTh1YVdRZ0t5QW5MMlp5YVdWdVpITW5LUzV6ZFdOalpYTnpLR1oxYm1OMGFXOXVLR1JoZEdFc0lITjBZWFIxY3l3Z2FHVmhaR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1p1VTNWalkyVnpjeWtnZTF4dUlDQWdJQ0FnSUNCbWJsTjFZMk5sYzNNb1pHRjBZU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2t1WlhKeWIzSW9ablZ1WTNScGIyNG9aR0YwWVN3Z2MzUmhkSFZ6TENCb1pXRmtaWEp6S1NCN1hHNGdJQ0FnSUNCcFppQW9abTVGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0JtYmtWeWNtOXlLR1JoZEdFcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlptVG1WM2MxTmxjblpwWTJVZ1ptRnBiR1ZrSUhSdklHZGxkQ0JoWTNScGRtbDBhV1Z6SnlrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0J6WlhKMmFXTmxPaUJiSnlSb2RIUndKeXdnSnlSeWIyOTBVMk52Y0dVbkxDQm1aa1p5YVdWdVpGTmxjblpwWTJWZExGeHVJQ0J1WVcxbE9pQW5abVpHY21sbGJtUlRaWEoyYVdObEoxeHVmVHRjYmx4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LYldGWGVHeEphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYV25saFYxWjFXa001YlZwcE5XMWpiV3hzWW0xUmRXTXlWbmxrYld4cVdsTTFjV041U1hOSmJrNTJaRmhLYWxwWVRXbFBiSE5wVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYV25saFYxWjFXa001YlZwcE5XMWpiV3hzWW0xUmRXTXlWbmxrYld4cVdsTTFjV041U21STVEwcDFXVmN4YkdONVNUWlhNVEJ6U1cweGFHTklRbkJpYldSNlNXcHZhVkZWUmxKUlZIUkNVVlZHUWt4Rk9VSlJWazF6V2pCS1FsRlhUWE5STUVaQ1VsTjRURkZWUmtwTVJVNUNVVlZqYzFFd1JrSlJVM2hXVVZWR1ZFeEZUa0pSVldNM1VWVkdSRTFWVFhOVU1FWkNWSGw0UmxGVlRrMU1SV3hDVVZWamMxRXdSa0pTZVhoTVVWVkdTRXhGVGtKUk1XZHpVVEJHUWxGVWRFSlJWMFpDVEVaT1FsRldUWE5UTUVaQ1VubDRSRkZWUmtaTVJrNUNVVlpGYzFFd1JrSlNlWGhFVVZWR1FreEZPVUpSVlRCelVUQkdRbEpVZEVKUlZVMTJVV2w0VkZGVlJsQk1SVTVDVVZWRmMxTXdSa0pUVTNoS1VWVkdTa3hGUmtKUlZVMXpVVEJHUWxGNWVGcFJWVVpZVEVWV1FsRlZhM05STUVaQ1VWTjRWbEZWUmxSTVJrNUNVVlpOYzFJd1JrSlNlWGhFVVZWR1FreEZUa0pSVld0elZqQkdRbFY1ZUVSUlZVWkVURVpHUWxGNlJrVk1SVVpDVVZWTmMxRXdSa0pSZVhoVVVWVkdWRXhGYkVKUlZXTnpVVEJHUWxKNWVFUlJWVVpDVEVVeFFsRlZjM05STUVaQ1VubDRSRkZWUmtKTVJUbENVVlV3YzFFd1JrSlNlblJDVVZWT01sRjVlRlJSVlVaS1RFWk9RbEZXUlhOUk1FWkNVbFIwUWxGVlRtRk1SMlJEVVZWR1VreEZSa0pSVlUxelVUQkdRbEY1ZUVwUlZVWklURVZPUWxGVlRYTlJNRVpDVVhwMFRsRlZUbkZSYW5SQ1VWVkdRa3hGYkVKUk1GbHpVVEJHUWxGNWVFNVJWVTVLVEVWR1FsRlZUWE5STUVaQ1VYbDRWRkZWUmxSTVJXeENVVlZqYzFFd1JrSlNlWGhFVVZWR1FreEZNVUpSVlhOelVUQkdRbEo1ZUVSUlZVWkNURVU1UWxGVk1ITlJNRVpDVW5wMFFsRlZUbmxSZVhoVVVWVkdTa3hGT1VKUlZUQnpVVEJHUWxKVWRFSlJWVTVYVEVkT1FsRlZNSE5SVlVaQ1VYbDRSRkZWUmtSTVJXeENVVlZqYzFFd1JrSlJlWGhFVVZWR1JFOHdNVUpSTWxrM1VWVkdRbEZUZUVKUlZVNUNURVpzUWxGVk1ITlRWVVpDVTFONFFsRlZSa1JNUlU1Q1VWVk5jMlF3VGtKUldGWkVURVZPUWxGVlRYTlJNRVpDVVhwMFNsRlZUakpTUTNoRVVWVkdSRXhGVGtKUlZVMDNVbFZHUkZScWRFSlJWVVpDVEVWR1FsRXdXVGRSVlVaQ1VWTjRRbEZWVmtKTVJYUkNVVlZ6YzFWVlJrSlZVM2hHVVZWR1NrOHdSa0pSTW1oRFRFWkdRbEZWTUhOUk1FWkNVbmw0UmxGVlJrUk1SVGxDVVZVd2MxRXdSa0pTVTNob1VWVkdXRXhGVGtKUlZXTnpXakJLUWxGWFRYTlJNRVpDVVhwMFFsRlZUWFpSZVhoTVVWVkdTRXhGVGtKUlZXTnpZVEJLUWxGWFpFTlBNRVpDVVZWRmMxRlZSa1JrYTBselVUQkdRbEZVZEVKUlZVNUNTV2wzYVdNeU9URmpiVTVzVlcwNWRtUkRTVFpKYVRsV1l6SldlV041T1hsWlYxcG9XbGQ0YlZwWVNuVlpWelZyV2xoTmRsVklTblpoYlZacVpFaE5kbHB0YkRCTVYxcG9XVEpXYVdJeU9YSk1NMlF6WkhrNWQyUlhTbk5oVjAxMllsYzVhMlJYZUd4amVUbHRXbWt4YldOdGJHeGliVkYyU1dsM2FXTXlPVEZqYlU1c1l6Qk9kbUp1VW14aWJsRnBUMnh6YVV4NWIzRllSelJuUzJsQ1UxcFlUbmRpTWpWNllWZEtjMXBUUW0xaU0wbG5XbTVLY0ZwWE5XdGplVUp3WW0xYWRtTnRNV2hrUjJ4MllteDRkVWxEY0dOaWFVRnhTVVZDZFZveVVuWlplVUo2V2xoS01tRlhUbXhZUnpSblMybENRV0p0Um5SYVUwSnRXbXRhZVdGWFZuVmFSazVzWTI1YWNGa3lWbU5pYVVGeFNVVkNkRnBYTVdsYVdFcFFXbWxDYlZwcE5XMWpiV3hzWW0xU1RtSXlVakZpUjFaalltbEJjVWxGUW5sYVdFWXhZVmhLYkdONVFXdGhTRkl3WTBaNGRVbERiM1pZUnpWdFpGYzFhbVJIYkhaaWFVSnRXbXRhZVdGWFZuVmFSazVzWTI1YWNGa3lWVzlLUjJnd1pFaEJjMGxEVW5saU1qa3dWVEpPZG1OSFZYQkpTSFJqWW1sQloyTnRWakJrV0VwMVNVaDBZMkpwUVdkSlEwSnpZVmhPTUU5cFFuTmhXRTR3V0VjMFowbElNV05pYkhoMVNVTkJka3RwY0dOaWFVRm5TVU52WjFWdFZqQmpiV3hzWkcxVloyUkhhR3hKUjNod1l6TlJaMkl5V1dkYWJrcHdXbGMxYTJONU5XTmlhVUZuU1VOd1kySnBRV2RKUTI5blVVYzFibHBIT1dwSlJ6RnNaRWRvZGxwRFFtTmlhVUZuU1VOdloxRkhNV3hrUjJoMldrVTViVWxIV20xU2JrcHdXbGMxYTFVeVZubGtiV3hxV2xaNGRVbERRV2RMYVVKQlltMUdkRnBUUW0xYWFUVnRZMjFzYkdKdFVrNWlNbEl4WWtkVmRWcHRXa2RqYld4c1ltMVNWRnBZU2pKaFYwNXNTVEo0Y0dNelVXZEpSbmgxU1VOQlowdHBRa0ZqUjBaNVdWY3daMlV5V2pGaWJVNHdZVmM1ZFdaVFFtMWliRTR4V1RKT2JHTXpUV2RTV0doc1dUTldNRnBZVFdka01taHNZbWxDZW1SWFRtcGFXRTU2V201V2MySklhMmRqYlZZd1kyMXNiR1J0Vm5wWVJ6Um5TVU5CY1VsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5aRWRvYkVsSGVIQmpNMUZuWWpKWloxcHVTbkJhVnpWclkzbENlVnBYVG14aFdGcHdZbTFqWjJSSGFHeEpTRXBzWXpOV2MyUkROV05pYVVGblNVTnZaMUZJUW1oamJVWjBTVWgwYldSWE5XcGtSMngyWW00d1oxcHROVVpqYmtwMlkybENSbVZIVm1wa1dGSnNZM2xDTTJGSFZuVkpSMXBvWVZkM1oyUkhPR2RqYlZZd1kyMXNiR1J0Vm1OaWFVRm5TVU52WjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSXdZVWRWWjJKSGJIcGtRMEoyV21sQ2JXTnRiR3hpYlZKNlNVaEtiRmt5Vm5Ca2JXeDFXbmxDTUdGSFZXZGFXRXA1WWpOSloxcEhSakJaVTBKMldXMXdiRmt6VVdkYWJrcDJZbE5DTUdGSFZXZFpiVVpxWVRKV2RWcEROV05pYVVGblNVTnZkbGhITkdkSlIxb3hZbTFPTUdGWE9YVkpSM2h3WXpOUmIxcHROVlJrVjA1cVdsaE9la3hEUW0xaWExWjVZMjA1ZVV0WWRHTmlhVUZuU1VOQ2VWcFlVakZqYlRSblNrZG9NR1JJUVhWYU1sWXdTME5qZGxwdFJtcGFWMHAyWWpKemRrcDVRWEpKUTFKNVlqSTVNRlV5VG5aalIxVjFaRmhPYkdOcmJIVmFiVGgxWVZkUlowdDVRVzVNTWxwNVlWZFdkVnBJVFc1TFZuaDFTVU5CWjBsRFFXZE1iazR4V1RKT2JHTXpUVzlhYmxaMVdUTlNjR0l5Tkc5YVIwWXdXVk4zWjJNelVtaGtTRlo2VEVOQ2IxcFhSbXRhV0VwNlMxTkNOMWhITkdkSlEwRm5TVU5CWjBsSGJHMUpRMmh0WW14T01Wa3lUbXhqTTAxd1pURjRkVWxEUVdkSlEwRm5TVU5CWjBsSFduVlZNMVpxV1RKV2VtTjVhR3RaV0ZKb1MxUjBZMkpwUVdkSlEwRm5TVU5CWjJaV2VIVkpRMEZuU1VOQloyWlRiR05pYVVGblNVTkJaMGxETld4amJrcDJZMmxvYldSWE5XcGtSMngyWW1sb2ExbFlVbWhNUTBKNlpFZEdNR1JZVFhOSlIyaHNXVmRTYkdOdVRYQkpTSFJqWW1sQlowbERRV2RKUTBGbllWZFpaMHRIV25WU1dFcDVZak5KY0dVeGVIVkpRMEZuU1VOQlowbERRV2RKUjFwMVVsaEtlV0l6U1c5YVIwWXdXVk5yTjFoSE5HZEpRMEZuU1VOQlowbElNV05pYVVGblNVTkJaMGxEUVdkWk1qbDFZekk1YzFwVE5YTmlNbU52U2pKYWJWUnRWak5qTVU1c1kyNWFjRmt5VldkYWJVWndZa2RXYTBsSVVuWkpSMlJzWkVOQ2FGa3pVbkJrYld3d1lWZFdla3A1YXpkWVJ6Um5TVU5CWjBsRFFqbExWSFJqWW1sQloyWldlSFZtVm5oMVdFYzFkR0l5VWpGaVIxVjFXbGhvZDJJelNqQmplVUU1U1VoMFkySnBRbnBhV0VveVlWZE9iRTlwUW1KS2VWSnZaRWhTZDBwNWQyNUtTRXAyWWpOU1ZGa3lPWGRhVTJOelNVZGFiVkp1U25CYVZ6VnJWVEpXZVdSdGJHcGFWakJ6V0VjMFoySnRSblJhVkc5blNqSmFiVkp1U25CYVZ6VnJWVEpXZVdSdGJHcGFVMlJqWW00eFkySnBTbVJtVVQwOVhHNHZMeU1nYzI5MWNtTmxWVkpNUFM5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMW1jbWxsYm1RdlptWXVabkpwWlc1a0xuTmxjblpwWTJVdWFuTWlYWDA9XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1mcmllbmQvZmYuZnJpZW5kLnNlcnZpY2UuanMiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIHN0cmljdFwiO1xudmFyIG5ld3NGZWVkID0gcmVxdWlyZSgnLi9mZi5uZXdzLmZlZWQuZGlyZWN0aXZlLmpzJyk7XG52YXIgbmV3c1Bvc3QgPSByZXF1aXJlKCcuL2ZmLm5ld3MucG9zdC5kaXJlY3RpdmUuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdmZi5uZXdzTW9kdWxlJywgWydmZi5jb3JlTW9kdWxlJ10pLmZhY3RvcnkoJ2ZmTmV3c1NlcnZpY2UnLCByZXF1aXJlKCcuL2ZmLm5ld3Muc2VydmljZS5qcycpKS5kaXJlY3RpdmUobmV3c0ZlZWQubmFtZSwgbmV3c0ZlZWQuZGlyZWN0aXZlKS5jb250cm9sbGVyKG5ld3NGZWVkLmNvbnRyb2xsZXJOYW1lLCBuZXdzRmVlZC5jb250cm9sbGVyKS5kaXJlY3RpdmUobmV3c1Bvc3QubmFtZSwgbmV3c1Bvc3QuZGlyZWN0aXZlKS5jb250cm9sbGVyKG5ld3NQb3N0LmNvbnRyb2xsZXJOYW1lLCBuZXdzUG9zdC5jb250cm9sbGVyKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012Wm1ZdWJtVjNjeTVoY0hBdWFuTWlMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMXVaWGR6TDJabUxtNWxkM011WVhCd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBGQlFVRXNWMEZCVnl4RFFVRkRPMEZCUTFvc1FVRkJTU3hGUVVGQkxFTkJRVUVzVVVGQlR5eEZRVUZKTEVOQlFVRXNUMEZCVFN4QlFVRkRMRU5CUVVNc05rSkJRVFJDTEVOQlFVTXNRMEZCUXp0QlFVTnlSQ3hCUVVGSkxFVkJRVUVzUTBGQlFTeFJRVUZQTEVWQlFVa3NRMEZCUVN4UFFVRk5MRUZCUVVNc1EwRkJReXcyUWtGQk5FSXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxFMUJRVTBzVDBGQlR5eEJRVUZETEVOQlFVTXNaVUZCWXl4RFFVRkhMRVZCUVVNc1pVRkJZeXhEUVVGRExFTkJRVU1zVVVGQlVTeEJRVUZETEVOQlFVTXNaVUZCWXl4RFFVRkhMRU5CUVVFc1QwRkJUU3hCUVVGRExFTkJRVU1zYzBKQlFYRkNMRU5CUVVNc1EwRkJReXhWUVVGVkxFRkJRVU1zUTBGQlF5eFJRVUZQTEV0QlFVc3NRMEZCUnl4RFFVRkJMRkZCUVU4c1ZVRkJWU3hEUVVGRExGZEJRVmNzUVVGQlF5eERRVUZETEZGQlFVOHNaVUZCWlN4RFFVRkhMRU5CUVVFc1VVRkJUeXhYUVVGWExFTkJRVU1zVlVGQlZTeEJRVUZETEVOQlFVTXNVVUZCVHl4TFFVRkxMRU5CUVVjc1EwRkJRU3hSUVVGUExGVkJRVlVzUTBGQlF5eFhRVUZYTEVGQlFVTXNRMEZCUXl4UlFVRlBMR1ZCUVdVc1EwRkJSeXhEUVVGQkxGRkJRVThzVjBGQlZ5eERRVUZETEVOQlFVTTdRVUZIY2s0aUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1MllYSWdibVYzYzBabFpXUWdQU0J5WlhGMWFYSmxLQ2N1TDJabUxtNWxkM011Wm1WbFpDNWthWEpsWTNScGRtVXVhbk1uS1R0Y2JuWmhjaUJ1WlhkelVHOXpkQ0E5SUhKbGNYVnBjbVVvSnk0dlptWXVibVYzY3k1d2IzTjBMbVJwY21WamRHbDJaUzVxY3ljcE8xeHVZVzVuZFd4aGNpNXRiMlIxYkdVb0oyWm1MbTVsZDNOTmIyUjFiR1VuTENCYkoyWm1MbU52Y21WTmIyUjFiR1VuWFNrdVptRmpkRzl5ZVNnblptWk9aWGR6VTJWeWRtbGpaU2NzSUhKbGNYVnBjbVVvSnk0dlptWXVibVYzY3k1elpYSjJhV05sTG1wekp5a3BMbVJwY21WamRHbDJaU2h1WlhkelJtVmxaQzV1WVcxbExDQnVaWGR6Um1WbFpDNWthWEpsWTNScGRtVXBMbU52Ym5SeWIyeHNaWElvYm1WM2MwWmxaV1F1WTI5dWRISnZiR3hsY2s1aGJXVXNJRzVsZDNOR1pXVmtMbU52Ym5SeWIyeHNaWElwTG1ScGNtVmpkR2wyWlNodVpYZHpVRzl6ZEM1dVlXMWxMQ0J1WlhkelVHOXpkQzVrYVhKbFkzUnBkbVVwTG1OdmJuUnliMnhzWlhJb2JtVjNjMUJ2YzNRdVkyOXVkSEp2Ykd4bGNrNWhiV1VzSUc1bGQzTlFiM04wTG1OdmJuUnliMnhzWlhJcE8xeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGYzFiR1F6VFhaYWJWbDFZbTFXTTJONU5XaGpTRUYxWVc1TmFVeERTbnBpTTFaNVdUSldla2xxY0dKSmFUbFdZekpXZVdONU9YbFpWMXBvV2xkNGJWcFlTblZaVnpWcldsaE5kbFZJU25aaGJWWnFaRWhOZGxwdGJEQk1WMXBvV1RKV2FXSXlPWEpNTTJRelpIazVkMlJYU25OaFYwMTJZbGM1YTJSWGVHeGplVGx0V21reGRWcFlaSHBNTWxwdFRHMDFiR1F6VFhWWldFSjNURzF3ZWtsc01ITkpiVFZvWWxkV2VrbHFjR0pZVTNkcFlsZEdkMk5IYkhWYU0wMXBUMmxLUWxGVlJrSlBNRVpDVVZWRmMxRlZSa0pUVTNoR1VWVkdRa3hGVGtKUlZVVnpWVlZHUWxSNWVFWlJWVVpLVEVWT1FsRlZSWE5VTUVaQ1ZGTjRRbEZWUmtSTVJVNUNVVlZOYzA1clNrSlJWRkpEVEVWT1FsRlZUWE5STUVaQ1VYcDBRbEZWVG5sU1EzaENVVlZHU2t4RlZrSlJWVVZ6VVRCR1FsRlRlRkpSVlVaUVRFVldRbEZWYTNOUk1FWkNVVk40VUZGVlJrNU1SVVpDVVZWTmMxRXdSa0pSZVhjeVVXdEdRazVGU1hOUk1FWkNVWGw0UkZGVlJrUlBNRVpDVlZoS1JVeEZNVUpSVlRCelZEQkdRbFI1ZUVKUlZVWkVURVZPUWxGVlRYTmFWVVpDV1hsNFJGRlZSa2hNUlZaQ1VWVk5jMXBWUmtKWmVYaEVVVlZHUkV4RlRrSlJWVTF6VlZWR1JHSnJUWE5SVlVaQ1VYbDRSRkZWUmtSTVIxWkNVVmROYzFFd1JrSlNlWGhFVVZWR1FreEZPVUpSVlRCelVWVkdRbEY1ZUVSUlZVWkVURWhPUTFGVlJuaFJhWGhFVVZWR1JFeEZUa0pSVlUxelZsVkdSR0ZGVVhOUlZVWkNVWGw0UkZGVlJrUk1Sa1pDVVZVNGMxTXdSa0pUZVhoRVVWVkdTRXhGVGtKUlZVVnpWVlZHUWxSNWVGWlJWVVpXVEVWT1FsRlZUWE5XTUVaRVlrVk5jMUZWUmtKUmVYaEVVVlZHUkV4R1JrSlJWVGh6V2xWR1FscFRlRVJSVlVaSVRFVk9RbEZWUlhOVlZVWkNWSGw0V0ZGVlJsaE1SVTVDVVZWTmMxWlZSa1JNTUUxelVWVkdRbEY1ZUVSUlZVWkVURVpHUWxGVk9ITlRNRVpDVTNsNFJGRlZSa2hNUlU1Q1VWVkZjMVZWUmtKVWVYaFdVVlZHVmt4RlRrSlJWVTF6VmpCR1JHSkZUWE5SVlVaQ1VYbDRSRkZWUmtSTVJrWkNVVlU0YzFwVlJrSmFVM2hFVVZWR1NFeEZUa0pSVlVWelZWVkdRbFI1ZUZoUlZVWllURVZPUWxGVlRYTlJNRVpDVVZSMFFsRlZUWFpTUTBselNXNU9kbVJZU21wYVZrcDJZak5SYVU5cFNYWldXRTVzWTI1TmRtTnRSbTFaVjFaeldtMVdlV0p0Um5WYVIxWjZUREZDZVdJeWNHeFpNMUo2VERKYWNHUkRNVzFaVjA1c1dXMDVkbUY1T1ROa00yTjJZMGhXYVdKSGJHcE1NakYyV2toV2MxcFlUWFphYlZsMFltMVdNMk41T0dsTVEwcDZZak5XZVZreVZucFJNamwxWkVkV2RXUkRTVFpYZVVveVdWaEpaMkp0VmpOak1GcHNXbGRSWjFCVFFubGFXRVl4WVZoS2JFdERZM1ZNTWxwdFRHMDFiR1F6VFhWYWJWWnNXa00xYTJGWVNteFpNMUp3WkcxVmRXRnVUVzVMVkhSalltNWFhR05wUW5WYVdHUjZWVWM1ZW1SRFFUbEpTRXBzWTFoV2NHTnRWVzlLZVRSMldtMVpkV0p0VmpOamVUVjNZak5PTUV4dFVuQmpiVlpxWkVkc01scFROWEZqZVdOd1R6RjRkVmhITkhaTGFYQmpZbWxCY1VsR1NteGpNMEoyWW01T2NGbHRlR3hKUjFwMlkybENkVnBZWkhwSlIwNTJZbTVTYkdKdVVtTmlhVUZ4V0VjMFowdHBRa0ZpYldScllqSk5aMkpYT1d0a1YzaHNXRWMwWjB0cFFrRmliVVowV2xOQ2JWcHBOWFZhV0dSNlZGYzVhMlJYZUd4SlJuaDFTVU52ZGxoSE5XaGliV1F4WWtkR2VVeHRNWFphU0ZaeldsTm5ibHB0V1hWaWJWWXpZekF4ZGxwSVZuTmFVMk56U1VaemJscHRXWFZaTWpsNVdsVXhkbHBJVm5OYVUyUmtTMVo0ZFVsRFFXZEpRMEZuU1VNMWJWbFhUakJpTTBvMVMwTmtiVnByTld4a00wNVVXbGhLTW1GWFRteEtlWGRuWTIxV2VHUlhiSGxhVTJkdVRHazViVnBwTlhWYVdHUjZURzVPYkdOdVduQlpNbFYxWVc1TmJrdFRiR05pYVVGblNVTkJaMGxEUVhWYVIyeDVXbGRPTUdGWVdteExSelZzWkROT1IxcFhWbXRNYlRWb1lsZFZjMGxITld4a00wNUhXbGRXYTB4dFVuQmpiVlpxWkVkc01scFRiR05pYVVGblNVTkJaMGxEUVhWWk1qbDFaRWhLZG1KSGVHeGphV2gxV2xoa2VsSnRWbXhhUXpWcVlqSTFNR050T1hOaVIxWjVWRzFHZEZwVGQyZGliVll6WXpCYWJGcFhVWFZaTWpsMVpFaEtkbUpIZUd4amFXeGpZbWxCWjBsRFFXZEpRMEYxV2tkc2VWcFhUakJoV0Zwc1MwYzFiR1F6VGxGaU0wNHdURzAxYUdKWFZYTkpSelZzWkROT1VXSXpUakJNYlZKd1kyMVdhbVJIYkRKYVUyeGpZbWxCWjBsRFFXZEpRMEYxV1RJNWRXUklTblppUjNoc1kybG9kVnBZWkhwVlJ6bDZaRU0xYW1JeU5UQmpiVGx6WWtkV2VWUnRSblJhVTNkblltMVdNMk14UW5aak0xRjFXVEk1ZFdSSVNuWmlSM2hzWTJsc1kySnBTbVJtVVQwOVhHNHZMeU1nYzI5MWNtTmxWVkpNUFM5VmMyVnljeTl5WVdaaFpXeG1aWEp1WVc1a1pYTXZVSEp2YW1WamRITXZabWwwTFdaaFkyVmliMjlyTDNkM2R5OXdkV0pzYVdNdmJXOWtkV3hsY3k5bVppMXVaWGR6TDJabUxtNWxkM011WVhCd0xtcHpJbDE5XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3MuYXBwLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGZmTmV3c0ZlZWQoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHNjb3BlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9tb2R1bGVzL2ZmLW5ld3MvZmYubmV3cy5mZWVkLmRpcmVjdGl2ZS50bXBsLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdmZk5ld3NGZWVkQ29udHJvbGxlciBhcyB2bScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHt9XG4gIH07XG59XG5mdW5jdGlvbiBmZk5ld3NGZWVkQ29udHJvbGxlcigkc2NvcGUsICRyb290U2NvcGUsIGZmTmV3c1NlcnZpY2UsICR0aW1lb3V0LCBfKSB7XG4gIHZhciB2bSA9IHRoaXM7XG4gIHZhciByZWxvYWROZXdzRXZlcnkgPSAxMDAwMDtcbiAgdmFyIHBsYWluTmV3c0luZm87XG4gICRzY29wZS4kb24oJ2F1dGhlbnRpY2F0ZWQnLCBsb2FkQWN0aXZpdGllcyk7XG4gICRzY29wZS4kb24oJ2NvbnRlbnRVcGRhdGVkJywgbG9hZEFjdGl2aXRpZXMpO1xuICBpZiAoJHJvb3RTY29wZS50b2tlbikge1xuICAgIGxvYWRBY3Rpdml0aWVzKCk7XG4gIH1cbiAgZnVuY3Rpb24gbG9hZEFjdGl2aXRpZXMoKSB7XG4gICAgZmZOZXdzU2VydmljZS5hY3Rpdml0aWVzKHBvcHVsYXRlTmV3cyk7XG4gICAgYXV0b1VwZGF0ZSgpO1xuICB9XG4gIGZ1bmN0aW9uIGF1dG9VcGRhdGUoKSB7XG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBmZk5ld3NTZXJ2aWNlLmFjdGl2aXRpZXMocG9wdWxhdGVOZXdzKTtcbiAgICAgIGF1dG9VcGRhdGUoKTtcbiAgICB9LCByZWxvYWROZXdzRXZlcnkpO1xuICB9XG4gIGZ1bmN0aW9uIHBvcHVsYXRlTmV3cyhyZXN1bHQpIHtcbiAgICBpZiAoYW5ndWxhci50b0pzb24odm0ubmV3cykgPT09IGFuZ3VsYXIudG9Kc29uKHJlc3VsdC5kYXRhKSlcbiAgICAgIHJldHVybjtcbiAgICB2bS5uZXdzID0gcmVzdWx0LmRhdGE7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkaXJlY3RpdmU6IFtmZk5ld3NGZWVkXSxcbiAgbmFtZTogJ2ZmTmV3c0ZlZWQnLFxuICBjb250cm9sbGVyOiBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJ2ZmTmV3c1NlcnZpY2UnLCAnJHRpbWVvdXQnLCAnXycsIGZmTmV3c0ZlZWRDb250cm9sbGVyXSxcbiAgY29udHJvbGxlck5hbWU6ICdmZk5ld3NGZWVkQ29udHJvbGxlcidcbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MVzVsZDNNdlptWXVibVYzY3k1bVpXVmtMbVJwY21WamRHbDJaUzVxY3lJc0luTnZkWEpqWlhNaU9sc2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFc1bGQzTXZabVl1Ym1WM2N5NW1aV1ZrTG1ScGNtVmpkR2wyWlM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVGQkxGZEJRVmNzUTBGQlF6dEJRVU5hTEU5QlFWTXNWMEZCVXl4RFFVRkRMRUZCUVVNc1EwRkJSVHRCUVVOd1FpeFBRVUZQTzBGQlEwd3NWMEZCVHl4RFFVRkhMRWxCUVVVN1FVRkRXaXhoUVVGVExFTkJRVWNzUzBGQlJ6dEJRVU5tTEZGQlFVa3NRMEZCUnl4TFFVRkhPMEZCUTFZc1kwRkJWU3hEUVVGSExIRkVRVUZ0UkR0QlFVTm9SU3hoUVVGVExFTkJRVWNzTmtKQlFUSkNPMEZCUTNaRExGVkJRVTBzUTBGQlJ5eExRVUZITzBGQlExb3NUMEZCUnl4RFFVRkhMRlZCUVZNc1MwRkJTU3hEUVVGSExFTkJRVUVzVDBGQlRTeERRVUZITEVOQlFVRXNTMEZCU1N4RFFVRkhMRWRCUVVNN1FVRkJRU3hGUVVONlF5eERRVUZETzBGQlEwZzdRVUZCUVN4QlFVTkJMRTlCUVZNc2NVSkJRVzFDTEVOQlFVVXNUVUZCU3l4RFFVRkhMRU5CUVVFc1ZVRkJVeXhEUVVGSExFTkJRVUVzWVVGQldTeERRVUZITEVOQlFVRXNVVUZCVHl4RFFVRkhMRU5CUVVFc1EwRkJRU3hEUVVGSE8wRkJRelZGTEVGQlFVa3NTVUZCUVN4RFFVRkJMRVZCUVVNc1JVRkJTU3hMUVVGSExFTkJRVU03UVVGRFlpeEJRVUZKTEVsQlFVRXNRMEZCUVN4bFFVRmpMRVZCUVVrc1RVRkJTU3hEUVVGRE8wRkJRek5DTEVGQlFVa3NTVUZCUVN4RFFVRkJMR0ZCUVZrc1EwRkJRenRCUVVOcVFpeFBRVUZMTEVsQlFVa3NRVUZCUXl4RFFVRkRMR1ZCUVdNc1EwRkJSeXhsUVVGaExFTkJRVU1zUTBGQlF6dEJRVU16UXl4UFFVRkxMRWxCUVVrc1FVRkJReXhEUVVGRExHZENRVUZsTEVOQlFVY3NaVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkROVU1zUzBGQlNTeFZRVUZUTEUxQlFVMHNRMEZCUnp0QlFVTndRaXhwUWtGQllTeEJRVUZETEVWQlFVTXNRMEZCUXp0RlFVTnNRanRCUVVGQkxFRkJRMEVzVTBGQlV5eGxRVUZoTEVOQlFVTXNRVUZCUXl4RFFVRkZPMEZCUTNoQ0xHZENRVUZaTEZkQlFWY3NRVUZCUXl4RFFVRkRMRmxCUVZjc1EwRkJReXhEUVVGRE8wRkJRM1JETEdGQlFWTXNRVUZCUXl4RlFVRkRMRU5CUVVNN1JVRkRaRHRCUVVGQkxFRkJRMEVzVTBGQlV5eFhRVUZUTEVOQlFVTXNRVUZCUXl4RFFVRkZPMEZCUTNCQ0xGZEJRVThzUVVGQlF5eERRVUZETEZOQlFWRXNRVUZCUXl4RFFVRkZPMEZCUTJ4Q0xHdENRVUZaTEZkQlFWY3NRVUZCUXl4RFFVRkRMRmxCUVZjc1EwRkJReXhEUVVGRE8wRkJRM1JETEdWQlFWTXNRVUZCUXl4RlFVRkRMRU5CUVVNN1NVRkRaQ3hEUVVGSExHZENRVUZqTEVOQlFVTXNRMEZCUXp0RlFVTnlRanRCUVVGQkxFRkJRMEVzVTBGQlV5eGhRVUZYTEVOQlFVVXNUVUZCU3l4RFFVRkhPMEZCUXpWQ0xFOUJRVWtzVDBGQlRTeFBRVUZQTEVGQlFVTXNRMEZCUXl4RlFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQkxFZEJRVTBzUTBGQlFTeFBRVUZOTEU5QlFVOHNRVUZCUXl4RFFVRkRMRTFCUVVzc1MwRkJTeXhEUVVGRE8wRkJRM2hFTEZsQlFVMDdRVUZCUVN4QlFVTlNMRXRCUVVNc1MwRkJTeXhGUVVGSkxFTkJRVUVzVFVGQlN5eExRVUZMTEVOQlFVTTdSVUZEZGtJN1FVRkJRU3hCUVVOR08wRkJRVUVzUVVGRFFTeExRVUZMTEZGQlFWRXNSVUZCU1R0QlFVTm1MRlZCUVZFc1EwRkJSeXhGUVVGRExGVkJRVk1zUTBGQlF6dEJRVU4wUWl4TFFVRkhMRU5CUVVjc1lVRkJWenRCUVVOcVFpeFhRVUZUTEVOQlFVY3NSVUZCUXl4UlFVRlBMRU5CUVVjc1lVRkJWeXhEUVVGSExHZENRVUZqTEVOQlFVY3NWMEZCVXl4RFFVRkhMRWxCUVVVc1EwRkJSeXh4UWtGQmJVSXNRMEZCUXp0QlFVTXpSaXhsUVVGaExFTkJRVWNzZFVKQlFYRkNPMEZCUVVFc1FVRkRka01zUTBGQlF6dEJRVWMyUnlJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZjbUZtWVdWc1ptVnlibUZ1WkdWekwxQnliMnBsWTNSekwyWnBkQzFtWVdObFltOXZheTkzZDNjdmNIVmliR2xqTDIxdlpIVnNaWE12Wm1ZdGJtVjNjeThpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKY0luVnpaU0J6ZEhKcFkzUmNJanRjYm1aMWJtTjBhVzl1SUdabVRtVjNjMFpsWldRb0tTQjdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdjbVZ6ZEhKcFkzUTZJQ2RGSnl4Y2JpQWdJQ0IwY21GdWMyTnNkV1JsT2lCMGNuVmxMRnh1SUNBZ0lITmpiM0JsT2lCMGNuVmxMRnh1SUNBZ0lIUmxiWEJzWVhSbFZYSnNPaUFuTGk5dGIyUjFiR1Z6TDJabUxXNWxkM012Wm1ZdWJtVjNjeTVtWldWa0xtUnBjbVZqZEdsMlpTNTBiWEJzTG1oMGJXd25MRnh1SUNBZ0lHTnZiblJ5YjJ4c1pYSTZJQ2RtWms1bGQzTkdaV1ZrUTI5dWRISnZiR3hsY2lCaGN5QjJiU2NzWEc0Z0lDQWdjbVZ3YkdGalpUb2dkSEoxWlN4Y2JpQWdJQ0JzYVc1ck9pQm1kVzVqZEdsdmJpaHpZMjl3WlN3Z1pXeGxiV1Z1ZEN3Z1lYUjBjbk1wSUh0OVhHNGdJSDA3WEc1OVhHNW1kVzVqZEdsdmJpQm1aazVsZDNOR1pXVmtRMjl1ZEhKdmJHeGxjaWdrYzJOdmNHVXNJQ1J5YjI5MFUyTnZjR1VzSUdabVRtVjNjMU5sY25acFkyVXNJQ1IwYVcxbGIzVjBMQ0JmS1NCN1hHNGdJSFpoY2lCMmJTQTlJSFJvYVhNN1hHNGdJSFpoY2lCeVpXeHZZV1JPWlhkelJYWmxjbmtnUFNBeE1EQXdNRHRjYmlBZ2RtRnlJSEJzWVdsdVRtVjNjMGx1Wm04N1hHNGdJQ1J6WTI5d1pTNGtiMjRvSjJGMWRHaGxiblJwWTJGMFpXUW5MQ0JzYjJGa1FXTjBhWFpwZEdsbGN5azdYRzRnSUNSelkyOXdaUzRrYjI0b0oyTnZiblJsYm5SVmNHUmhkR1ZrSnl3Z2JHOWhaRUZqZEdsMmFYUnBaWE1wTzF4dUlDQnBaaUFvSkhKdmIzUlRZMjl3WlM1MGIydGxiaWtnZTF4dUlDQWdJR3h2WVdSQlkzUnBkbWwwYVdWektDazdYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdiRzloWkVGamRHbDJhWFJwWlhNb0tTQjdYRzRnSUNBZ1ptWk9aWGR6VTJWeWRtbGpaUzVoWTNScGRtbDBhV1Z6S0hCdmNIVnNZWFJsVG1WM2N5azdYRzRnSUNBZ1lYVjBiMVZ3WkdGMFpTZ3BPMXh1SUNCOVhHNGdJR1oxYm1OMGFXOXVJR0YxZEc5VmNHUmhkR1VvS1NCN1hHNGdJQ0FnSkhScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCbVprNWxkM05UWlhKMmFXTmxMbUZqZEdsMmFYUnBaWE1vY0c5d2RXeGhkR1ZPWlhkektUdGNiaUFnSUNBZ0lHRjFkRzlWY0dSaGRHVW9LVHRjYmlBZ0lDQjlMQ0J5Wld4dllXUk9aWGR6UlhabGNua3BPMXh1SUNCOVhHNGdJR1oxYm1OMGFXOXVJSEJ2Y0hWc1lYUmxUbVYzY3loeVpYTjFiSFFwSUh0Y2JpQWdJQ0JwWmlBb1lXNW5kV3hoY2k1MGIwcHpiMjRvZG0wdWJtVjNjeWtnUFQwOUlHRnVaM1ZzWVhJdWRHOUtjMjl1S0hKbGMzVnNkQzVrWVhSaEtTbGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0IyYlM1dVpYZHpJRDBnY21WemRXeDBMbVJoZEdFN1hHNGdJSDFjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JrYVhKbFkzUnBkbVU2SUZ0bVprNWxkM05HWldWa1hTeGNiaUFnYm1GdFpUb2dKMlptVG1WM2MwWmxaV1FuTEZ4dUlDQmpiMjUwY205c2JHVnlPaUJiSnlSelkyOXdaU2NzSUNja2NtOXZkRk5qYjNCbEp5d2dKMlptVG1WM2MxTmxjblpwWTJVbkxDQW5KSFJwYldWdmRYUW5MQ0FuWHljc0lHWm1UbVYzYzBabFpXUkRiMjUwY205c2JHVnlYU3hjYmlBZ1kyOXVkSEp2Ykd4bGNrNWhiV1U2SUNkbVprNWxkM05HWldWa1EyOXVkSEp2Ykd4bGNpZGNibjA3WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVV3eFZucGFXRXA2VEROS2FGcHRSbXhpUjFwc1kyMDFhR0p0VW14amVUbFJZMjA1Y1ZwWFRqQmplVGx0WVZoUmRGcHRSbXBhVjBwMllqSnpkbVF6WkROTU0wSXhXVzE0Y0ZsNU9YUmlNbEl4WWtkV2Vrd3lXbTFNVnpWc1pETk5kbHB0V1hWaWJWWXpZM2sxYlZwWFZtdE1iVkp3WTIxV2FtUkhiREphVXpWeFkzbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGYzFiR1F6VFhaYWJWbDFZbTFXTTJONU5XMWFWMVpyVEcxU2NHTnRWbXBrUjJ3eVdsTTFjV041U21STVEwcDFXVmN4YkdONVNUWlhNVEJ6U1cweGFHTklRbkJpYldSNlNXcHZhVkZWUmxaUlZIUkNVVlZHUWt4Rk9VSlJWazF6VmpCR1FsVjVlRVJSVlVaRVRFVkdRbEZWVFhOUk1FWkNVbFIwUWxGVlRuTlJhWGhRVVZWR1VFOHdSa0pSTUdkelZqQkdRbFI1ZUVSUlZVWklURVZzUWxGVlZUZFJWVVpFVjJsNGFGRlZSbFJNUlU1Q1VWVmpjMU13UmtKU2VuUkNVVlZPYlV4R1JrSlJWV3R6VVRCR1FsSjVlRXhSVlVaSVR6QkdRbEV4V1hOWk1FWkNWbE40UkZGVlJraE1TRVpGVVZWR2RGSkVkRUpSVlU1dlVsTjRhRkZWUmxSTVJVNUNVVlZqYzA1clNrSlJWRXBEVHpCR1FsRXpXa1JNUmxaQ1VWVXdjMUV3UmtKU2VYaE1VVlZHU0U4d1JrSlJNVzl6VkRCR1FsSjVlRVJSVlVaSVRFWldRbEZXVFhOVE1FWkNVMU40UkZGVlJraE1SVTVDVVZWRmMxUXdSa0pVVTNoRVVWVkdTRXhGVGtKUlZVVnpVekJHUWxOVGVFUlJWVVpJVEVWa1FsSllVa1JQTUVaQ1VWVkZjMUpWUmtSVGFYaEVVVlZHUkU4d1JrSlJNSGMzVVZWR1FsRlRlRUpSVmtaQ1RFVTVRbEZXVFhOalZVcENVVmN4UTB4RlRrSlJWVlZ6VkZWR1FsTjVlRVJSVlVaSVRFVk9RbEZWUlhOV1ZVWkNWWGw0UkZGVlJraE1SVTVDVVZWRmMxbFZSa0pYVTNoRVVWVkdTRXhGVGtKUlZVVnpWVlZHUWxSNWVFUlJWVVpJVEVWT1FsRlZSWE5STUVaQ1VWTjRSRkZWUmtaUE1FWkNVWHBPUmt4RlJrSlJWV3R6VTFWR1FsRlRlRVJSVlVaQ1RFVldRbEZWVFhOU1ZVWkNVMU40VEZGVlJraE1SVTVDVVZWTk4xRlZSa1JaYVhoQ1VWVkdTa3hGYkVKUlZVVnpVVEJHUWxGVGVHeFJWVVpxVEVWV1FsRlZhM05VVlVaQ1UxTjRSRkZWUmtSUE1FWkNVWHBPUTB4RlJrSlJWV3R6VTFWR1FsRlRlRVJSVlVaQ1RFZEdRbEZXYTNOUk1FWkNVWHAwUWxGVlRuRlJhWGhRVVZWR1RFeEZiRUpSVld0elVWVkdRbEY1ZUVSUlZVWkVURWRXUWxGWFRYTlJNRVpDVW5sNGJGRlZSbWhNUlU1Q1VWVk5jMUV3UmtKUmVuUkNVVlZOZWxGNWVGQlJWVVpNVEVWc1FsRlZhM05SVlVaQ1VYbDRSRkZWUmtSTVIyUkRVVlZHYkV4RlRrSlJWV056V2xWR1FsbFRlRVJSVlVaRVRFVk9RbEZWVFRkUlZVWkdUbFZOYzFNd1JrSlRVM2hXVVZWR1ZFeEZNVUpSVlRCelVUQkdRbEpVZEVKUlZVNTFVV2w0Y0ZGclJrSlpVM2hDVVZWR1JFeEZWa0pSVlUxelVUQkdRbEY2ZEVaUlZVNXpVV3AwUWxGVlJrSk1SVVpDVWxWRmMxVXdSa0pWZVhoc1VWVkdhRXhGVGtKUlZVMXpVVlZHUWxGNWVFUlJWVVpFVHpCR1FsRXpXa05NUjJSRFVWVkdXa3hHWkVKUlZtTnpVVlZHUWxGNWVFUlJWVVpFVEVac1FsRldZM05STUVaQ1VYbDRSRkZWUmtSUE1FWkNVVE5TUkV4SFJrSlJWazF6VVZWR1FsRjVlRVpSVlVaRVRFVk9RbEZWVFRkU1ZVWkVXa1IwUWxGVlJrSk1SVVpDVWxWRmMxVXdSa0pWZVhoWVVWVkdWRXhGVGtKUlZVMXpVVlZHUWxGNWVFUlJWVVpFVHpCR1FsRXlOVU5NUm1SQ1VWVTRjMUZWUmtKUmVYaEVVVlZHUkV4R1RrSlJWa1Z6VVZWR1FsRjVlRVJSVlVaRVR6QkdRbEV5Y0VOTVIzUkRVVlZHV2t4R1pFSlJWbU56VVZWR1FsRjVlRVJSVlVaRVRFWnNRbEZXWTNOUk1FWkNVWGw0UkZGVlJrUlBNRVpDVVROU1JFeEhWa0pSVmsxelVWVkdRbEY1ZUVaUlZVWkVURVZPUWxGVlRUZFRWVVpFV2tONFJGRlZSa2hNUjJSRFVWVkdha3hGVGtKUlZVMXpVVEJHUWxGNmRFWlJWVTU1VVdwMFFsRlZSa0pNUlVaQ1VsVkZjMVV3UmtKVmVYaG9VVlZHV0V4RlRrSlJWVlZ6VkZWR1FsTjVlRVJSVlVaR1R6QkdRbEY2VGtOTVJUbENVVlZyYzFRd1JrSlVVM2hRVVZWR1VFeEZSa0pSVlUxelVUQkdRbEY1ZUVaUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJGRlZSa0pNUldSQ1VWVXdjMUV3UmtKUlUzaFFVVlZHVGt4Rk9VSlJWVGh6VVZWR1FsRjVlRVJSVlVaRVRFVXhRbEZWYzNOVE1FWkNVM2w0UkZGVlJrUlBNRVpDVVZWamMxZFZSa0pVVkhSQ1VWVkdRa3hGUmtKUk1qVkdURVYwUWxGVlRYTlRNRVpDVTNsNFJsRlZSa3BNUlU1Q1VWVkZjMVJWUmtKVGVYaE1VVlZHVEV4RlRrSlJWVTAzVWxWR1JHUnJTVGRSVlVaQ1VWTjRRbEZWVGtkUE1FWkNVVlZGYzFGVlJrWlJVM2hNVVZWR1RFeEdSa0pSVmtWelVsVkdRbE5VZEVKUlZVNXRURVpXUWxGV1JYTlJNRVpDVW5sNFJsRlZSa1JNUmxaQ1VWWk5jMUV3UmtKUmVuUkNVVlZPTUZGcGVFeFJWVVpJVEVWT1FsRlZZM05aVlVaQ1ZucDBRbEZWVG5GUmFYaFlVVlZHVkV4RlRrSlJWV056VWxWR1FsRjVlRkpSVlVaUVRFVk9RbEZWWTNOWlZVWkNWbmw0UkZGVlJrWk1SMlJEVVZWR2FreEZUa0pSVldOelZqQkdRbFY1ZUVSUlZVWklURVZzUWxGVlZYTlJNRVpDVW5sNGVGRnJSa0ppVlVselVUQkdRbEY2ZEVKUlZVMTRVbWw0YkZGVlJtaE1SVTVDVVZWamMyUlZTa0pSV0VaRFR6QkdRbEZWUlhOUlZVWkVaR3ROYzFFd1JrSlJlblJDVVZWV1JVbHBkMmxqTWpreFkyMU9iRlZ0T1haa1EwazJTV2s1Vm1NeVZubGplVGw1V1ZkYWFGcFhlRzFhV0VwMVdWYzFhMXBZVFhaVlNFcDJZVzFXYW1SSVRYWmFiV3d3VEZkYWFGa3lWbWxpTWpseVRETmtNMlI1T1hka1YwcHpZVmROZG1KWE9XdGtWM2hzWTNrNWJWcHBNWFZhV0dSNlRIbEpjMGx1VG5aa1dFcHFXbGhPUkdJeU5UQmFWelV3U1dwd1lrbHBPSEZMYkhoMVNVTnZaMUZITlc1YVJ6bHFTVWRTY0dOdFZtcGtSMnd5V2xaNGRVbERiMmRSUnpGMldraFdjMXBUUW0xYWFUVjFXbGhrZWxSWE9XdGtWM2hzV0VjMFowdHBRa0ZpYlVaMFdsTkNiVnByTld4a00wNUhXbGRXYTFoSE5HZExhVUpCV2tkV2Vsa3pTbkJqU0ZKd1lqSTBaMUpIYkhsYVYwNHdZVmhhYkVsSVNteGpNMEoyWW01T2NGbHRlR3hKU0ZKMlNVaEtiR0p0VW14amFVSXdZVWRWWjJKdFZqTmplVUp0V2xkV2EweHBRbU5pYVVGeFNVVjRjR0p0YzJka1J6aG5ZbGhyWjJKWE9XdGtWM2hzU1VSdloyVXdRbk5oVnpWeVNVZGFiVXh0Tld4a01ERjJXa2hXYzFwVFFqbFlSelJuUzJsQ1lsUkhiSFZoZVVJd1lubENNR0ZIVldkWk1qbHJXbFl3YjJGSVVqQmpTRTAyVEhrNWJtRllVbTlrVjBsMVdUSTVkRXd6U21oYWJVWnNZa2RhYkdOdE5XaGliVkpzWXpJMWJHUkRPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJXVzE0ZGxscE9YUlpXRTR3V2xoSmRtUXpaRE5NTTBJeFdXMTRjRmw1T1hSaU1sSXhZa2RXZWt3eVdtMU1WelZzWkROTmRscHRXWFZpYlZZelkzazFiVnBYVm10TWJWSndZMjFXYW1SSGJESmFVelZ4WTNsc1kySnBRWEZKUlVKc1pVZEdkR05IZUd4SlJuaDFTVU52WjFCSFdtMU1WelZzWkROTmRGcHRWbXhhUkRSblVFTTViVnBwTVhWYVdHUjZURmRhYkZwWFVTdFlSelJuUzJrNVkySnRXakZpYlU0d1lWYzVkVWxIV20xVWJWWXpZekJhYkZwWFVXOUxVMEkzV0VjMFowbERRV2RqYlZZd1pGaEtkVWxJZEdOaWFVRm5TVU5CWjBsRFFXZGpiVlo2WkVoS2NGa3pVVFpKUTJSR1NubDRZMkpwUVdkSlEwRm5TVU5CWjJSSVNtaGliazVxWWtoV2ExcFViMmRrU0VveFdsTjRZMkpwUVdkSlEwRm5TVU5CWjJNeVRuWmpSMVUyU1VoU2VXUlhWWE5ZUnpSblNVTkJaMGxEUVdkSlNGSnNZbGhDYzFsWVVteFdXRXB6VDJsQmJreHBPWFJpTWxJeFlrZFdla3d5V20xTVZ6VnNaRE5OZGxwdFdYVmliVll6WTNrMWJWcFhWbXRNYlZKd1kyMVdhbVJIYkRKYVV6VXdZbGhDYzB4dGFEQmlWM2R1VEVaNGRVbERRV2RKUTBGblNVTkNhbUl5TlRCamJUbHpZa2RXZVU5cFFXNWFiVnBQV2xoa2VsSnRWbXhhUlU1MlltNVNlV0l5ZUhOYVdFbG5XVmhOWjJSdE1HNU1SbmgxU1VOQlowbERRV2RKUTBKNVdsaENjMWxYVG14UGFVSXdZMjVXYkV4R2VIVkpRMEZuU1VOQlowbERRbk5oVnpWeVQybENiV1JYTldwa1IyeDJZbWxvZWxreU9YZGFVM2RuV2xkNGJHSlhWblZrUTNkbldWaFNNR051VFhCSlNIUmpZbXg0ZFVsRFFXZEpRMEZuU1VOQ09WaEhOR2RKUTBGblpsUjBZMkp1TVdOaWJIaDFUSGx2Y1ZoSE5HZExhVUpCWW0xa2EySXlUV2RaTWpsMVpFaEtkbUpIZUd4amJIaDFTVU52WjFGSE1YWmFTRlp6V2xOQ2JWcHBOWFZhV0dSNlZGYzVhMlJYZUd4WVJ6Um5TMmxDUVdKdFJuUmFVMEp0V21zMWJHUXpUa2RhVjFaclVUSTVkV1JJU25aaVIzaHNZMng0ZFVsRGIyZFJSMUpzWXpKT2VXRllRakJoVnpsMVNVVk9kbUp1VW5saU1uaHpXbGhKWjJOdFZucGpSemwxWXpKc2FXSkhWV2RhYlRsNVNVaFNiMXBUUW5WYVdHUjZTVWRhYkZwWFVYVllSelJuUzJrNVkySnRXakZpYlU0d1lWYzVkVWxIV20xVWJWWXpZekJhYkZwWFVrUmlNalV3WTIwNWMySkhWbmxMUTFKNldUSTVkMXBUZDJkS1NFcDJZak5TVkZreU9YZGFVM2RuV20xYVQxcFlaSHBWTWxaNVpHMXNhbHBUZDJkS1NGSndZbGRXZG1SWVVYTkpSamh3WlRGNGRVbERRakpaV0VsblpHMHdaMUJUUWpCaFIyeDZUekY0ZFVsRFFqSlpXRWxuWTIxV2MySXlSbXRVYlZZell6QldNbHBZU2pWSlJEQm5UVlJCZDAxRVFUZFlSelJuU1VoYWFHTnBRbmRpUjBad1ltczFiR1F6VGtwaWJWcDJUekY0ZFVsRFFXdGpNazUyWTBkVmRVcEhPWFZMUTJSb1pGaFNiMXBYTlRCaFYwNW9aRWRXYTBwNWQyZGlSemxvV2tWR2FtUkhiREpoV0ZKd1dsaE5jRTh4ZUhWSlEwRnJZekpPZG1OSFZYVktSemwxUzBOa2FtSXlOVEJhVnpVd1ZsaENhMWxZVW14YVEyTnpTVWQ0ZGxsWFVrSlpNMUp3Wkcxc01HRlhWbnBMVkhSallteDRkVWxEUW5CYWFVRnZTa2hLZG1JelVsUlpNamwzV2xNMU1HSXlkR3hpYVd3M1dFYzBaMGxEUVdkaVJ6bG9Xa1ZHYW1SSGJESmhXRkp3V2xoTmIwdFVkR05pYVVGblpsWjRkVmhITkdkSlIxb3hZbTFPTUdGWE9YVkpSM2gyV1ZkU1Fsa3pVbkJrYld3d1lWZFdla3REYkRkWVJ6Um5TVU5CWjFwdFdrOWFXR1I2VlRKV2VXUnRiR3BhVXpWb1dUTlNjR1J0YkRCaFYxWjZTMGhDZG1OSVZuTlpXRkpzVkcxV00yTjVhemRZUnpSblNVTkJaMWxZVmpCaU1WWjNXa2RHTUZwVFozQlBNWGgxU1VOQ09WaEhOV05pYVVGbldtNVdkVmt6VW5CaU1qUm5XVmhXTUdJeFZuZGFSMFl3V2xObmNHVXhlSFZKUTBGblNVTlNNR0ZYTVd4aU0xWXdTMGRhTVdKdFRqQmhWemwxUzBOc04xaEhOR2RKUTBGblNVTkNiVnByTld4a00wNVVXbGhLTW1GWFRteE1iVVpxWkVkc01tRllVbkJhV0UxdlkwYzVkMlJYZUdoa1IxWlBXbGhrZWt0VWRHTmlhVUZuU1VOQlowbEhSakZrUnpsV1kwZFNhR1JIVlc5TFZIUmpZbWxCWjBsRFFqbE1RMEo1V2xkNGRsbFhVazlhV0dSNlVsaGFiR051YTNCUE1YaDFTVU5DT1ZoSE5XTmlhVUZuV201V2RWa3pVbkJpTWpSblkwYzVkMlJYZUdoa1IxWlBXbGhrZWt0SVNteGpNMVp6WkVOc04xaEhOR2RKUTBGbllWZFpaMHRIUm5WYU0xWnpXVmhKZFdSSE9VdGpNamwxUzBoYWRFeHROV3hrTTAxd1NVUXdPVkJUUW1oaWJXUXhZa2RHZVV4dVVuWlRiazUyWW1sb2VWcFlUakZpU0ZGMVdrZEdNRmxUYTNCSlNFcHNaRWhXZVdKcWRHTmlhVUZuU1VOQ01tSlROWFZhV0dSNlNVUXdaMk50Vm5wa1YzZ3dURzFTYUdSSFJUZEpSbmgxU1VOQ09WaEhOVGxZUnpWalltMHhkbHBJVm5OYVV6VnNaVWhDZG1OdVVucEpSREJuWlRGNGRVbERRbXRoV0Vwc1dUTlNjR1J0VlRaSlJuUnRXbXMxYkdRelRrZGFWMVpyV0ZONFkySnBRV2RpYlVaMFdsUnZaMG95V20xVWJWWXpZekJhYkZwWFVXNU1SbmgxU1VOQ2FtSXlOVEJqYlRsellrZFdlVTlwUW1KS2VWSjZXVEk1ZDFwVFkzTkpRMk5yWTIwNWRtUkdUbXBpTTBKc1NubDNibHB0V2s5YVdHUjZWVEpXZVdSdGJHcGFVMk56U1VOamEyUkhiSFJhVnpreFpFTmpjMGxEWkdaS2VYZG5XbTFhVDFwWVpIcFNiVlpzV2tWT2RtSnVVbmxpTW5oeldsaEtaRXhHZUhWSlEwSnFZakkxTUdOdE9YTmlSMVo1VkcxR2RGcFViMmRLTWxwdFZHMVdNMk13V214YVYxSkVZakkxTUdOdE9YTmlSMVo1U2pGNGRXWlVkR05pYkhoMVNXd3hPVnh1THk4aklITnZkWEpqWlZWU1REMHZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0Ym1WM2N5OW1aaTV1WlhkekxtWmxaV1F1WkdseVpXTjBhWFpsTG1weklsMTlcbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLW5ld3MvZmYubmV3cy5mZWVkLmRpcmVjdGl2ZS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBmZk5ld3NQb3N0KCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3MucG9zdC5kaXJlY3RpdmUudG1wbC5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnZmZOZXdzUG9zdENvbnRyb2xsZXIgYXMgdm0nLFxuICAgIHNjb3BlOiB0cnVlLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7fVxuICB9O1xufVxuZnVuY3Rpb24gZmZOZXdzUG9zdENvbnRyb2xsZXIoJHNjb3BlLCAkcm9vdFNjb3BlLCBmZk5ld3NTZXJ2aWNlKSB7XG4gIHZhciB2bSA9IHRoaXM7XG4gIHZtLnRlc3QgPSAnVGhpcyBkaXJlY3RpdmUgaXMgYm91bmQuJztcbiAgdm0ucG9zdCA9IHBvc3Q7XG4gIGZ1bmN0aW9uIHBvc3QoKSB7XG4gICAgdm0ud2FpdGluZyA9IHRydWU7XG4gICAgZmZOZXdzU2VydmljZS5wb3N0KHZtLm1lc3NhZ2UsIHVwZGF0ZUNvbnRlbnQsIGZhaWxlZFRvUG9zdCk7XG4gIH1cbiAgZnVuY3Rpb24gZmFpbGVkVG9Qb3N0KCkge1xuICAgIHZtLndhaXRpbmcgPSBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVDb250ZW50KCkge1xuICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnY29udGVudFVwZGF0ZWQnKTtcbiAgICB2bS5tZXNzYWdlID0gJyc7XG4gICAgdm0ud2FpdGluZyA9IGZhbHNlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGlyZWN0aXZlOiBbZmZOZXdzUG9zdF0sXG4gIG5hbWU6ICdmZk5ld3NQb3N0JyxcbiAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICdmZk5ld3NTZXJ2aWNlJywgZmZOZXdzUG9zdENvbnRyb2xsZXJdLFxuICBjb250cm9sbGVyTmFtZTogJ2ZmTmV3c1Bvc3RDb250cm9sbGVyJ1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012Wm1ZdWJtVjNjeTV3YjNOMExtUnBjbVZqZEdsMlpTNXFjeUlzSW5OdmRYSmpaWE1pT2xzaUwxVnpaWEp6TDNKaFptRmxiR1psY201aGJtUmxjeTlRY205cVpXTjBjeTltYVhRdFptRmpaV0p2YjJzdmQzZDNMM0IxWW14cFl5OXRiMlIxYkdWekwyWm1MVzVsZDNNdlptWXVibVYzY3k1d2IzTjBMbVJwY21WamRHbDJaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVUZCTEZkQlFWY3NRMEZCUXp0QlFVTmFMRTlCUVZNc1YwRkJVeXhEUVVGRExFRkJRVU1zUTBGQlJUdEJRVU53UWl4UFFVRlBPMEZCUTB3c1YwRkJUeXhEUVVGSExFbEJRVVU3UVVGRFdpeGhRVUZUTEVOQlFVY3NTMEZCUnp0QlFVTm1MR05CUVZVc1EwRkJSeXh4UkVGQmJVUTdRVUZEYUVVc1lVRkJVeXhEUVVGSExEWkNRVUV5UWp0QlFVTjJReXhSUVVGSkxFTkJRVWNzUzBGQlJ6dEJRVU5XTEZWQlFVMHNRMEZCUnl4TFFVRkhPMEZCUTFvc1QwRkJSeXhEUVVGSExGVkJRVk1zUzBGQlNTeERRVUZITEVOQlFVRXNUMEZCVFN4RFFVRkhMRU5CUVVFc1MwRkJTU3hEUVVGSExFZEJRVU03UVVGQlFTeEZRVU42UXl4RFFVRkRPMEZCUTBnN1FVRkJRU3hCUVVOQkxFOUJRVk1zY1VKQlFXMUNMRU5CUVVVc1RVRkJTeXhEUVVGSExFTkJRVUVzVlVGQlV5eERRVUZITEVOQlFVRXNZVUZCV1N4RFFVRkhPMEZCUXk5RUxFRkJRVWtzU1VGQlFTeERRVUZCTEVWQlFVTXNSVUZCU1N4TFFVRkhMRU5CUVVNN1FVRkRZaXhIUVVGRExFdEJRVXNzUlVGQlNTd3lRa0ZCZVVJc1EwRkJRenRCUVVOd1F5eEhRVUZETEV0QlFVc3NSVUZCU1N4TFFVRkhMRU5CUVVNN1FVRkRaQ3hUUVVGVExFdEJRVWNzUTBGQlF5eEJRVUZETEVOQlFVVTdRVUZEWkN4TFFVRkRMRkZCUVZFc1JVRkJTU3hMUVVGSExFTkJRVU03UVVGRGFrSXNaMEpCUVZrc1MwRkJTeXhCUVVGRExFTkJRVU1zUlVGQlF5eFJRVUZSTEVOQlFVY3NZMEZCV1N4RFFVRkhMR0ZCUVZjc1EwRkJReXhEUVVGRE8wVkJRemRFTzBGQlFVRXNRVUZEUVN4VFFVRlRMR0ZCUVZjc1EwRkJReXhCUVVGRExFTkJRVVU3UVVGRGRFSXNTMEZCUXl4UlFVRlJMRVZCUVVrc1RVRkJTU3hEUVVGRE8wVkJRM0JDTzBGQlFVRXNRVUZEUVN4VFFVRlRMR05CUVZrc1EwRkJReXhCUVVGRExFTkJRVVU3UVVGRGRrSXNZVUZCVXl4WFFVRlhMRUZCUVVNc1EwRkJReXhuUWtGQlpTeERRVUZETEVOQlFVTTdRVUZEZGtNc1MwRkJReXhSUVVGUkxFVkJRVWtzUjBGQlF5eERRVUZETzBGQlEyWXNTMEZCUXl4UlFVRlJMRVZCUVVrc1RVRkJTU3hEUVVGRE8wVkJRM0JDTzBGQlFVRXNRVUZEUmp0QlFVRkJMRUZCUTBFc1MwRkJTeXhSUVVGUkxFVkJRVWs3UVVGRFppeFZRVUZSTEVOQlFVY3NSVUZCUXl4VlFVRlRMRU5CUVVNN1FVRkRkRUlzUzBGQlJ5eERRVUZITEdGQlFWYzdRVUZEYWtJc1YwRkJVeXhEUVVGSExFVkJRVU1zVVVGQlR5eERRVUZITEdGQlFWY3NRMEZCUnl4blFrRkJZeXhEUVVGSExIRkNRVUZ0UWl4RFFVRkRPMEZCUXpGRkxHVkJRV0VzUTBGQlJ5eDFRa0ZCY1VJN1FVRkJRU3hCUVVOMlF5eERRVUZETzBGQlJ6WkhJaXdpYzI5MWNtTmxVbTl2ZENJNklpOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZiVzlrZFd4bGN5OW1aaTF1Wlhkekx5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVablZ1WTNScGIyNGdabVpPWlhkelVHOXpkQ2dwSUh0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCeVpYTjBjbWxqZERvZ0owVW5MRnh1SUNBZ0lIUnlZVzV6WTJ4MVpHVTZJSFJ5ZFdVc1hHNGdJQ0FnZEdWdGNHeGhkR1ZWY213NklDY3VMMjF2WkhWc1pYTXZabVl0Ym1WM2N5OW1aaTV1WlhkekxuQnZjM1F1WkdseVpXTjBhWFpsTG5SdGNHd3VhSFJ0YkNjc1hHNGdJQ0FnWTI5dWRISnZiR3hsY2pvZ0oyWm1UbVYzYzFCdmMzUkRiMjUwY205c2JHVnlJR0Z6SUhadEp5eGNiaUFnSUNCelkyOXdaVG9nZEhKMVpTeGNiaUFnSUNCeVpYQnNZV05sT2lCMGNuVmxMRnh1SUNBZ0lHeHBibXM2SUdaMWJtTjBhVzl1S0hOamIzQmxMQ0JsYkdWdFpXNTBMQ0JoZEhSeWN5a2dlMzFjYmlBZ2ZUdGNibjFjYm1aMWJtTjBhVzl1SUdabVRtVjNjMUJ2YzNSRGIyNTBjbTlzYkdWeUtDUnpZMjl3WlN3Z0pISnZiM1JUWTI5d1pTd2dabVpPWlhkelUyVnlkbWxqWlNrZ2UxeHVJQ0IyWVhJZ2RtMGdQU0IwYUdsek8xeHVJQ0IyYlM1MFpYTjBJRDBnSjFSb2FYTWdaR2x5WldOMGFYWmxJR2x6SUdKdmRXNWtMaWM3WEc0Z0lIWnRMbkJ2YzNRZ1BTQndiM04wTzF4dUlDQm1kVzVqZEdsdmJpQndiM04wS0NrZ2UxeHVJQ0FnSUhadExuZGhhWFJwYm1jZ1BTQjBjblZsTzF4dUlDQWdJR1ptVG1WM2MxTmxjblpwWTJVdWNHOXpkQ2gyYlM1dFpYTnpZV2RsTENCMWNHUmhkR1ZEYjI1MFpXNTBMQ0JtWVdsc1pXUlViMUJ2YzNRcE8xeHVJQ0I5WEc0Z0lHWjFibU4wYVc5dUlHWmhhV3hsWkZSdlVHOXpkQ2dwSUh0Y2JpQWdJQ0IyYlM1M1lXbDBhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lIMWNiaUFnWm5WdVkzUnBiMjRnZFhCa1lYUmxRMjl1ZEdWdWRDZ3BJSHRjYmlBZ0lDQWtjbTl2ZEZOamIzQmxMaVJpY205aFpHTmhjM1FvSjJOdmJuUmxiblJWY0dSaGRHVmtKeWs3WEc0Z0lDQWdkbTB1YldWemMyRm5aU0E5SUNjbk8xeHVJQ0FnSUhadExuZGhhWFJwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdmVnh1ZlZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJR1JwY21WamRHbDJaVG9nVzJabVRtVjNjMUJ2YzNSZExGeHVJQ0J1WVcxbE9pQW5abVpPWlhkelVHOXpkQ2NzWEc0Z0lHTnZiblJ5YjJ4c1pYSTZJRnNuSkhOamIzQmxKeXdnSnlSeWIyOTBVMk52Y0dVbkxDQW5abVpPWlhkelUyVnlkbWxqWlNjc0lHWm1UbVYzYzFCdmMzUkRiMjUwY205c2JHVnlYU3hjYmlBZ1kyOXVkSEp2Ykd4bGNrNWhiV1U2SUNkbVprNWxkM05RYjNOMFEyOXVkSEp2Ykd4bGNpZGNibjA3WEc1Y2JpOHZJeUJ6YjNWeVkyVk5ZWEJ3YVc1blZWSk1QV1JoZEdFNllYQndiR2xqWVhScGIyNHZhbk52Ymp0aVlYTmxOalFzWlhsS01scFlTbnBoVnpsMVNXcHZla3hEU20xaFYzaHNTV3B2YVV3eFZucGFXRXA2VEROS2FGcHRSbXhpUjFwc1kyMDFhR0p0VW14amVUbFJZMjA1Y1ZwWFRqQmplVGx0WVZoUmRGcHRSbXBhVjBwMllqSnpkbVF6WkROTU0wSXhXVzE0Y0ZsNU9YUmlNbEl4WWtkV2Vrd3lXbTFNVnpWc1pETk5kbHB0V1hWaWJWWXpZM2sxZDJJelRqQk1iVkp3WTIxV2FtUkhiREphVXpWeFkzbEpjMGx1VG5aa1dFcHFXbGhOYVU5c2MybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGYzFiR1F6VFhaYWJWbDFZbTFXTTJONU5YZGlNMDR3VEcxU2NHTnRWbXBrUjJ3eVdsTTFjV041U21STVEwcDFXVmN4YkdONVNUWlhNVEJ6U1cweGFHTklRbkJpYldSNlNXcHZhVkZWUmxKUlZIUkNVVlZHUWt4Rk9VSlJWazF6VmpCR1FsVjVlRVJSVlVaRVRFVkdRbEZWVFhOUk1FWkNVbFIwUWxGVlRuZFJhWGhRVVZWR1VFOHdSa0pSTUhkelZqQkdRbFI1ZUVSUlZVWklURVZzUWxGVlZUZFJWVVpFVjJsNGFGRlZSbFJNUlU1Q1VWVmpjMU13UmtKU2VuUkNVVlZPYlV4SFRrSlJWbFZ6VVRCR1FsSjVlSGhTUlVaQ1lsVlJOMUZWUmtSaFJWVnpXVlZHUWxWNWVFUlJWVVpJVEVSYVExRlZSWGxSYW5SQ1VWVk9NbEY1ZUZKUlZVWktURVZPUWxGVlkzTlRNRVpDVW5wMFFsRlZUbGRNUmxaQ1VWVXdjMUV3UmtKU2VYaE1VVlZHU0U4d1JrSlJNVzl6VkRCR1FsSjVlRVJSVlVaSVRFWldRbEZXVFhOVE1FWkNVMU40UkZGVlJraE1SVTVDVVZWRmMxUXdSa0pVVTNoRVVWVkdTRXhGVGtKUlZVVnpVekJHUWxOVGVFUlJWVVpJVEVWa1FsSllVa1JQTUVaQ1VWVkZjMUpWUmtSU2FYaEVVVlZHUkU4d1JrSlJNR2MzVVZWR1FsRlRlRUpSVmtaQ1RFVTVRbEZXVFhOalZVcENVVmN4UTB4RlRrSlJWVlZ6VkZWR1FsTjVlRVJSVlVaSVRFVk9RbEZWUlhOV1ZVWkNWWGw0UkZGVlJraE1SVTVDVVZWRmMxbFZSa0pYVTNoRVVWVkdSazh3UmtKUmVteEZURVZHUWxGVmEzTlRWVVpDVVZONFJGRlZSa0pNUlZaQ1VWVk5jMUpWUmtKVFUzaE1VVlZHU0V4RlRrSlJWVTAzVVZWR1JGbHBlRWhSVlVaRVRFVjBRbEZWYzNOU1ZVWkNVMU4zZVZGclJrSmxWVWx6VVRCR1FsRlVkRUpSVlU1MVVYbDRTRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlRVM2hNVVZWR1NFeEZUa0pSVlUwM1VWVkdSbHBEZUZSUlZVWlVURVYwUWxGVlkzTlJNRVpDVVhsNFFsRlZSa1JNUlU1Q1VWVk5OMUZWUmtSWmFYaE1VVlZHUkV4R1JrSlJWa1Z6VWxWR1FsTlRlRXhSVlVaSVRFVk9RbEZWVFRkUlZVWkVZV3RKYzFvd1NrSlJWbXR6VXpCR1FsTjVlRUpSVlVaRVRFVk9RbEZWVFhOU1ZVWkNVWGw0VWxGVlJsSk1SVTVDVVZWamMxa3dSa0pYVTNoRVVWVkdTRXhIUmtKUlZtTnpVVEJHUWxGNWVFUlJWVVpFVHpCV1FsRjZaRVZQTUVaQ1VWVkZjMUZWUmtaUlUzaFVVVlZHVkV4SFJrSlJWbU56VVRCR1FsRjVlRUpSVlVaRVRFVk9RbEZWVFRkUlZVWkVZMnRKYzFNd1JrSlJlWGhTVVZWR1VreEZWa0pSVld0elZGVkdRbE5UZUVSUlZVWkVUekJXUWxFelFrTlBNRVpDVVZWRmMxRlZSa1pSVTNoVVVWVkdWRXhIVGtKUlZtdHpVVEJHUWxGNWVFSlJWVVpFVEVWT1FsRlZUVGRSVlVaRVpFVkpjMWxWUmtKVmVYaFlVVlZHV0V4RlJrSlJWVTF6VVRCR1FsRjVlRzVSYTBaQ1dsTjRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUmthMDF6VXpCR1FsRjVlRkpSVlVaU1RFVldRbEZWYTNOU01FWkNVWGw0UkZGVlJrUlBNRVpDVVRKWmMxTXdSa0pSZVhoU1VWVkdVa3hGVmtKUlZXdHpWRlZHUWxOVGVFUlJWVVpFVHpCV1FsRXpRa05QTUVaQ1VWVkZjMUZWUmtSU2FuUkNVVlZHUWt4RlJrSlNWVVZ6VXpCR1FsTjVlRkpSVlVaU1RFVldRbEZWYXpkUlZVWkVXbWw0VmxGVlJsSk1SVTVDVVZWamMxSlZSa0pSZVhoV1VWVkdWRXhGVGtKUlZVMDNVVlZHUkdSRlNYTlRNRVpDVW5sNFJGRlZSa2hNUjBaQ1VWWmpOMUZWUmtSaGEwbHpWakJHUWxWNWVFUlJWVVpJVEVWV1FsRlZUWE5WVlVaQ1ZIbDRSRkZWUmtoTVIwWkNVVlpqYzFFd1JrSlNVM2h1VVd0R1FsbDVlRVJSVlVaSVRFaEdRMUZWUm5SUmFYaEVVVlZHUkU4d1JrSlJNM0JHVEVkV1FsRlhSWE5STUVaQ1VubDRNVkZyUmtKalZVazNVVlZHUWxGVGVFSlJWVTR5VVhsNFJGRlZSa1JQTUVaQ1VsVlJhVXhEU25waU0xWjVXVEpXVTJJeU9UQkphbTlwVERGV2VscFlTbnBNTTBwb1dtMUdiR0pIV214amJUVm9ZbTFTYkdONU9WRmpiVGx4V2xkT01HTjVPVzFoV0ZGMFdtMUdhbHBYU25aaU1uTjJaRE5rTTB3elFqRlpiWGh3V1hrNWRHSXlVakZpUjFaNlRESmFiVXhYTld4a00wMTJTV2wzYVdNeU9URmpiVTVzWXpCT2RtSnVVbXhpYmxGcFQyeHphVXg1YjNGWVJ6Um5TMmxDUVdKdFpHdGlNazFuV2tkc2VWcFhUakJoV0Zwc1dFYzBaMHRwUWtGaVZ6bHJaRmQ0YkVsSFdtMU1iVFZzWkROT1RtSXlVakZpUjFaalltbEJjVWxGUW5WWlZ6RnNTVWRhYlZSdFZqTmpNVUoyWXpOU1kySnBRWEZKUlVKcldsaE9hbU50Ykhka1IyeDJZbWxDUldGWVNteFpNMUp3WkcxVloyTnRWbnBqUnpsMVl6SnNhV0pIVldka1J6aG5ZMGM1ZW1SRFFuVmFXR05uWXpOU2FHUklWbnBNYVVKalltbEJjVWxGUW14bFIwWjBZMGQ0YkZoSE5HZExhVUU0V20xWmRHSnRWak5qZVRGM1lqTk9NRkJwUVRoTU1scHRURmMxYkdRelRYUmpSemw2WkVRMVkySnBRWEZNTVhoMVdtNVdkVmt6VW5CaU1qUm5XbTFhVDFwWVpIcFZSemw2WkVObmNFbElkR05pYVVGblkyMVdNR1JZU25WSlNIUmpZbWxCWjBsRFFubGFXRTR3WTIxc2FtUkViMmRLTUZWdVRFWjRkVWxEUVdkSlNGSjVXVmMxZWxreWVERmFSMVUyU1VoU2VXUlhWWE5ZUnpSblNVTkJaMlJIVm5SalIzaG9aRWRXVm1OdGR6WkpRMk4xVERJeGRscElWbk5hV0UxMldtMVpkR0p0VmpOamVUbHRXbWsxZFZwWVpIcE1ia0oyWXpOUmRWcEhiSGxhVjA0d1lWaGFiRXh1VW5SalIzZDFZVWhTZEdKRFkzTllSelJuU1VOQloxa3lPWFZrU0VwMllrZDRiR05xYjJkS01scHRWRzFXTTJNeFFuWmpNMUpFWWpJMU1HTnRPWE5pUjFaNVNVZEdla2xJV25SS2VYaGpZbWxCWjBsRFFucFpNamwzV2xSdloyUklTakZhVTNoalltbEJaMGxEUW5sYVdFSnpXVmRPYkU5cFFqQmpibFpzVEVaNGRVbERRV2RKUjNod1ltMXpOa2xIV2pGaWJVNHdZVmM1ZFV0SVRtcGlNMEpzVEVOQ2JHSkhWblJhVnpVd1RFTkNhR1JJVW5samVXdG5aVEY0ZFZoSE5HZEpRMEZuWmxaNGRVbERRamxQTVhoMVpsWjRkVmhITkhaTGFYQmpZbWxCY1VsRlFuVmFNbEoyV1hsQ2EyRllTbXhaTTFKd1pHMVZaMWhITkdkTGFVSkJZbGM1YTJSWGVHeEpSMXB0VEcwMWJHUXpUazVpTWxJeFlrZFdZMkpwUVhGSlJVSjFXVmN4YkVsSFdtMVViVll6WXpGQ2RtTXpVa1JpTWpVd1kyMDVjMkpIVm5sWVJ6Um5TMmxDUVZwSFZucFpNMHB3WTBoU2NHSXlOR2RSTWpsMVpFaEtkbUpIZUd4amFVSjVXbGhPZDJJeU5YcGhWMHB6V2xOQ2JXSXpTV2RrUjJoc1NVYzFiR1F6VFdkalJ6bDZaRU0xWTJKcFFYRk1NWGgxV201V2RWa3pVbkJpTWpSbldtMWFUMXBZWkhwVlJ6bDZaRVZPZG1KdVVubGlNbmh6V2xoSmIwcElUbXBpTTBKc1RFTkJhMk50T1haa1JrNXFZak5DYkV4RFFtMWFhelZzWkROT1ZGcFlTakpoVjA1c1MxaDBZMkpwUVdka2JVWjVTVWhhZEVsRU1HZGtSMmh3WTNwMFkySnBRV2RrYlRCMVpFZFdlbVJEUVRsSlEyUlZZVWRzZWtsSFVuQmpiVlpxWkVkc01scFRRbkJqZVVKcFlqTldkVnBETkc1WVJ6Um5TVWhhZEV4dVFuWmpNMUZuVUZOQ2QySXpUakJQTVhoMVdFYzBaMGxIV2pGaWJVNHdZVmM1ZFVsSVFuWmpNMUZ2UzFoMFkySnBRV2RKUTBJeVlsTTFNMWxYYkRCaFZ6VnVTVVF3WjJSSVNqRmFWSFJqWW1sQlowbERRbTFhYXpWc1pETk9WRnBZU2pKaFYwNXNURzVDZG1NelVXOWtiVEIxWWxkV2VtTXlSbTVhVTNkblpGaENhMWxZVW14Uk1qbDFaRWRXZFdSRGQyZGFiVVp3WWtkV2ExWkhPVkZpTTA0d1MxUnpaMGxHZUhWSlEwSTVXRWMwWjFoSE5HZEpSMW94WW0xT01HRlhPWFZKUjFwb1lWZDRiRnBHVW5aVlJ6bDZaRU5uY0dVeGVIVkpRMEZuU1VoYWRFeHVaR2hoV0ZKd1ltMWpaMUJUUW0xWlYzaDZXbFIwWTJKcFFXZG1WbmgxV0VjMFowbEhXakZpYlU0d1lWYzVkVWxJVm5kYVIwWXdXbFZPZG1KdVVteGlibEZ2UzFoMFkySnBRV2RKUTBGclkyMDVkbVJHVG1waU0wSnNUR2xTYVdOdE9XaGFSMDVvWXpOUmIwb3lUblppYmxKc1ltNVNWbU5IVW1oa1IxWnJTbmxyTjFoSE5HZEpRMEZuWkcwd2RXSlhWbnBqTWtadVdsTkJPVWxEWTI1UE1YaDFTVU5CWjBsSVduUk1ibVJvWVZoU2NHSnRZMmRRVTBKdFdWZDRlbHBVZEdOaWFVRm5abFo0ZFdaV2VIVllSelYwWWpKU01XSkhWWFZhV0doM1lqTktNR041UVRsSlNIUmpZbWxCWjFwSGJIbGFWMDR3WVZoYWJFOXBRbUphYlZwUFdsaGtlbFZIT1hwa1JqQnpXRWMwWjBsSE5XaGlWMVUyU1VOa2JWcHJOV3hrTTA1UllqTk9NRXA1ZUdOaWFVRm5XVEk1ZFdSSVNuWmlSM2hzWTJwdloxZDVZMnRqTWs1MlkwZFZia3hEUVc1S1NFcDJZak5TVkZreU9YZGFVMk56U2pKYWJWUnRWak5qTVU1c1kyNWFjRmt5Vlc1TVEwSnRXbXMxYkdRelRsRmlNMDR3VVRJNWRXUklTblppUjNoc1kyd3djMWhITkdkSlIwNTJZbTVTZVdJeWVITmFXRXBQV1ZjeGJFOXBRVzVhYlZwUFdsaGtlbFZIT1hwa1JVNTJZbTVTZVdJeWVITmFXRWx1V0VjMU9VOHhlSFZZUnpScFdGZ3dQVnh1THk4aklITnZkWEpqWlZWU1REMHZWWE5sY25NdmNtRm1ZV1ZzWm1WeWJtRnVaR1Z6TDFCeWIycGxZM1J6TDJacGRDMW1ZV05sWW05dmF5OTNkM2N2Y0hWaWJHbGpMMjF2WkhWc1pYTXZabVl0Ym1WM2N5OW1aaTV1WlhkekxuQnZjM1F1WkdseVpXTjBhWFpsTG1weklsMTlcbi8vIyBzb3VyY2VVUkw9L1VzZXJzL3JhZmFlbGZlcm5hbmRlcy9Qcm9qZWN0cy9maXQtZmFjZWJvb2svd3d3L3B1YmxpYy9tb2R1bGVzL2ZmLW5ld3MvZmYubmV3cy5wb3N0LmRpcmVjdGl2ZS5qcyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBmZk5ld3NTZXJ2aWNlKCRodHRwLCAkd2luZG93LCAkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcG9zdDogcG9zdCxcbiAgICBhY3Rpdml0aWVzOiBhY3Rpdml0aWVzXG4gIH07XG4gIGZ1bmN0aW9uIHBvc3QobWVzc2FnZSwgZm5TdWNjZXNzLCBmbkVycm9yKSB7XG4gICAgZGVidWdnZXI7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9mYWNlYm9vay9tZS9mZWVkP21lc3NhZ2U9JyArIGVuY29kZVVSSUNvbXBvbmVudChtZXNzYWdlKSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgIGlmIChmblN1Y2Nlc3MpIHtcbiAgICAgICAgZm5TdWNjZXNzKGRhdGEpO1xuICAgICAgfVxuICAgIH0pLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgaWYgKGZuRXJyb3IpIHtcbiAgICAgICAgZm5FcnJvcihkYXRhKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKCdmZk5ld3NTZXJ2aWNlIGZhaWxlZCB0byBwb3N0Jyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWN0aXZpdGllcyhmblN1Y2Nlc3MsIGZuRXJyb3IpIHtcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvZmFjZWJvb2svbWUvZmVlZCcpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICBpZiAoZm5TdWNjZXNzKSB7XG4gICAgICAgIGZuU3VjY2VzcyhkYXRhKTtcbiAgICAgIH1cbiAgICB9KS5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgIGlmIChmbkVycm9yKSB7XG4gICAgICAgIGZuRXJyb3IoZGF0YSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZygnZmZOZXdzU2VydmljZSBmYWlsZWQgdG8gZ2V0IG5ld3MnKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBbJyRodHRwJywgJyR3aW5kb3cnLCAnJHJvb3RTY29wZScsIGZmTmV3c1NlcnZpY2VdO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwzSmhabUZsYkdabGNtNWhibVJsY3k5UWNtOXFaV04wY3k5bWFYUXRabUZqWldKdmIyc3ZkM2QzTDNCMVlteHBZeTl0YjJSMWJHVnpMMlptTFc1bGQzTXZabVl1Ym1WM2N5NXpaWEoyYVdObExtcHpJaXdpYzI5MWNtTmxjeUk2V3lJdlZYTmxjbk12Y21GbVlXVnNabVZ5Ym1GdVpHVnpMMUJ5YjJwbFkzUnpMMlpwZEMxbVlXTmxZbTl2YXk5M2QzY3ZjSFZpYkdsakwyMXZaSFZzWlhNdlptWXRibVYzY3k5bVppNXVaWGR6TG5ObGNuWnBZMlV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVN4WFFVRlhMRU5CUVVNN1FVRkRXaXhQUVVGVExHTkJRVmtzUTBGQlJTeExRVUZKTEVOQlFVY3NRMEZCUVN4UFFVRk5MRU5CUVVjc1EwRkJRU3hWUVVGVExFTkJRVWM3UVVGRGFrUXNUMEZCVHp0QlFVTk1MRTlCUVVjc1EwRkJSeXhMUVVGSE8wRkJRMVFzWVVGQlV5eERRVUZITEZkQlFWTTdRVUZCUVN4RlFVTjJRaXhEUVVGRE8wRkJRMFFzVTBGQlV5eExRVUZITEVOQlFVVXNUMEZCVFN4RFFVRkhMRU5CUVVFc1UwRkJVU3hEUVVGSExFTkJRVUVzVDBGQlRTeERRVUZITzBGQlEzcERMRmxCUVZFN1FVRkRVaXhUUVVGUExFTkJRVUVzUzBGQlNTeExRVUZMTEVGQlFVTXNRMEZCUXl3MFFrRkJNa0lzUlVGQlNTeERRVUZCTEd0Q1FVRnBRaXhCUVVGRExFTkJRVU1zVDBGQlRTeERRVUZETEVOQlFVTXNVVUZCVVN4QlFVRkRMRU5CUVVNc1UwRkJVeXhKUVVGSExFTkJRVWNzUTBGQlFTeE5RVUZMTEVOQlFVY3NRMEZCUVN4UFFVRk5MRU5CUVVjN1FVRkRjRWdzVTBGQlNTeFRRVUZSTEVOQlFVYzdRVUZEWWl4blFrRkJVU3hCUVVGRExFTkJRVU1zU1VGQlJ5eERRVUZETEVOQlFVTTdUVUZEYWtJN1FVRkJRU3hKUVVOR0xFTkJRVU1zVFVGQlRTeEJRVUZETEVOQlFVTXNVMEZCVXl4SlFVRkhMRU5CUVVjc1EwRkJRU3hOUVVGTExFTkJRVWNzUTBGQlFTeFBRVUZOTEVOQlFVYzdRVUZEZGtNc1UwRkJTU3hQUVVGTkxFTkJRVWM3UVVGRFdDeGpRVUZOTEVGQlFVTXNRMEZCUXl4SlFVRkhMRU5CUVVNc1EwRkJRenROUVVObU8wRkJRVUVzUVVGRFFTeFpRVUZOTEVsQlFVa3NRVUZCUXl4RFFVRkRMRGhDUVVFMlFpeERRVUZETEVOQlFVTTdTVUZETjBNc1EwRkJReXhEUVVGRE8wVkJRMG83UVVGQlFTeEJRVU5CTEZOQlFWTXNWMEZCVXl4RFFVRkZMRk5CUVZFc1EwRkJSeXhEUVVGQkxFOUJRVTBzUTBGQlJ6dEJRVU4wUXl4VFFVRlBMRU5CUVVFc1MwRkJTU3hKUVVGSkxFRkJRVU1zUTBGQlF5eHRRa0ZCYTBJc1EwRkJReXhSUVVGUkxFRkJRVU1zUTBGQlF5eFRRVUZUTEVsQlFVY3NRMEZCUnl4RFFVRkJMRTFCUVVzc1EwRkJSeXhEUVVGQkxFOUJRVTBzUTBGQlJ6dEJRVU0xUlN4VFFVRkpMRk5CUVZFc1EwRkJSenRCUVVOaUxHZENRVUZSTEVGQlFVTXNRMEZCUXl4SlFVRkhMRU5CUVVNc1EwRkJRenROUVVOcVFqdEJRVUZCTEVsQlEwWXNRMEZCUXl4TlFVRk5MRUZCUVVNc1EwRkJReXhUUVVGVExFbEJRVWNzUTBGQlJ5eERRVUZCTEUxQlFVc3NRMEZCUnl4RFFVRkJMRTlCUVUwc1EwRkJSenRCUVVOMlF5eFRRVUZKTEU5QlFVMHNRMEZCUnp0QlFVTllMR05CUVUwc1FVRkJReXhEUVVGRExFbEJRVWNzUTBGQlF5eERRVUZETzAxQlEyWTdRVUZCUVN4QlFVTkJMRmxCUVUwc1NVRkJTU3hCUVVGRExFTkJRVU1zYTBOQlFXbERMRU5CUVVNc1EwRkJRenRKUVVOcVJDeERRVUZETEVOQlFVTTdSVUZEU2p0QlFVRkJMRUZCUTBZN1FVRkJRU3hCUVVOQkxFdEJRVXNzVVVGQlVTeEZRVUZKTEVWQlFVTXNUMEZCVFN4RFFVRkhMRlZCUVZFc1EwRkJSeXhoUVVGWExFTkJRVWNzWTBGQldTeERRVUZETEVOQlFVTTdRVUZIY1VNaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMM0poWm1GbGJHWmxjbTVoYm1SbGN5OVFjbTlxWldOMGN5OW1hWFF0Wm1GalpXSnZiMnN2ZDNkM0wzQjFZbXhwWXk5dGIyUjFiR1Z6TDJabUxXNWxkM012SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1bWRXNWpkR2x2YmlCbVprNWxkM05UWlhKMmFXTmxLQ1JvZEhSd0xDQWtkMmx1Wkc5M0xDQWtjbTl2ZEZOamIzQmxLU0I3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnY0c5emREb2djRzl6ZEN4Y2JpQWdJQ0JoWTNScGRtbDBhV1Z6T2lCaFkzUnBkbWwwYVdWelhHNGdJSDA3WEc0Z0lHWjFibU4wYVc5dUlIQnZjM1FvYldWemMyRm5aU3dnWm01VGRXTmpaWE56TENCbWJrVnljbTl5S1NCN1hHNGdJQ0FnWkdWaWRXZG5aWEk3WEc0Z0lDQWdjbVYwZFhKdUlDUm9kSFJ3TG5CdmMzUW9KeTltWVdObFltOXZheTl0WlM5bVpXVmtQMjFsYzNOaFoyVTlKeUFySUdWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENodFpYTnpZV2RsS1NrdWMzVmpZMlZ6Y3lobWRXNWpkR2x2Ymloa1lYUmhMQ0J6ZEdGMGRYTXNJR2hsWVdSbGNuTXBJSHRjYmlBZ0lDQWdJR2xtSUNobWJsTjFZMk5sYzNNcElIdGNiaUFnSUNBZ0lDQWdabTVUZFdOalpYTnpLR1JoZEdFcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcExtVnljbTl5S0daMWJtTjBhVzl1S0dSaGRHRXNJSE4wWVhSMWN5d2dhR1ZoWkdWeWN5a2dlMXh1SUNBZ0lDQWdhV1lnS0dadVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ1ptNUZjbkp2Y2loa1lYUmhLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkbVprNWxkM05UWlhKMmFXTmxJR1poYVd4bFpDQjBieUJ3YjNOMEp5azdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdZV04wYVhacGRHbGxjeWhtYmxOMVkyTmxjM01zSUdadVJYSnliM0lwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKR2gwZEhBdVoyVjBLQ2N2Wm1GalpXSnZiMnN2YldVdlptVmxaQ2NwTG5OMVkyTmxjM01vWm5WdVkzUnBiMjRvWkdGMFlTd2djM1JoZEhWekxDQm9aV0ZrWlhKektTQjdYRzRnSUNBZ0lDQnBaaUFvWm01VGRXTmpaWE56S1NCN1hHNGdJQ0FnSUNBZ0lHWnVVM1ZqWTJWemN5aGtZWFJoS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1M1bGNuSnZjaWhtZFc1amRHbHZiaWhrWVhSaExDQnpkR0YwZFhNc0lHaGxZV1JsY25NcElIdGNiaUFnSUNBZ0lHbG1JQ2htYmtWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUdadVJYSnliM0lvWkdGMFlTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWm1aT1pYZHpVMlZ5ZG1salpTQm1ZV2xzWldRZ2RHOGdaMlYwSUc1bGQzTW5LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVmVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JiSnlSb2RIUndKeXdnSnlSM2FXNWtiM2NuTENBbkpISnZiM1JUWTI5d1pTY3NJR1ptVG1WM2MxTmxjblpwWTJWZE8xeHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa1lYUmhPbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNDdZbUZ6WlRZMExHVjVTakphV0VwNllWYzVkVWxxYjNwTVEwcHRZVmQ0YkVscWIybE1NVlo2V2xoS2Vrd3pTbWhhYlVac1lrZGFiR050TldoaWJWSnNZM2s1VVdOdE9YRmFWMDR3WTNrNWJXRllVWFJhYlVacVdsZEtkbUl5YzNaa00yUXpURE5DTVZsdGVIQlplVGwwWWpKU01XSkhWbnBNTWxwdFRGYzFiR1F6VFhaYWJWbDFZbTFXTTJONU5YcGFXRW95WVZkT2JFeHRjSHBKYVhkcFl6STVNV050VG14amVVazJWM2xKZGxaWVRteGpiazEyWTIxR2JWbFhWbk5hYlZaNVltMUdkVnBIVm5wTU1VSjVZakp3YkZrelVucE1NbHB3WkVNeGJWbFhUbXhaYlRsMllYazVNMlF6WTNaalNGWnBZa2RzYWt3eU1YWmFTRlp6V2xoTmRscHRXWFJpYlZZelkzazViVnBwTlhWYVdHUjZURzVPYkdOdVduQlpNbFYxWVc1TmFWaFRkMmxpYlVaMFdsaE5hVTlzZEdSTVEwcDBXVmhDZDJGWE5XNWplVWsyU1d0R1FsVlZSVGRSVlVaQ1VWTjRVRkZWUmxSTVIwNUNVVlpyYzFFd1JrSlNVM2hNVVZWR1NreEZUa0pSVldOelVUQkdRbEZUZUZCUlZVWk9URVZPUWxGVlkzTlJNRVpDVVZONFZsRlZSbFJNUlU1Q1VWVmpOMUZWUmtaaGExRnpWREJHUWxSNmRFSlJWVTVOVEVVNVFsRlZZM05STUVaQ1VubDRURkZWUmtoUE1FWkNVVEZSYzFsVlJrSlZlWGhFVVZWR1NFeEdaRUpSVmswM1VWVkdRbEZUZUVaUlZVNHlVV2w0UkZGVlJrUlBNRVpDV1RCUmMxVXdSa0pWZVhoTVVWVkdTRXhGVGtKUlZWVnpWREJHUWxSVGVFUlJWVVpJVEVWT1FsRlZSWE5WTUVaQ1ZWTjRSRkZWUmtoTVJVNUNVVlZGYzFRd1JrSlVVM2hFVVZWR1NFOHdSa0pSTTNCRVRFWnNRbEZXUlRkUlZVWkVWV2w0VkZGVlJsQk1SVTVDVVZWRmMxTXdSa0pUVTNoTVVWVkdURXhGUmtKUlZVMXpVVEJHUWxGNWR6QlJhMFpDVFd0SmMxSlZSa0pUVTNoRVVWVkdRa3hIZEVOUlZVWndVV2w0UWxGVlJrUk1SVTVDVVZWTmMxUXdSa0pVVTNoRVVWVkdSRXhGVGtKUlZVMXpWVlZHUkdKclZYTlJWVVpDVVhsNFJGRlZSa1JNUms1Q1VWWk5jMU5WUmtKU2VYaEVVVlZHU0V4RlRrSlJWVVZ6VkZWR1FsTjVlRVJSVlVaSVRFVk9RbEZWUlhOVU1FWkNWRk40UkZGVlJraFBNRVpDVVROYVJFeEdUa0pSVld0elZUQkdRbFZUZUVSUlZVWkdUekJHUWxFeGIzTmFNRXBDVVZaRmMxRlZSa0pSZVhoRVVWVkdSRXhGYkVKUlZXTnpVVEJHUWxGNWVFUlJWVVpFVHpBeFFsRXljRU5QTUVaQ1VWVkZjMU5WUmtaU2FYaEVVVlZHUkV4Rk1VSlJNR3R6VVZWR1FsRjVlRVJSVlVaRVRFWk9RbEZXVFhOVFZVWkNVbmw0UkZGVlJraE1SVTVDVVZWRmMxUlZSa0pUZVhoRVVWVkdTRXhGVGtKUlZVVnpWREJHUWxSVGVFUlJWVVpJVHpCR1FsRXpTa1JNUms1Q1VWVnJjMVF3UmtKVVUzaEVVVlZHUms4d1JrSlJNVmx6V1RCR1FsUlRlRUpSVlVaRVRFVk9RbEZWVFhOVFZVWkNVbmw0UkZGVlJrUk1SVTVDVVZWTk4xUlZSa1JhYW5SQ1VWVkdRa3hGUmtKUk1FVnpWMVZHUWxSVGVFcFJWVVpLVEVWR1FsRlZUWE5STUVaQ1VYbDNORkZyUmtKT2EwbHpVVEJHUWxGNWVFUlJWVVpFVHpCc1FsRjZaRVJNUlU1Q1VWVk5jMUV3UmtKUmVuUkdVVlZPVDA4d1JrSlJWVVZ6VVZWR1dsRlRlRlJSVlVaVVRFWmtRbEZXVFhOUk1FWkNVbE40VkZGVlJsSk1SVTVDVVZWamMxRXdSa0pSVTNoUVVWVkdUa3hGVGtKUlZXTTNVVlZHUkdSRlRYTlZNRVpDVkhsNFJGRlZSa0pNUlhSQ1VWVnJjMU5WUmtKVFUzaENVVlZHUkV4RlRrSlJWVTF6WWxWS1FsRlhkRU5NUlU1Q1VWVk5jMVZWUmtSTk1FbHpVVlZHUWxGNWVFUlJWVVpFVEVaT1FsRldUWE5UVlVaQ1VubDRSRkZWUmtoTVJVNUNVVlZGYzFSVlJrSlRlWGhFVVZWR1NFeEZUa0pSVlVWelZEQkdRbFJUZUVSUlZVWklUekJHUWxFeldrUk1SazVDVVZWcmMxVXdSa0pWVTNoRVVWVkdUazh3UmtKUk1taERURWRrUTFGVlJsSk1SVVpDVVZWTmMxRXdSa0pSZVhoS1VWVkdTRXhGVGtKUlZVMXpVVEJHUWxGNmRFNVJWVTV4VVdwMFFsRlZSa0pNUld4Q1VUQlpjMUV3UmtKUmVYaE9VVlZPU2t4RlJrSlJWVTF6VVRCR1FsRjVlRlJSVlVaVVRFVnNRbEZWWTNOUk1FWkNVbmw0UkZGVlJrSk1SVEZDVVZWemMxRXdSa0pTZVhoRVVWVkdRa3hGT1VKUlZUQnpVVEJHUWxKNmRFSlJWVTU1VVhsNFZGRlZSa3BNUlRsQ1VWVXdjMUV3UmtKU1ZIUkNVVlZPVjB4SFRrSlJWVEJ6VVZWR1FsRjVlRVJSVlVaRVRFVnNRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUlBNREZDVVRKWk4xRlZSa0pSVTNoQ1VWVk9Ra3hHYkVKUlZUQnpVMVZHUWxOVGVFSlJWVVpFVEVWT1FsRlZUWE5oTUU1Q1VWZHNSRXhGVGtKUlZVMXpVVEJHUWxGNmRFcFJWVTV4VWtONFJGRlZSa1JNUlU1Q1VWVk5OMUpWUmtSVWFuUkNVVlZHUWt4RlJrSlJNRmszVVZWR1FsRlRlRUpSVlZaQ1RFVjBRbEZWYzNOVlZVWkNWVk40UmxGVlJrcE1SVlpDVVZWTmMxUXdSa0pVVTNoRVVWVkdTRXhHVmtKUlZrVnpVVEJHUWxKNWVHaFJWVVpZVEVWT1FsRlZZM05aTUVaQ1YxTjRSRkZWUmtSTVJVNUNVVlZOTjFGVlJrUmlSVlZwVEVOS2VtSXpWbmxaTWxaVFlqSTVNRWxxYjJsTU1WWjZXbGhLZWt3elNtaGFiVVpzWWtkYWJHTnROV2hpYlZKc1kzazVVV050T1hGYVYwNHdZM2s1YldGWVVYUmFiVVpxV2xkS2RtSXljM1prTTJRelRETkNNVmx0ZUhCWmVUbDBZakpTTVdKSFZucE1NbHB0VEZjMWJHUXpUWFpKYVhkcFl6STVNV050VG14ak1FNTJZbTVTYkdKdVVXbFBiSE5wVEhsdmNWaEhOR2RMYVVKVFdsaE9kMkl5TlhwaFYwcHpXbE5DYldJelNXZGlWMFoxV1Zka2NHSnRZMmRrUjJoc1NVYzFiR1F6VFdkWVJ6Um5TMng0ZFVsRGIyZFJSelZ1V2tjNWFrbElUbXhqYmxwd1dUSldZMkpwUVhGSlJVSjFXVmN4YkVsSFdtMVViVll6WXpGT2JHTnVXbkJaTWxaalltbEJjVWxGUW5SaU1sSXhZa2RWWjFwdFdYVmliVll6WXpBeGRscElWbk5hVm5oMVNVTnZaMUZJU214aldGWndZMjFXZWtsRFVtOWtTRkozVEVOQmEyUXliSFZhUnprelkzbDNaMHBJU25aaU0xSlVXVEk1ZDFwV2VIVkpRMjkyV0VjMWJXUlhOV3BrUjJ4MlltbENiVnByTld4a00wNVVXbGhLTW1GWFRteExRMUp2WkVoU2QweERRV3RrTW14MVdrYzVNMHhEUVd0amJUbDJaRVpPYW1JelFteExVMEkzV0VjMVkySnBRV2RqYlZZd1pGaEtkVWxJZEdOaWFVRm5TVU5DZDJJelRqQlBhVUozWWpOT01FeEdlSFZKUTBGblNVZEdhbVJIYkRKaFdGSndXbGhOTmtsSFJtcGtSMnd5WVZoU2NGcFlUbU5pYVVGblpsUjBZMkpzZUhWWVJ6Um5TVU00Y1V0c2VIVkpRMEZuUzJsQ1VXSXpUakJKUjBWblltMVdNMGxJVGpCWldGSXhZM2sxWTJKcFFXZEpRM0JqWW1sQlowbERiMmRSUnpWdVdrYzVha2xITVd4a1IyaDJXa05DWTJKcFFXZEpRMjluVVVjMWFHSlhWV2RhYlZwUFdsaGtlbFV5Vm5sa2JXeHFXbE5PZDJJelRqQkpRMEpqWW1sQlowbERiMmRSU0VKb1kyMUdkRWxJZEZSa1NFcHdZbTFrT1VsRFFXZGlWMVo2WXpKR2JscFRRazlhV0dObll6TlNhR1JJVm5wSlIyeDFXbTA1ZVdKWFJqQmhWemwxVEdsQ1kySnBRV2RKUTI5blVVaENhR050Um5SSlNIUnRaRmMxYW1SSGJIWmliakJuV20wMVZHUlhUbXBhV0U1NlNVVldORnBYVGpGa1IxWjZTVWhrYjFwWE5HZGpNMVpxV1RKV2VtTXlXakZpUjNnMVdFYzBaMGxEUVhGSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMk5IT1hwa1EwSm9TVWMxYkdSNVFucGtSMFl3WkZoTmRWaEhOR2RKUTBGeFNVVkNkMWxZU21oaVUwSTNXbTVXZFZrelVuQmlNalU1U1VkYWRWSllTbmxpTTBsblVsaG9iRmt6VmpCYVdFMW5aREpvYkdKcFFtMVpWMnh6U1VoU2RrbEdlSFZKUTBGblMybEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUjBWblltMVdNMGxJVGpCWldGSXhZM2sxWTJKcFFXZEpRMjkyV0VjMFowbEhXakZpYlU0d1lWYzVkVWxJUW5aak0xRnZZbGRXZW1NeVJtNWFVM2RuV20wMVZHUlhUbXBhV0U1NlRFTkNiV0pyVm5samJUbDVTMU5DTjFoSE5HZEpRMEZuV2tkV2FXUlhaRzVhV0VrM1dFYzBaMGxEUVdkamJWWXdaRmhLZFVsRFVtOWtTRkozVEc1Q2RtTXpVVzlLZVRsdFdWZE9iRmx0T1haaGVUbDBXbE01YlZwWFZtdFFNakZzWXpOT2FGb3lWVGxLZVVGeVNVZFdkVmt5T1d0YVZsWlRVMVZPZG1KWVFuWmliVloxWkVOb2RGcFlUbnBaVjJSc1MxTnNZMkpwUVdkSlEwRm5TVU0xZW1SWFRtcGFXRTU2UzBkYU1XSnRUakJoVnpsMVMwZFNhR1JIUlhOSlNFNHdXVmhTTVdONWQyZGhSMVpvV2tkV2VXTjVhMmRsTVhoMVNVTkJaMGxEUVdkSlEwSndXbWxCYjFwdE5WUmtWMDVxV2xoT2VrdFlkR05pYVVGblNVTkJaMGxEUVdkSlEwSnRZbXhPTVZreVRteGpNMDF2V2tkR01GbFRhemRZUnpSblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpRMEZuVEhrNFoxa3lPWFZqTWpseldsTTFjMkl5WTI5S01rNTJZbTFhY0ZvelZubFpXRkp3WWpJMFoySkhPV2hhUjFaclNubHJOMWhJVVdkSlEwRm5XRWMwWjBsRFFXZEpRMEk1UzFaNGRVbERRV2RKUTBGblRHMVdlV050T1hsTFIxb3hZbTFPTUdGWE9YVkxSMUpvWkVkRmMwbElUakJaV0ZJeFkzbDNaMkZIVm1oYVIxWjVZM2xyWjJVeGVIVkpRMEZuU1VOQlowbERRbkJhYVVGdldtMDFSbU51U25aamFXdzNXRWMwWjBsRFFXZEpRMEZuU1VOQloxcHROVVpqYmtwMlkybG9hMWxZVW1oTFZIUmpZbWxCWjBsRFFXZEpRMEZuWmxaNGRVbERRV2RKUTBGblNVTkNhbUl5TlhwaU1uaHNURzE0ZGxwNVoyNWFiVnBQV2xoa2VsVXlWbmxrYld4cVdsTkNiVmxYYkhOYVYxRm5aRWM0WjJOSE9YcGtRMk53VHpGNGRVbERRV2RKUTBGblpsTnJOMWhITkdkSlNERmpZbXg0ZFVsRFFYWkxhWEJqWW1sQlowbERiMmRWYlZZd1kyMXNiR1J0Vldka1IyaHNTVWMxYkdRelRXZGFiVlpzV2tNMVkySnBRV2RKUTNCalltbEJaMGxEYjJkUlJ6VnVXa2M1YWtsSE1XeGtSMmgyV2tOQ1kySnBRV2RKUTI5blVVYzFhR0pYVldkYWJWcFBXbGhrZWxVeVZubGtiV3hxV2xOT2FGa3pVbkJrYld3d1lWZFdla2xEUW1OaWFVRm5TVU52WjFGSVFtaGpiVVowU1VoMGJXUlhOV3BrUjJ4MlltNHdaMXB0TlZSa1YwNXFXbGhPZWtsRlZqUmFWMDR4WkVkV2VrbElaRzlhVnpSbll6TldhbGt5Vm5wak1sb3hZa2Q0TlVsSVNteGtTRXB3V2xoYWJHTXhlSFZKUTBGblMybEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKU0ZKdldsTkNkVnBZWkhwSlIxcHNXbGRSZFZoSE5HZEpRMEZ4U1VWQ2QxbFlTbWhpVTBJM1dtNVdkVmt6VW5CaU1qVTVTVWRhZFZKWVNubGlNMGxuVWxob2JGa3pWakJhV0UxblpESm9iR0pwUW0xWlYyeHpTVWhTZGtsSVNteGtTRXB3V2xoYWJGaEhOR2RKUTBGeFNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RrUjJoc1NVYzFiR1F6VFdkYWJWWnNXa00xWTJKcFFXZEpRMjkyV0VjMFowbEhXakZpYlU0d1lWYzVkVWxIUm1wa1Iyd3lZVmhTY0ZwWVRXOWFiVFZVWkZkT2FscFlUbnBNUTBKdFltdFdlV050T1hsTFUwSTNXRWMwWjBsRFFXZGpiVll3WkZoS2RVbERVbTlrU0ZKM1RHMWtiR1JEWjI1TU1scG9XVEpXYVdJeU9YSk1NakZzVERKYWJGcFhVVzVMVm5oMVNVTkJaMGxEUVdkTWJrNHhXVEpPYkdNelRXOWFibFoxV1ROU2NHSXlORzlhUjBZd1dWTjNaMk16VW1oa1NGWjZURU5DYjFwWFJtdGFXRXA2UzFOQ04xaEhOR2RKUTBGblNVTkJaMGxIYkcxSlEyaHRZbXhPTVZreVRteGpNMDF3U1VOQlowbElkR05pYVVGblNVTkJaMGxEUVdkSlEwSnRZbXhPTVZreVRteGpNMDF2V2tkR01GbFRhemRZUnpSblNVTkJaMGxEUVdkSlNERmpZbWxCWjBsRFFXZEpTREJ3V0VjMFowbERRV2RKUTBGMVdsaEtlV0l6U1c5YWJsWjFXVE5TY0dJeU5HOWFSMFl3V1ZOM1oyTXpVbWhrU0ZaNlRFTkNiMXBYUm10YVdFcDZTMU5DTjFoSE5HZEpRMEZuU1VOQlowbEhiRzFKUTJodFltdFdlV050T1hsTFdIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQ2JXSnJWbmxqYlRsNVMwZFNhR1JIUlhCUE1YaDFTVU5CWjBsRFFXZEpRMEk1V0VjMFowbERRV2RKUTBGblNVZE9kbUp1VG5aaVIxVjFZa2M1Ymt0RFpHMWFhelZzWkROT1ZGcFlTakpoVjA1c1NVZGFhR0ZYZUd4YVEwSXdZbmxDYmxwWVVXZGliVll6WTNsamNFOHhlSFZKUTBGblNVTkJaMlpUYXpkWVJ6Um5TVWd4WTJKdU1XTmliSGgxWWxjNWEyUlhlR3hNYlZZMFkwYzVlV1JJVFdkUVUwSmlTbmxTYjJSSVVuZEtlWGRuU25sU00yRlhOV3RpTTJOdVRFTkJia3BJU25aaU0xSlVXVEk1ZDFwVFkzTkpSMXB0VkcxV00yTXhUbXhqYmxwd1dUSldaRTh4ZUhWSmJERTVYRzR2THlNZ2MyOTFjbU5sVlZKTVBTOVZjMlZ5Y3k5eVlXWmhaV3htWlhKdVlXNWtaWE12VUhKdmFtVmpkSE12Wm1sMExXWmhZMlZpYjI5ckwzZDNkeTl3ZFdKc2FXTXZiVzlrZFd4bGN5OW1aaTF1WlhkekwyWm1MbTVsZDNNdWMyVnlkbWxqWlM1cWN5SmRmUT09XG4vLyMgc291cmNlVVJMPS9Vc2Vycy9yYWZhZWxmZXJuYW5kZXMvUHJvamVjdHMvZml0LWZhY2Vib29rL3d3dy9wdWJsaWMvbW9kdWxlcy9mZi1uZXdzL2ZmLm5ld3Muc2VydmljZS5qcyJdfQ==
